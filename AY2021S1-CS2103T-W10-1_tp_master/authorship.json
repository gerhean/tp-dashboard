[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "## UniSave"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W10-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W10-1/tp/actions)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "UniSave is a desktop finance planner app, optimized for use via a Command Line Interface (CLI) while still having"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "the benefits of a Graphical User Interface (GUI). If you can type fast, UniSave can get your financial management"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "### Acknowledgement"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 2,
      "-": 3,
      "yuming7144": 9
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "run {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    archiveName \u003d \u0027UniSave.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "run {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 2,
      "-": 73,
      "yuming7144": 5
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "### Xie Yaoren"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cimg src\u003d\"images/billxyr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[[github](https://github.com/BILLXYR)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Role: Developer, Testing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Responsibilities: Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "### Wayne Tan Kin Lun"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cimg src\u003d\"images/tanwayne890.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[[github](https://github.com/tanwayne890)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Role: Developer, Deliverables \u0026 Deadlines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "### Zhang Yuanxing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cimg src\u003d\"images/yuanxing-y.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[[github](https://github.com/yuanxing-y)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Role: Developer, Documentation \u0026 Code Quality"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Responsibilities: Data, Storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "### Yao Yuming"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cimg src\u003d\"images/yuming7144.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[[github](https://github.com/yuming7144)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Role: Developer, Scheduling \u0026 Tracking"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "### Yang Yutong"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cimg src\u003d\"images/yyutong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[[github](https://github.com/yyutong)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Role: Developer, Team Lead, Integration"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 23,
      "-": 38
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ExpenseListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a expense)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* stores the expense book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExpense\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W10-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* can save the expense book data in json format and read it back."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyutong"
        },
        "content": "### \\[Proposed\\] Delete Expense feature"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "The proposed delete mechanism is facilitated by `VersionedExpenseBook`. It extends `ExpenseBook` and stored internally as an `ExpenseBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* `VersionedExpenseBook#save()` — Saves the current expense book state in its history."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* `VersionedExpenseBook#delete()` — Restores the previous expense book state from its history."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#saveExpenseBook()`, `Model#deleteExpenseBook()` respectively."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Given below is an example usage scenario and how the delete mechanism behaves at each step."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedExpenseBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single expense book state."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "![UndoRedoState0](images/deleteState0.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th expenses in the expense book. The `delete` command calls `Model#saveExpenseBook()`, causing the modified state of the expense book after the `delete 5` command executes to be saved in the `expenseBookStateList`, and the `currentStatePointer` is shifted to the newly inserted expense book state."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "![UndoRedoState1](images/deleteState1.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Step 3. The user executes `add a/100 c/Entertainment D/1 d/Movie` to add a new expense. The `add` command also calls `Model#saveAddressBook()`, causing another modified expense book state to be saved into the `expenseBookStateList`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "![UndoRedoState2](images/deleteState2.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#saveExpenseBook()`, so the expense book state will not be saved into the `expenseBookStateList`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Step 4. The user now decides that adding the expense was a mistake, and decides to delete that expense by executing the `delete` command. The `delete` command will call `Model#deleteExpenseBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous expense book state, and restores the expense book to that state."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "![UndoRedoState3](images/deleteState3.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial ExpenseBook state, then there are no previous ExpenseBook states to restore. The `delete` command uses `Model#canDeleteExpenseBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "The following sequence diagram shows how the delete operation works:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "![UndoSequenceDiagram](images/deleteExpenseSequenceDiagram.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteExpenseCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the expense being deleted)."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "### \\[Proposed\\] List feature"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "The proposed list feature belongs to `ListExpenseCommand` extends `Command`. This list feature will not modify the expense list of UniSave."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "`ListExpenseCommand` is created at `ExpenseBookParser` which is called by `LogicManager` to parse input string into `Command`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "`LogicManager` takes in input string from `CommandBox` which belongs to one of the GUI component."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Given below is an example usage scenario of how the list feature behaves at each step."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Step 1. User initializes the app. `ExpenseModelManager` extends `Model`, has a FilteredList of expenses. \u003cbr/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Step 2. After user inputs list command, the steps can be shown from this sequence diagram."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "![ListSequenceDiagram](images/ListSequenceDiagram.png)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:**  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "`FilteredList` is a JavaFX class that wraps an `ObservableList` and filters it\u0027s content using the provided Predicate. "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Step 3: As we can see from the sequence diagram, a result is also returned to `UI` and shown to the app GUI."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "![ListActivityDiagram](images/ListActivityDiagram.png)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "####Show Budget feature"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "The show budget feature is mainly supported by the `ExpenseBook` class."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Fig. Activity Diagram for the Execution of `ShowBudgetCommand`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "![ShowBudgetActivityDiagram](images/ShowBudgetActivityDiagram.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Step 2. Unisave displays a list of existing expenses in the UI."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Step 3. User set a budget."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Step 4. The user executes `showBudget` to check the current budget."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "UI shows the message of current budget and remaining budget."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "The sequence diagram below shows the high-level abstraction of how Unisave processes user request"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "to execute `showBudget` when a budget was set:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "High Level Sequence Diagram for the Execution of `showBudget`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "![ShowBudgetSequenceDiagram](images/ShowBudgetSequenceDiagram.png)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "##### Aspect: How to handle the case when the remaining budget is negative (i.e. current spending exceed the budget)."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* Alternative 1 (current choice): Show the remaining budget at negative value, and ask the user to set a new budget."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  * Pros: Expense always contains a description object. No possibility of 0 description object in expense."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  * Cons: Is not supposed to happen in real life, not intuitive."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* Alternative 2: Show alerts when the user is overspending, and does not allow the user to spend more before set a new budget."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  * Pros: No more negative budget, more intuitive."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  * Cons: Much more complicated implementation."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th expense in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new expense. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Step 4. The user now decides that adding the expense was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "### Manage description of Expense Feature"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "As an expense management application, one of the most important features is to add a description when"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "recording down and tracking the expenses, so that later when users review their expenses, they have a better"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "idea of what he spent on. "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "This section will cover the details of the current implementation and design considerations of"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "the description management feature."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "The expense management feature supports five main operations:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* `add` - record an expense, with an amount, a date, a category and a description as fields."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* `view` - view the details of an existing expense."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* `delete` - delete an existing expense from the expense list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* `addDes` - add a description to an existing expense."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* `deleteDes` - delete the description of an existing expense."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yyutong"
        },
        "content": "####Add description"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "The add description features and delete description feature are mainly supported by the `Expense` class."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Given below is the class diagram of the `Expense` class."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Fig. Class Diagram for Expense."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "![ExpenseClassDiagram](images/ExpenseClassDiagram.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Given below is an example usage scenario and how the mechanism for adding description to expenses behaves at each step."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `AddDescriptionCommand`:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Fig. Activity Diagram for the Execution of `AddTaskCommand`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "![AddDescriptionActivityDiagram](images/AddDescriptionActivityDiagram.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Step 2. Unisave displays a list of existing expenses in the UI."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Step 3. The user executes `Spent on books` to add the description "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\"Spent on books\" to the expense with index 2 in the displayed expense list."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "The `AddDescriptionCommand` calls `Description` to create a new description object and a new Expense object containing "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "this newly created description object, and replace the previous expense object with this updated expense in the "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "`ExpenseList` stored in `UniSave`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "The sequence diagram below shows the high-level abstraction of how Unisave processes user request"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "to execute `addDes 2 d/Spent on books`:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "High Level Sequence Diagram for the Execution of `addDes 2 d/Spent on books`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "![AddDescriptionActivityDiagram](images/AddDescriptionSequenceDiagram.png)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "##### Aspect: How to manage empty description, as description is optional."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* Alternative 1 (current choice): Use empty string to create description, if description is empty."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "** Pros: Expense always contains a description object. No possibility of 0 description object in expense."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "** Cons: When deleting the description, the description object is not deleted and \"Description:\" field is still shown on UI."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* Alternative 2: Use an `Optional` for descriptions."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "** Pros: More intuitive."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "** Cons: Harder to manage and prone to error."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yyutong"
        },
        "content": "####View an expense "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The view expense feature is facilitated by the `ExpenseBook` class."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Given below is the class diagram of the `ExpenseBook` class."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Fig. Class Diagram for ExpenseBook."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![ExpenseClassDiagram](images/ExpenseClassDiagram.png)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Given below is an example usage scenario and how the mechanism of viewing an expense behaves at each step."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `ViewCommand`:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Fig. Activity Diagram for the Execution of `ViewCommand`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![AddDescriptionActivityDiagram](images/ViewActivityDiagram.png)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Step 2. Unisave displays a list of existing expenses in the UI."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Step 3. The user executes `view 1` to view the details of the expense with index 1(the first expense) "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yyutong"
        },
        "content": "in the displayed expense list."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The `ViewCommand` searches for the first expense in the `ExpenseList` stored in `UniSave`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yyutong"
        },
        "content": "and creates a CommandResult which contains the details of the first expense found in the list."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The sequence diagram below shows the high-level abstraction of how Unisave processes user request"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yyutong"
        },
        "content": "to execute `view 1`:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yyutong"
        },
        "content": "High Level Sequence Diagram for the Execution of `view 1`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![AddDescriptionActivityDiagram](images/AddDescriptionSequenceDiagram.png)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yyutong"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yyutong"
        },
        "content": "##### Aspect: How to manage empty description, as description is optional."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yyutong"
        },
        "content": "* Alternative 1: Directly see the expense from the UI."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yyutong"
        },
        "content": "** Pros: No need to type in any command."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yyutong"
        },
        "content": "** Cons: May take some time to scroll down the list to look for the correct index, especially when the "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yyutong"
        },
        "content": "         expense list is sorted by date/amount."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yyutong"
        },
        "content": "         "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yyutong"
        },
        "content": "         "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yyutong"
        },
        "content": "####View all existing expense categories "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The view existing expense categories feature is facilitated by the ExpenseBook class."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Given below is the class diagram of the `ExpenseBook` class."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Fig. Class Diagram for ExpenseBook."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![ExpenseClassDiagram](images/ExpenseClassDiagram.png)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Given below is an example usage scenario and how the mechanism of viewing an expense behaves at each step."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `ViewCategoryCommand`:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Fig. Activity Diagram for the Execution of `viewCategory`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![AddDescriptionActivityDiagram](images/ViewCategoryActivityDiagram.png)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Step 2. Unisave displays a list of existing expenses in the UI."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Step 3. The user executes `viewCategory` to view all the existing expense category labels "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        in the ExpenseBook in Unisave."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The `ViewCategoryCommand` searches for the first expense in the `ExpenseList` stored in `UniSave`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yyutong"
        },
        "content": "and creates a CommandResult which contains the details of the first expense found in the list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yyutong"
        },
        "content": "The sequence diagram below shows the high-level abstraction of how Unisave processes user request"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yyutong"
        },
        "content": "to execute `viewCategory`:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yyutong"
        },
        "content": "High Level Sequence Diagram for the Execution of `viewCategory`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![AddDescriptionActivityDiagram](images/ViewCategorySequenceDiagram.png)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yyutong"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yyutong"
        },
        "content": "##### Aspect: How to manage empty description, as description is optional."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yyutong"
        },
        "content": "* Alternative 1: Directly search for existing expense categories from the UI."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yyutong"
        },
        "content": "** Pros: No need to type in any command."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yyutong"
        },
        "content": "** Cons: Takes a lot of time to do so."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* university international students who want to plan their finance"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* spend various currency"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "1. Problem: spending in different currency not tracked by many existing apps -\u003e track spending in different currency"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "2. Problem: student exceeds budget, spending without control -\u003e help you manage expense reasonably, save some money at the end of the month"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "3. Problem: student want to plan their finance, but writing them down is too troublesome -\u003e this app is very convenient to use as users can record their finance any time they want"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "4. Problem: Student spend at various fields, too messy to record -\u003e the labels functions allow students to organize their spending"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "5. Problem: Existing apps are complicated, not easy to use -\u003e this app is simple to use and very user-friendly."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                                  |"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| -------- | ------------------------------------------ | ---------------------------------- | --------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | Add an expense with category       | keep track of my accounts                                                               |"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | View an expense                    | easily see the details such as dates, amount and descriptions of a specific expense     |"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | Delete an expense                  | delete the expense when I added wrongly                                                 |"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | List all expenses                  | view all expenses                                                                       |"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | Tag an expense                     | view the specific task I spend on                                                       |"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | Set budget                         | plan my expenses                                                                        |"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | View budget                        | view how much i can spend before exceeding the monthly limit                            |"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* * *`  | user                                       | Delete a tag of an expense         | delete the category label when I tagged wrongly                                         |"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* *`    | user                                       | List all categories                | view all expenses                                                                       |"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "| `* *`    | user                                       | List all expenses in one category  | view all expenses spent under one category                                              |"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: Add expense with its category**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list expenses"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave shows a list of existing expenses"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "3.  User requests to add a category to a specific expense in the list"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "4.  UniSave adds the category input by user to the specific expense"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 3a1. UniSave shows an error message."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case resume at Step 2"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: View expense**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list all the expenses"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave shows a list of existing expenses"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: Delete a current expense**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list expenses"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave shows a list of existing expenses"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "3.  User requests to delete a specific expenses in the list"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "4.  UniSave deletes the requested expense chosen by the user."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 3a1. UniSave shows an error message."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: Add a description to an expense**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list expenses"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave shows a list of expenses"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "3.  User requests to add a description to a specific expense in the list"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "4.  UniSave adds the description input by user to the specific expense"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: Delete the current description of an expense**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list expenses"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave shows a list of expenses"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "3.  User requests to delete the description of a specific expense in the list"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "4.  UniSave deletes the description of expense chosen by the user."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 3a1. UniSave shows an error message."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* 2a. The input category is invalid or does not exist."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 2a1. UniSave shows an error message."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: List all expenses**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list all the expenses"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  AddressBook shows a list of expenses"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: View category labels**"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list available category labels"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave shows a list of existing category labels"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: List all expenses in a specific category**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to list all the expenses in a specific category"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  AddressBook shows a list of expenses in that category"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: Set Budget**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to set a new budget."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave updates and displays the new budget."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* 1a. UniSave detects an error in the entered value."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 1a1. UniSave requests for the correct value."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 1a2. User enters a valid value."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 1a3. UniSave updates and displays the new budget."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * Use case ends."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: View Total Budget**"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to view total budget."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave displays the total budget."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* 2a. User does not have a budget set yet."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 2a1. Unisave displays the default budget 0."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 2a2. UniSave requests for setting a budget."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 2a3. User sets a budget."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * 2a4. UniSave displays the amount set by the user."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    * Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: View Remaining Budget**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User requests to view remaining budget."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave displays the remaining budget."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**Use case: Alert**"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1.  User\u0027s spending exceed budget."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2.  UniSave shows alerts."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1. Should be able to function well without connecting to internet."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "2. Should be accessed for a single user."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using a mouse."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "4. The product should be easy to use by a novice with no experience of using a finance tracking application."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "5. Documentation should be easy to read and understand with proper highlighting."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yyutong"
        },
        "content": "* **Expense**: The amount of money spent by the user student in a certain event"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yyutong"
        },
        "content": "* **Budget**: The maximum amount of money that the user student can spend"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "### Deleting a expense"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "1. Deleting an expense while all expenses are being shown"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yyutong"
        },
        "content": "   1. Prerequisites: List all expenses using the `list` command. Multiple expenses in the list."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yyutong"
        },
        "content": "      Expected: First expense is deleted from the list. Details of the deleted expense shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yyutong"
        },
        "content": "      Expected: No expense is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 203,
      "tanwayne890": 25,
      "yyutong": 87,
      "-": 377,
      "yuming7144": 64,
      "BILLXYR": 38
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "UniSave is a **desktop app for managing expenses, optimized for use via a Command Line Interface** (CLI) "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "If you can type fast, UniSave can get your financial management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Choose a section from the table of contents below and start using UniSave."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * [1. Overview](#1-overview)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * [2. Quick start](#2-quick-start)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * [3. Features](#3-features)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.1 Clear data: `clear`](#31-clear-data-in-unisave--clear)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.2 Set budget : `set-b`](#32-set-budget--set-b)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.3 Add an expense: `add`](#33-add-an-expense-add)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.4 Edit an expense: `edit`](#34-edit-an-expense--edit)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.5 Delete an expense: `delete`](#35-delete-an-expense-delete)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.6 View an expense : `view`](#36-view-an-expense--view)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.7 View categories : `view-c`](#37-view-categories--view-c)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.8 Filter expenses](#38-filter-expenses)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            * [3.8.1 Filter by category: `filter-c`](#381-filter-by-category-filter-c)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            * [3.8.2 Filter by date: `filter-t`](#382-filter-by-date--filter-t)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            * [3.8.3 Filter by description: `filter-d`](#383-filter-by-description--filter-d)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.9 List all expenses : `list`](#39-list-all-expenses--list)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.10 Sort expenses](#310-sort-the-expenses)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            * [3.10.1 Sort expenses by the amount of each expense: `sort-a`](#3101-sort-expenses-by-the-amount-of-each-expense-sort-a)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            * [3.10.2 Sort expenses by the date of each expense: `sort-t`](#3102-sort-expenses-by-the-date-of-each-expense-sort-t)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.11 Exchange Currency : `exchange`](#311-exchange-currency--exchange)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.12 Show Currency Codes: `show-codes`](#312-show-currency-codes-show-codes)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.13 Show Exchange Rates: `show-rates`](#313-show-exchange-rates-show-rates)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.14 Show Statistics: `show-stats`](#314-show-statistics-show-stats)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.15 View help: `help`](#315--view-help-help)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.16 Exiting the program : `exit`](#316-exit-the-program--exit)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        * [3.17 Saving the data](#317-saving-the-data)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * [4. FAQ(Frequently Asked Question)](#4-faqfrequently-asked-question)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * [5. Glossary](#5-glossary)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * [6. Command Summary](#6-command-summary)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "## 1. Overview"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UniSave is your desktop finance manager. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "It is an application that helps you manage your finance by tracking your spending, "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "setting budget for each month, as well as viewing your expenses in various categories. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Moreover, UniSave allows tracking expenses in different currencies."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "UniSave targets university students who tend to incur a large amount of spending, "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "including tuition fees, housing fees, transport and so on. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "It is catered especially for students who are more familiar with desktop applications and type fast."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "UniSave is available for the Linux, Windows and Mac OS operating systems."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "2. Download the latest `UniSave.jar` from [here](https://github.com/AY2021S1-CS2103T-W10-1/tp/releases)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your UniSave."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "4. For Windows user, double-click the file to start the app. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "For MacOS user, open your terminal and set the directory to be the same as UniSave, enter `java -jar UniSave.jar`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "In a few seconds, you should see a GUI similar to the diagram below. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "5. Type the command in the command box and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "   * **`list`** : Lists all expenses."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`set-b 1000`** : Set the budget of UniSave to be 1000 SGD (Singapore Dollar is the Default Currency for UniSave)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`add a/50 c/entertainment D/1 d/yayymovie!`** : "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   Adds an expense of `50` SGD under category `entertainment` you spent `1` day ago (i.e. yesterday), "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   with `yayymovie!` description."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exchange c/cny`** : Change the currency of the whole expense book to Chinese Yuan "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "   (CNY is the currency code for Chinese Yuan)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`show-stats`** : Show a statistic overview of all your expenses."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`delete`**`1` : Deletes the expense with index 1."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "6. Refer to the [Features](#3-features) below for details of each command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.1 Clear data: `clear`](#31-clear-data-in-unisave--clear)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.2 Set budget : `set-b`](#32-set-budget--set-b)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.3 Add an expense: `add`](#33-add-an-expense-add)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.4 Edit an expense: `edit`](#34-edit-an-expense--edit)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.5 Delete an expense: `delete`](#35-delete-an-expense-delete)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.6 View an expense : `view`](#36-view-an-expense--view)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.7 View categories : `view-c`](#37-view-categories--view-c)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.8 Filter expenses](#38-filter-expenses)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    * [3.8.1 Filter by category: `filter-c`](#381-filter-by-category-filter-c)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    * [3.8.2 Filter by date: `filter-t`](#382-filter-by-date--filter-t)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    * [3.8.3 Filter by description: `filter-d`](#383-filter-by-description--filter-d)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.9 List all expenses : `list`](#39-list-all-expenses--list)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.10 Sort expenses](#310-sort-the-expenses)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    * [3.10.1 Sort expenses by the amount of each expense: `sort-a`](#3101-sort-expenses-by-the-amount-of-each-expense-sort-a)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    * [3.10.2 Sort expenses by the date of each expense: `sort-t`](#3102-sort-expenses-by-the-date-of-each-expense-sort-t)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.11 Exchange Currency : `exchange`](#311-exchange-currency--exchange)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.12 Show Currency Codes: `show-codes`](#312-show-currency-codes-show-codes)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.13 Show Exchange Rates: `show-rates`](#313-show-exchange-rates-show-rates)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.14 Show Statistics: `show-stats`](#314-show-statistics-show-stats)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.15 View help: `help`](#315--view-help-help)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.16 Exiting the program : `exit`](#316-exit-the-program--exit)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* [3.17 Saving the data](#317-saving-the-data)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "  e.g. in `add a/AMOUNT`, `AMOUNT` is a parameter which can be used as `add a/100`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional (zero or one instance).\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `a/AMOUNT c/CATEGORY [t/date]` can be used as `a/100 c/shopping` or as `a/100 c/shopping t/2020-10-30`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `a/AMOUNT C/CATEGORY, c/CATEGORY a/AMOUNT` is also acceptable."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Commands  \u003ca name\u003d\"commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.1 Clear data in UniSave : `clear`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Clear all the data in the program. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "You can use this command to clear the sample data when you first launch the app, "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "or use it whenever you want to start a new expense book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.2 Set budget : `set-b`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Set the budget for UniSave. Default budget is 0 Singapore Dollar (SGD). "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "When total spending exceed the budget, UniSave will remind you to set a new budget."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `set-b AMOUNT`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "`set-b 500`: Set the budget to 500."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![setBudget](images/setBudgetCommand.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "You can change the Currency with command \u003cb\u003eexchange cc/CURRENCY_CODE\u003c/b\u003e, "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "to see a full list of supported currencies with their currency codes use command \u003cb\u003eshow-codes\u003c/b\u003e."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.3 Add an expense: `add`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an expense."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add a/AMOUNT c/CATEGORY [t/DATE] [d/description]`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Note that an amount of an expense should only be positive numbers."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "If you don\u0027t input a date, the default date is today.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "If you do, a date can be entered in one of these two forms:\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "i) Enter date as a single integer, corresponding to number of days ago. \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "E.g: 1 means you made the expenses one day ago. (Note that when date is given as a single integer,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "it should not be less than 0 or greater than 3650)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "ii) Enter date as the exact date in YYYY-MM-DD format. E.g: 2020-10-28\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "You may enter each field in a different order. That means `add a/100 c/food t/1 d/milk tea membership card` gives the "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "same result as `add t/1 d/milk tea membership card c/food a/100`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* `add a/100 c/food t/1 d/milk tea membership card`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `add a/50 c/entertainment t/2020-09-28 d/yayymovie!`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "![add](images/addExpenseCommand.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.4 Edit an expense : `edit`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Edit an expense."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [a/AMOUNT] [c/CATEGORY] [t/DATE] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the expense at the specified INDEX."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the expense list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer greater than 0**. eg. 1, 2, 3, …"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* If no field is provided, no change will be done."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 a/10.2`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "![Edit](images/EditCommand.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.5 Delete an expense: `delete`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes an expense."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* Deletes the expense at the specified `INDEX`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* The index refers to the index number shown in the expense list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd expense in the expense list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![delete](images/deleteExpenseCommand.png)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.6 View an expense : `view`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "View an expense in the expense list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "View the expense at the specified INDEX."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "The index refers to the index number shown in the displayed expense list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* The index must be a **positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yyutong"
        },
        "content": "* `view 3` views the `amount, category, date and description` of the third expense displayed in the list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![view](images/viewCommand.png)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.7 View categories : `view-c`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Show all existing categories in the expense list. Note that a category is added automatically when you add an expense."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view-c`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yyutong"
        },
        "content": "![viewCategory](images/viewCategoryCommand.png)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.8 Filter Expenses"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Filters for specific expense(s) based on the input command."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "##### 3.8.1 Filter by category: `filter-c`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Show all the expenses whose category match the specified category."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `filter-c CATEGORY`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter-c entertainment`: filter all the expenses under category `entertainment`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "![filter-c](images/listByCategoryCommand.png)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "##### 3.8.2 Filter by date : `filter-t`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Show all the expenses whose date match the specified date."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `filter-t YYYY-MM-DD`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "The date format `YYYY-MM-DD` is sensitive and only this format is recognizable for this command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter-t 2020-10-23`: filter all the expenses that are saved on `2020-10-23`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "![filter-t](images/listByDateCommand.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "##### 3.8.3 Filter by description : `filter-d`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Show all the expenses whose description contains the specified description."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `filter-d DESCRIPTION`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Multiple description input is allowed."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter-d movie`: filter all the expenses which description has the keyword `movie`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "![filter-d](images/listByDescCommand.png)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.9 List all expenses : `list`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "You can list out all the expenses stored in UniSave."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* `list`: list all the expenses in UniSave."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "![list](images/listCommand.png)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.10 Sort the expenses"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Sort the expense(s) based on the input command."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "##### 3.10.1 Sort expenses by the amount of each expense: `sort-a`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Sort the expenses in specified order."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort-a descending`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        `sort-a ascending`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Examples: `sort-a ascending`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Sort the expenses according to amount in ascending order."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "![sort by amount in ascending order](images/sortByAmount.png)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "##### 3.10.2 Sort expenses by the date of each expense: `sort-t`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Sort the expenses according to date in specified order. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort-t ascending`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        `sort-t descending`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Examples: `sort-t ascending`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Sort the expenses according to date in ascending order (i.e. from past to present.)."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "![sort by time in descending order](images/sortByTime%20descending.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "![sort by time in ascending order](images/sortByTime%20ascending.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.11 Exchange Currency : `exchange`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Convert the currency of UniSave from current currency to the input currency of the currency code, "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "note that the currency code is case-insensitive."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exchange cc/CURRENCY_CODE`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Example: `exchange cc/CNY`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Use command \u003cb\u003eshow-codes\u003c/b\u003e to see a full list of currency codes supported by UniSave."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "![exchange_after](images/ExchangeCommand-after.png)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.12 Show Currency Codes: `show-codes`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Show a full list of supported currencies with their corresponding currency codes."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `show-codes`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "![currency_codes](images/CurrencyCodes.png)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.13 Show Exchange Rates: `show-rates`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Show a full list of exchange rates adapted by UniSave. "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Note that the exchange rates were last updated at 2020-10-31 from currency-layer website, "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "there may be a slight inaccuracy compared to current exchange rates."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `show-rates`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "![exchange_rates](images/ExchangeRates.png)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.14 Show Statistics: `show-stats`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Show a statistic overview of the expenses, "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "such as the total number of expenses as well as the total spending in each category."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "There are arranging in descending order in which the category that you spent the most will be on the first row."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `show-stats`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Examples: `show-stats`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "![showStatistic](images/showStatisticCommand.png)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "![showStatistic_table](images/showStatisticTable.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.15 : View help: `help`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Opens a window with a link that directs you to our user guide, and a table shows all the commands of UniSave."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.16 Exit the program : `exit`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3.17 Saving the data"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "UniSave data are saved in the hard disk automatically after any command that changes the data. "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Navigate back to the feature list: [Features](#3-features)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "## 4. FAQ(Frequently Asked Question)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "creates with the file that contains the data of your previous UniSave home folder. \u003cbr\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "## 5. Glossary "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Term | Explanation"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "**UniSave** | UniSave refers to the name of the application."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "**Expense** | An expense consists of an amount spent in some currency, the date on which you spend the money, "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "a category that you classify this spending into, "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "and a description so that you can recall the details when you view this spending again later."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "**CLI** | A command-line interface (CLI) processes commands to a computer program in the form of lines of text."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "**GUI** | The graphical user interface is a form of user interface that allows users to "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "interact with a computer program through graphical icons instead of text-based user interfaces or text navigation."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "## 6. Command Summary"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear data**|`clear`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "**Set budget** | `set-b AMOUNT` \u003cbr\u003e e.g., `set-b 1000`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "**Add** | `add a/AMOUNT c/CATEGORY [t/DATE] [d/DESCRIPTION]` \u003cbr\u003e e.g., `add a/100 c/food`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "**Edit** | `edit INDEX [a/AMOUNT] [c/CATEGORY] [t/DATE] [d/DESCRIPTION]` \u003cbr\u003e e.g., `edit 1 a/12`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "**Delete** | `delete INDEX` \u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "**View** | `view INDEX` \u003cbr\u003e e.g., `view 5`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "**View categories** | `view-c`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "**Filter by category** | `filter-c CATEGORY` \u003cbr\u003e e.g., `filter-c food`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "**Filter by date** | `filter-t YYYY-MM-DD` \u003cbr\u003e e.g., `filter-t 2020-02-20`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "**Filter by description** | `filter-d DESCRIPTION` \u003cbr\u003e e.g., `filter-d movies`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "**Sort by amount** | `sort-a ORDER` \u003cbr\u003e e.g., `sort-a acsending`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "**Sort by date** | `sort-t ORDER` \u003cbr\u003e e.g., `sort-t descending`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "**Exchange Currency** | `exchange cc/CURRENCY_CODE` \u003cbr\u003e e.g., `exchange cc/CNY`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "**Show Currency Codes** | `show-codes`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "**Show Exchange Rates** | `show-rates`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "**Show Statistic** | `show-stats`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "**Help** | `help` \u003cbr\u003e e.g., `help`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "**Exit** | `exit` \u003cbr\u003e e.g., `exit`"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "tanwayne890": 28,
      "yyutong": 26,
      "-": 349,
      "yuming7144": 10,
      "BILLXYR": 59
    }
  },
  {
    "path": "docs/diagrams/AddDescriptionActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ":User executes an AddDescription command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    :Instantiate an AddDescriptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    :Execute AddDescriptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    if () then ([the given description is valid])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if () then ([the given index is valid])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            :Create a new Description and add it to the expense at the given index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            :Update UI with the current expense and corresponding expense list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            :throw an exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            :update UI to notify user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        :throw an exception;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        :update UI to notify user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    :Save ExpenseBook to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    expenseBookStateList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    :throw an exception;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    :update UI to notify user;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "endif"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "stop"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 2,
      "yuming7144": 28
    }
  },
  {
    "path": "docs/diagrams/AddDescriptionSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"addDes 2 d/Spent on books\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"Spent on books\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : model.updateFilteredExpenseList()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveExpenseBook(expenseBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 38
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteExpense(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveExpenseBook(expenseBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "UniquePersonList o-right-\u003e Expense"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Expense *--\u003e Category"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Expense *--\u003e Date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Expense *--\u003e Description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 8,
      "-": 13
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "if () then ([command commits ExpenseBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    :Save ExpenseBook to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    expenseBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "DeleteCommandParser --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "DeleteCommandParser --\u003e ExpenseBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "DeleteCommand -\u003e Model : deleteExpense(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ExpenseClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Class ExpenseBook"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Package Expense \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Class Category"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Class ExpenseList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ExpenseBook *--\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ExpenseList o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Expense *--\u003e \"1\" Amount"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Expense *--\u003e \"1\" Date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Expense *--\u003e \"1\" Category"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Expense *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 3,
      "yuming7144": 23
    }
  },
  {
    "path": "docs/diagrams/ListActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "(*)  --\u003e \"User execute list command\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "--\u003e \"Ui shows the expense list\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "--\u003e \"Ui shows command result\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "docs/diagrams/ListSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "skinparam BoxPadding 20"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "participant \"l:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "participant \"fe:FilteredList\" as FilteredList MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[-\u003e MainWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "MainWindow -\u003e LogicManager : execute(list)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(list)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "ExpenseBookParser -\u003e ListCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "ListCommand --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : l"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "LogicManager -\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "ListCommand -\u003e Model : updateFilteredExpenseList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Model -\u003e FilteredList : setPredicate(Predicate)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "ListCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "ListCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "destroy ListCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "MainWindow \u003c--LogicManager : result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[\u003c-- MainWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 61
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class ExpenseBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 1,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Interface ReadOnlyExpenseBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Class ExpenseBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Class ReadOnlyExpenseBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Class ExpenseModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Package Expense {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class Category"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Class ExpenseList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBook .up.|\u003e ReadOnlyExpenseBook"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ExpenseModelManager o--\u003e \"1\" ExpenseBook"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ExpenseBook *--\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ExpenseList o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Expense *--\u003e Date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Expense *--\u003e Category"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Expense *--\u003e Description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Amount -[hidden]right-\u003e Category"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Category -[hidden]right-\u003e Date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Date -[hidden]right-\u003e Description"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ExpenseModelManager --\u003e\"1\" Expense : manage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 13,
      "yyutong": 12,
      "-": 25
    }
  },
  {
    "path": "docs/diagrams/ShowBudgetActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ":User executes an showBudget command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ":Instantiate an ShowBudgetCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ":Execute ShowBudgetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "if () then ([current budget greater than zero])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    :shows message of current budget and remaining budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    :Notify user to set a new budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "stop"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 12
    }
  },
  {
    "path": "docs/diagrams/ShowBudgetSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"showBudget\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"showBudget\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : model.getExpenseBookBudget()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : model.getExpenseBookRemaining()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic: budget, remaining budget"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 29
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Interface ExpenseBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Class JsonExpenseBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "StorageManager o--\u003e ExpenseBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "JsonExpenseBookStorage .left.|\u003e ExpenseBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "JsonExpenseBookStorage .down.\u003e JsonSerializableExpenseBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "JsonSerializableExpenseBookStorage .right.\u003e JsonSerializableExpense"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "yuming7144": 6
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class ExpenseListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Class ExpenseCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 6,
      "-": 54
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    class State3 as \"__ab3:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":VersionedExpenseBook\" as VersionedExpenseBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "UndoCommand --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "UndoCommand -\u003e Model : undoExpenseBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Model -\u003e VersionedExpenseBook : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate VersionedExpenseBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "VersionedExpenseBook -\u003e VersionedExpenseBook :resetData(ReadOnlyExpenseBook)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "VersionedExpenseBook --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate VersionedAddressBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 13,
      "-": 40
    }
  },
  {
    "path": "docs/diagrams/ViewActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": ":User executes a view command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "if () then ([command word is a valid view command word])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    :Create an ViewCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    :ViewCommandParser parses the rest of the user input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    if () then ([the input index is valid])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        :Create a new ViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if () then ([index is within the range of the expense list])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            :ViewCommand executes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            :throw an exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            :update UI to update user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027        if () then ([the given index is valid])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027            :Create a new Description and add it to the expense at the given index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027            :Update UI with the current expense and corresponding expense list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027        else ([else])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027            :throw an exception;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027            :update UI to notify user;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027        endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        :throw an exception;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        :update UI to notify user;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    :throw an exception;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    :update UI to notify user;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "endif"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "stop"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 36
    }
  },
  {
    "path": "docs/diagrams/ViewCategoryCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": "(*)  --\u003e \"check user input command\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "If \"command word is valid\" then"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e [Yes] \"Create a ViewCategoryCommandParser\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e \"Create a ViewCategoryCommand\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e \"ViewCategoryCommand executes\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e \"Create a CommandResult to update user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "with all existing categories\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "else"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e \"throws an exception\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e \"update user\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 15
    }
  },
  {
    "path": "docs/diagrams/ViewCategorySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":ViewCategoryCommandParser\" as ViewCategoryCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \"v:ViewCategoryCommand\" as ViewCategoryCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "[-\u003e LogicManager : execute(\"viewCategory\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(\"viewCategory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "create ViewCategoryCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser -\u003e ViewCategoryCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommandParser --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCategoryCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser -\u003e ViewCategoryCommandParser : parse()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCategoryCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "create ViewCategoryCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommandParser -\u003e ViewCategoryCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCategoryCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommand --\u003e ViewCategoryCommandParser : v"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCategoryCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommandParser --\u003e ExpenseBookParser : v"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCategoryCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommandParser -[hidden]-\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "destroy ViewCategoryCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : v"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "LogicManager -\u003e ViewCategoryCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCategoryCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommand -\u003e Model : ViewCategoryCommand()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Model --\u003e ViewCategoryCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "CommandResult --\u003e ViewCategoryCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCategoryCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 69
    }
  },
  {
    "path": "docs/diagrams/ViewSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":ViewCommandParser\" as ViewCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \"v:ViewCommand\" as ViewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "[-\u003e LogicManager : execute(\"view 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(\"view 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "create ViewCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser -\u003e ViewCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommandParser --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser -\u003e ViewCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "create ViewCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommandParser -\u003e ViewCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommand --\u003e ViewCommandParser : v"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommandParser --\u003e ExpenseBookParser : v"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommandParser -[hidden]-\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "destroy ViewCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : v"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "LogicManager -\u003e ViewCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommand -\u003e Model : ViewExpense(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Model --\u003e ViewCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "CommandResult --\u003e ViewCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "ViewCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yyutong": 69
    }
  },
  {
    "path": "docs/diagrams/deleteExpenseSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "participant \":DeleteExpenseCommandParser\" as DeleteExpenseCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "participant \"d:DeleteExpenseCommand\" as DeleteExpenseCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "create DeleteExpenseCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "ExpenseBookParser -\u003e DeleteExpenseCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate DeleteExpenseCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommandParser --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate DeleteExpenseCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "ExpenseBookParser -\u003e DeleteExpenseCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate DeleteExpenseCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "create DeleteExpenseCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommandParser -\u003e DeleteExpenseCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate DeleteExpenseCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommand --\u003e DeleteExpenseCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate DeleteExpenseCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommandParser --\u003e ExpenseBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate DeleteExpenseCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommandParser -[hidden]-\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "destroy DeleteExpenseCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "LogicManager -\u003e DeleteExpenseCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate DeleteExpenseCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommand -\u003e Model : deleteExpense(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Model --\u003e DeleteExpenseCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "CommandResult --\u003e DeleteExpenseCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "DeleteExpenseCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate DeleteExpenseCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 69
    }
  },
  {
    "path": "docs/diagrams/deleteState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 20
    }
  },
  {
    "path": "docs/diagrams/deleteState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 22
    }
  },
  {
    "path": "docs/diagrams/deleteState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "title After command \"add a/100 c/Entertainment D/1 d/Movie\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 20
    }
  },
  {
    "path": "docs/diagrams/deleteState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "title After command \"delete\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State1 as \"__ab0:ExpenseBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State2 as \"__ab1:ExpenseBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    class State3 as \"__ab2:ExpenseBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 20
    }
  },
  {
    "path": "docs/diagrams/deleteState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Alice -\u003e Bob: Authentication Request"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Bob --\u003e Alice: Authentication Response"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Alice -\u003e Bob: Another authentication Request"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Alice \u003c-- Bob: another authentication Response"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 7
    }
  },
  {
    "path": "docs/team/BILLXYR.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "title: XIE YAOREN\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "## Project: Unisave"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Unisave is a desktop finance planner app, optimized for use via a Command Line Interface (CLI) while still having"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* **Code Contributed**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Implemented the delete function which allows users to delete an unwanted expense record"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Implemented the version 1.0 AddExpense function which allows users to add an expense"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Modified the AddExpense function to be more user-friendly by making date and description field optional"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Implemented the help function which generates a table of command summary for user to refer if needed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Implemented showStatistic function which provide an overview of user\u0027s expenses for them to refer to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Implemented Edit function which allows users to edit their previous expenses information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* **Enhancements implemented**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Functional Code:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * AddExpense Function:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * Previously, our addExpense function force the users to enter at least prefix for date and description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * I find this not user-friendly, I twist the code to make it optional for user to enter date and description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Edit Function:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * Previously, we do not have an edit function for user to make amendment to their expenses"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * As a result, users have to delete and re-enter the expenses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * I implemented the edit function to make it easier to adjust the information they entered"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * table for show statistic:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * The showstatistic includes various information,such as total expenses, percentage of expenses per category"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * There are also sort function that sort the expenses in decreasing order to show the users which categories take up the most"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * I summarized all these into a table for users to have a clear overview of their expenses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * table for help function:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * Previously the help function print out the summary which is too messy for users to refer to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * I restructure the help function to pop up a window that show the tabular summary of the commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * User Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * Previously, there is no navigation link for user to navigation through the guide which make it hard for them to refer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "           * I incorporated almost all the navigation link to make it easier for users to jump to the section they want to refer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Test Code:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Wrote additional tests for existing features to increase coverage "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * User Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Incorporated almost all the navigation link "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Created and maintained the command summary table"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Added documentation for the features `Add Expense`, `Delete`, `Edit`, `Help`, `showstatistic`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Added implementation details of the `delete` feature"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Added UML diagram for `Delete` feature"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Added use cases for `Add Expense` and `Delete` feature"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* **Contribution to team base tasks**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Necessary general code enhancements:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Renamed the inconsistent user command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Improved the help function by including a summary table that make it easier for user to refer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Improved the showStatistic function by including a structure table to summarize user\u0027s expenses"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Implemented the edit function to allow user to edit their expenses."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    * Updating user/developer docs that are not specific to a feature:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Modified the user guide and incorporate almost all the navigation link for users to refer to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Modified the user guide\u0027s bugs identified during the PE-dry run such as the typos and confusing features.    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "   * Others:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Modified all the checkstyle error in the initial project stage when we transform from addressBook to expenseBook"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Added the missing JavaDoc"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* **Review/mentoring contributions**:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "   * Help to review and approve the pull requests. Provide suggestion in the even of CI failure or checkstyle error."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "* **Contributions beyond the project team**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "   * Evidence of helping others:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Report the bugs i find during PE-dry run"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Response posted in the forum, such as helping people to debug when he encountered problems when generating the jar"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "   * Evidence of technical leadership:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "       * Sharing of `Some tips on generating the jar` in forum."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 77
    }
  },
  {
    "path": "docs/team/YaoYuming.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "title: Yao Yuming\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "## Project: Unisave"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Unisave is a desktop finance planner app, optimized for use via a Command Line Interface (CLI) while still having"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  * README:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    * Added mock Ui.png for the readme draft."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    * Updated the link for the badge"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    * Added use cases details of the `add description` feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    * Added use cases details of the `delete description` feature."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    * Added use cases details of the `view category` feature."
      }
    ],
    "authorContributionMap": {
      "yuming7144": 19
    }
  },
  {
    "path": "docs/team/yuanxing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "title: Yuanxing Zhang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "## Project: Unisave"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Unisave is a desktop finance planner app, optimized for use via a Command Line Interface (CLI) while still having"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "  * Developer Guide:"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 18
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "Create a new `Remark` in `seedu.address.model.expense`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yyutong"
        },
        "content": "Simply add the following to [`seedu.address.ui.ExpenseCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yyutong"
        },
        "content": "**`ExpenseCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "yyutong": 2,
      "-": 391,
      "yuming7144": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.expense.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "yuming7144": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ExpenseMainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.storage.ExpenseBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.storage.JsonExpenseBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseMainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpenseMainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing UniSave ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBookStorage expenseBookStorage \u003d new JsonExpenseBookStorage(userPrefs.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        storage \u003d new StorageManager(expenseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Returns a {@code ExpenseModelManager} with the data from {@code storage}\u0027s expense book"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * The data from the sample expense book will be used instead if {@code storage}\u0027s expense book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * or an empty expense book will be used instead if errors occur when reading {@code storage}\u0027s expense book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Optional\u003cReadOnlyExpenseBook\u003e expenseBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ReadOnlyExpenseBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            expenseBookOptional \u003d storage.readExpenseBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            if (!expenseBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExpenseBook\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initialData \u003d expenseBookOptional.orElseGet(SampleDataUtil::getSampleExpenseBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExpenseBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initialData \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initialData \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new ExpenseModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty UniSave\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        logger.info(\"Starting UniSave \" + ExpenseMainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping UniSave ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            //storage.saveExpenseBook(model.getExpenseBook());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            //logger.info(\"expense book data saved at \" + model.getExpenseBook().toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 9,
      "yyutong": 2,
      "yuming7144": 163,
      "BILLXYR": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Application.launch(ExpenseMainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "yuming7144": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Optional\u003cReadOnlyExpenseBook\u003e expenseBookOptional;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        ReadOnlyExpenseBook initialData;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 3,
      "-": 157,
      "yuming7144": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 1,
      "-": 10,
      "yuming7144": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic components"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Returns the ExpenseBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @see Model#getExpenseBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    ReadOnlyExpenseBook getExpenseBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Returns the user prefs\u0027 expense book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 4,
      "tanwayne890": 5,
      "-": 40,
      "yuming7144": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.parser.ExpenseBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "//import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final ExpenseBookParser expenseBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseBookParser \u003d new ExpenseBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Command command \u003d expenseBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            storage.saveExpenseBook(model.getExpenseBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return model.getExpenseBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return model.getExpenseBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 3,
      "-": 67,
      "yuming7144": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Add the description of an existing expenses in the expense book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class AddDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the description of the expense identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"by the index number used in the last expense listing. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Existing description will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"d/ [DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"d/ Movie time.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Description command not implemented yet\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Description: %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_ADD_DESCRIPTION_SUCCESS \u003d \"Added description to Expense: %1$s \\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_DELETE_DESCRIPTION_SUCCESS \u003d \"Removed description from Expense: %1$s \\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit the description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param description of the expense to be updated to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public AddDescriptionCommand(Index index, Description description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireAllNonNull(index, description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the add description command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in a description to be added in the expense."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws CommandException Throws exception if the index is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense editedExpense \u003d new Expense("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                expenseToEdit.getAmount(), expenseToEdit.getDate(), expenseToEdit.getCategory(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedExpense));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!(other instanceof AddDescriptionCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand e \u003d (AddDescriptionCommand) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 description.equals(e.description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Generates a command execution success message based on whether the description is added to or removed from"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * {@code expenseToEdit}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private String generateSuccessMessage(Expense expenseToEdit) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String message \u003d !description.value.isEmpty() ? MESSAGE_ADD_DESCRIPTION_SUCCESS"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                                                      : MESSAGE_DELETE_DESCRIPTION_SUCCESS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return String.format(message, expenseToEdit);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 2,
      "yyutong": 1,
      "yuming7144": 86,
      "BILLXYR": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Adds an expense to the expense book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to UniSave. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + PREFIX_AMOUNT + \"100 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + PREFIX_CATEGORY + \"FOODBEVERAGE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + PREFIX_DATE + \"2 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            + PREFIX_DESCRIPTION + \"yayymovie! \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: \\n%1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense list\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the add expense command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in an expense to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                || (other instanceof AddExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 2,
      "tanwayne890": 4,
      "yyutong": 1,
      "yuming7144": 38,
      "BILLXYR": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Clears the expense book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expense book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the clear command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in the expenses cleared."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        model.setExpenseBook(new ExpenseBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "yuming7144": 4,
      "BILLXYR": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final boolean showHelpCommandWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /** Statistic information should be shown to the user. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showStatistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showStatisticTable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Supported currencies should be shown to the user. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showCurrencies;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Reference exchange rates should be shown to the user. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showRates;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.showStatistics \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.showStatisticTable \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelpCommandWindow \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showCurrencies \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showRates \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showStatistics) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.showStatistics \u003d showStatistics;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.showStatisticTable \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelpCommandWindow \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showCurrencies \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showRates \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                         boolean showStatistics, boolean showStatisticTable) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.showStatistics \u003d showStatistics;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.showStatisticTable \u003d showStatisticTable;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.showHelpCommandWindow \u003d showHelp;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showCurrencies \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showRates \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                         boolean showStatistics, boolean showStatisticTable,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                         boolean showCurrencies, boolean showRates) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showStatistics \u003d showStatistics;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showStatisticTable \u003d showStatisticTable;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelpCommandWindow \u003d showHelp;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showCurrencies \u003d showCurrencies;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showRates \u003d showRates;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Return the feedback to the user"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * To check whether there is a need to show the help window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Return true if the user requests for the help window and false otherwise."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * To check whether there is a need to show the help window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Return true if the user requests for the help window and false otherwise."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean isShowHelpCommandWindow() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return showHelpCommandWindow;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * To check whether there is a need to show the statistic window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Return true if the user requests for the statistic window and false otherwise."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean isShowStatistics() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return showStatistics;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * To check whether there is a need to show the statistic table."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Return true if the user requests for the statistic table and false otherwise."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean isShowStatisticTable() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return showStatisticTable;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowCurrencies() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.showCurrencies;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowRates() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.showRates;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * To check whether user want to exit the application."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Return true if the user wants to exit the application and false otherwise."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 16,
      "-": 111,
      "BILLXYR": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Delete the description of an existing expenses in the expense book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class DeleteDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the description of the expense identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"by the index number used in the last expense listing. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Existing expense will have empty description.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"d/ [DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Description command not implemented yet\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Description: %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_ADD_DESCRIPTION_SUCCESS \u003d \"Added description to Expense: \\n%1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_DELETE_DESCRIPTION_SUCCESS \u003d \"Removed description from Expense: \\n%1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final Description EMPTY_DESCRIPTION \u003d new Description(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit the description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public DeleteDescriptionCommand(Index index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the delete description command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in the description of the expenses deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws CommandException Throws exception if the index is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assert !expenseToEdit.getDescription().isEmpty() : \"Description is already deleted.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense editedExpense \u003d new Expense(expenseToEdit.getAmount(), expenseToEdit.getDate(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                expenseToEdit.getCategory(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedExpense));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!(other instanceof DeleteDescriptionCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        DeleteDescriptionCommand e \u003d (DeleteDescriptionCommand) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Generates a command execution success message based on whether the description is added to or removed from"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * {@code expenseToEdit}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private String generateSuccessMessage(Expense expenseToEdit) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String message \u003d MESSAGE_DELETE_DESCRIPTION_SUCCESS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return String.format(message, expenseToEdit);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 2,
      "tanwayne890": 1,
      "yyutong": 7,
      "yuming7144": 82,
      "BILLXYR": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Deletes an expense identified using it\u0027s displayed index from the expense book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted expense: \\n%1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates an DeleteExpenseCommand to delete an expense."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param targetIndex of the expense to be deleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public DeleteExpenseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the delete expense command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in an expense deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws CommandException Throws exception if the index is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                || (other instanceof DeleteExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteExpenseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "tanwayne890": 1,
      "yyutong": 1,
      "BILLXYR": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \": Edits the expense identified by the index number.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense book.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SUCCESSFUL_MESSAGE \u003d \"Expense edited successfully.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new CommandResult(String.format(SUCCESSFUL_MESSAGE, editedExpense));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return editExpenseDescriptor.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Category updatedCategory \u003d editExpenseDescriptor.getCategory().orElse(expenseToEdit.getCategory());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new Expense(updatedAmount, updatedDate, updatedCategory, updatedDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount, category, date, description);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return \"The amount is: \" + this.amount + \"\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    + \"The Date is: \" + this.date + \"\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    + \"The Category is: \" + this.category + \"\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    + \"The Description is: \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "BILLXYR": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExchangeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.CurrencyConverter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.ExchangeRate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Exchange the currency for the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class ExchangeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exchange\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SUCCESSFUL_MESSAGE \u003d \"Your expenses is now converted from %s to %s \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"at exchange rate %s. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"To see a full list of exchange rates adapted by UniSave, use command \u0027rates\u0027.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"The correct format is: exchange cc/CNY\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_CURRENCY \u003d \"Please enter a valid currency code!\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"To see a full list of supported currencies with their currency codes, \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"type in command \u0027code\u0027.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private final Currency toCurrency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param toCurrency of the new currency."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ExchangeCommand(Currency toCurrency) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        requireAllNonNull(toCurrency);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.toCurrency \u003d toCurrency;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the exchange command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the expenses being converted to the currency stated by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Currency curr \u003d model.getExpenseBookCurrency();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        CurrencyConverter converter \u003d new CurrencyConverter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        ExchangeRate exchangeRate \u003d converter.convert(curr, toCurrency);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        model.setExpenseBookCurrency(toCurrency);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        model.expenseBookExchange(exchangeRate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(SUCCESSFUL_MESSAGE, curr, toCurrency, exchangeRate));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ExchangeCommand)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ExchangeCommand e \u003d (ExchangeCommand) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return toCurrency.equals(e.toCurrency);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 36,
      "-": 29,
      "BILLXYR": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting UniSave as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in exiting the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 1,
      "-": 18,
      "BILLXYR": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Format full help instructions for all the command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SUCCESSFUL_MESSAGE \u003d \"Please refer to the command summary\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \" or the User Guide if you need any help!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the help command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in the help message to be shown to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new CommandResult(SUCCESSFUL_MESSAGE, true, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 18,
      "BILLXYR": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListExpenseByCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Finds and lists all expenses in expense book whose category contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByCategoryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter all expenses whose category contains any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" entertainment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses by Category\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private final CategoryContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates an ListExpenseByCategoryCommand to list the expenses by the categories."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param predicate to list the expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ListExpenseByCategoryCommand(CategoryContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the list expense by category command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the expenses are listed by the category."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                || (other instanceof ListExpenseByCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListExpenseByCategoryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "tanwayne890": 40,
      "-": 1,
      "BILLXYR": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListExpenseByDateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Finds and lists all expenses in expense book whose date matches the keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-t\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter all expenses with date matches \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"Parameters: YYYY-MM-DD \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"2020-10-15\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses by Date\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private final DateContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates an ListExpenseByDateCommand to list the expenses by the date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param predicate to list the expenses."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ListExpenseByDateCommand(DateContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the list expense by date command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the expenses being listed by the date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                || (other instanceof ListExpenseByDateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListExpenseByDateCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 40,
      "-": 2,
      "BILLXYR": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListExpenseByDescCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DescContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Finds and lists all expenses in expense book whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDescCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter all expenses whose description contains any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" movies\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses by Description.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private final DescContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates an ListExpenseByCategoryCommand to list the expenses by the descriptions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param predicate to list the expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ListExpenseByDescCommand(DescContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the list expense by description command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the expenses being listed by the description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                || (other instanceof ListExpenseByDescCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListExpenseByDescCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 41,
      "-": 2,
      "BILLXYR": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Lists all expenses in the expense book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the list expense command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which all the expenses being listed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 23,
      "BILLXYR": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Set the budget in the expense book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class SetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set-b\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static final String MESSAGE_SET_BUDGET_SUCCESS \u003d \"Successful! The budget is now %s %s.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SET_BUDGET_FAIL \u003d \"Set Budget failed, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"please enter a valid budget with value greater than 0.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates an SetBudgetCommand to set the Budget {@code budget}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public SetBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        requireAllNonNull(budget);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Executes the set budget command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the budget for the expense book being set."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        model.setExpenseBookBudget(budget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        String msg \u003d String.format(MESSAGE_SET_BUDGET_SUCCESS, budget, model.getExpenseBookCurrency());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new CommandResult(msg);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SetBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 budget.equals(((SetBudgetCommand) other).budget));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 23,
      "tanwayne890": 1,
      "-": 15,
      "BILLXYR": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Show the current available budget."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class ShowBudgetCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showbudget\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static final String MESSAGE_BUDGET \u003d \"Current budget is: %s %s\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static final String MESSAGE_REMAINING \u003d \"Remaining budget is: %s %s\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static final String MESSAGE_SETNEW \u003d \"Your remaining budget is %s %s, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            + \"seems like you\u0027re broke.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Please set a new budget with command: setbudget AMOUNT\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the show budget command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the budget of the expense book shown."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Budget budget \u003d model.getExpenseBookBudget();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Budget remaining \u003d model.getExpenseBookRemaining();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Currency currency \u003d model.getExpenseBookCurrency();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        String budgetMsg \u003d String.format(MESSAGE_BUDGET, budget, currency);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        if (model.getExpenseBookRemaining().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            String setNew \u003d String.format(MESSAGE_SETNEW, remaining, currency);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new CommandResult(budgetMsg + setNew);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            String remainingMsg \u003d String.format(MESSAGE_REMAINING, model.getExpenseBookRemaining(), currency);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new CommandResult(budgetMsg + remainingMsg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 28,
      "yyutong": 2,
      "BILLXYR": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowStatisticCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Show the statistic and brief summary of the user\u0027s expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class ShowStatisticCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show-stats\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \": Show number of expenses by categories in ascending order. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_SHOW_STATISTIC_LABELS_SUCCESS \u003d \"Here is your expenses summary! \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Create a fixed length of String."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Here we use this command mainly to create a fixed length of empty space to simulate a table."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param string the string to be created."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param length the length of the String created."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static String fixedLengthString(String string, int length) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return String.format(\"%1$\" + length + \"s\", string);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sort the statistics by the total number of expenses in a certain category."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param hashmap The data structure that store the statistic."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static HashMap\u003cString, Integer\u003e sortByNumberOfExpense(HashMap\u003cString, Integer\u003e hashmap) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // Create a list from elements of HashMap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cMap.Entry\u003cString, Integer\u003e \u003e listForMap \u003d new LinkedList\u003cMap.Entry\u003cString, Integer\u003e \u003e(hashmap.entrySet());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // Sort the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Collections.sort(listForMap, new Comparator\u003cMap.Entry\u003cString, Integer\u003e \u003e() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            public int compare(Map.Entry\u003cString, Integer\u003e firstValue,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                               Map.Entry\u003cString, Integer\u003e secondValue) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                return (firstValue.getValue()).compareTo(secondValue.getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // put data from sorted list to hashmap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Integer\u003e tempMap \u003d new LinkedHashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (Map.Entry\u003cString, Integer\u003e hm : listForMap) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            tempMap.put(hm.getKey(), hm.getValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return tempMap;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sort the statistics by the total expenses in a certain category."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param hashmap The data structure that store the statistic."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static HashMap\u003cString, Double\u003e sortByTotalExpense(HashMap\u003cString, Double\u003e hashmap) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // Create a list from elements of HashMap"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cMap.Entry\u003cString, Double\u003e \u003e listForMap \u003d new LinkedList\u003cMap.Entry\u003cString, Double\u003e \u003e(hashmap.entrySet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // Sort the list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Collections.sort(listForMap, new Comparator\u003cMap.Entry\u003cString, Double\u003e \u003e() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            public int compare(Map.Entry\u003cString, Double\u003e firstValue,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                               Map.Entry\u003cString, Double\u003e secondValue) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                return (secondValue.getValue()).compareTo(firstValue.getValue());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // put data from sorted list to hashmap"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Double\u003e tempMap \u003d new LinkedHashMap\u003cString, Double\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (Map.Entry\u003cString, Double\u003e hm : listForMap) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            tempMap.put(hm.getKey(), hm.getValue());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return tempMap;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the show statistic command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the statistic and brief summary of the expenses shown."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_STATISTIC_LABELS_SUCCESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                false, false, true, true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 4,
      "-": 1,
      "BILLXYR": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortByAmountCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Sort the expenses by their amount."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class SortByAmountCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort-a\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort all existing expenses by descending  \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"or ascending amount.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ascending\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DESCENDING \u003d \"Expenses sorted by descending amount!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ASCENDING \u003d \"Expenses sorted by ascending amount!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private String order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs SortByAmount object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param order The sorting order of this command object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public SortByAmountCommand(String order) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assert order.equals(\" descending\") || order.equals(\" ascending\") : \"Please enter a valid order\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                + \"(descending or ascending)!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the order of this command object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return The order of the command object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public String getOrder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Executes the sort by amount command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return A command result in which the message will be shown to users."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @throws CommandException Throws exception if the order is not \"descending\" or \"ascending\"."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (this.order.equals(\" ascending\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            model.sortByAscendingAmount();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    String.format(MESSAGE_SUCCESS_ASCENDING));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        } else if (this.order.equals(\" descending\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            model.sortByDescendingAmount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    String.format(MESSAGE_SUCCESS_DESCENDING));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            throw new CommandException(\"The sorting order can only be descending or ascending.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    + \"Please specify again!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                || (other instanceof SortByAmountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 order.equals(((SortByAmountCommand) other).order)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 1,
      "yyutong": 72,
      "BILLXYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortByTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Sort the expenses by their the of spending."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class SortByTimeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort-t\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort all existing expenses by descending  \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"or ascending time.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ascending\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DESCENDING \u003d \"Expenses sorted by descending time!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ASCENDING \u003d \"Expenses sorted by ascending time!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs SortByTime object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param order The sorting order of this command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private String order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs a SortByTimeCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param order The order os sorting, which is a string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public SortByTimeCommand(String order) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assert order.equals(\" descending\") || order.equals(\" ascending\") : \"Please enter a valid order\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                + \"(descending or ascending)!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the order of this command object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return The order of the command object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public String getOrder() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Executes the sort by amount command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return A command result in which the message will be shown to users."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @throws CommandException Throws exception if the order is not \"descending\" or \"ascending\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (this.order.equals(\" ascending\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            model.sortByAscendingTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    String.format(MESSAGE_SUCCESS_ASCENDING));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        } else if (this.order.equals(\" descending\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            model.sortByDescendingTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    String.format(MESSAGE_SUCCESS_DESCENDING));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            throw new CommandException(\"The sorting order can only be descending or ascending.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    + \"Please specify again!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                || (other instanceof SortByTimeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 order.equals(((SortByTimeCommand) other).order)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 1,
      "yyutong": 78,
      "BILLXYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * View all the categories the users created in the expense book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class ViewCategoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \": Finds all the category labels used in the ExpenseBook so far. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_VIEW_CATEGORY_LABELS_SUCCESS \u003d \"View all the existing category labels: \\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the view category command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which all the categories are shown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        List\u003cCategory\u003e categories \u003d model.getCategoryLabels();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        for (int i \u003d 0; i \u003c categories.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            message \u003d message + categories.get(i).categoryName + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new CommandResult(MESSAGE_VIEW_CATEGORY_LABELS_SUCCESS + message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "yyutong": 20,
      "-": 1,
      "BILLXYR": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * View the expenses in the expense book by the specific index number."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \": Views the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE_VIEW_EXPENSE_SUCCESS \u003d \"View Expense: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates an ViewCommand to view the expenses."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param targetIndex of the expense to be viewed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Executes the view command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return A command result in which the specific expense requested by the user is shown."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws CommandException Throws exception if the index is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assert targetIndex.getZeroBased() \u003e\u003d 0 : \"index should be a positive number\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense expenseToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        String prefix \u003d String.format(MESSAGE_VIEW_EXPENSE_SUCCESS, targetIndex.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        String message \u003d prefix + \"\\n\" + expenseToView.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Checks if a command objects are equal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param other Another object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return Whether the 2 command objects are equal or not. Return true if they are equal and false otherwise."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "yyutong": 49,
      "BILLXYR": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents an error which occurs during execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "BILLXYR": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDescriptionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.AddDescriptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Parses input arguments and creates a new {@code AddDescriptionCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class AddDescriptionCommandParser implements Parser\u003cAddDescriptionCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddDescriptionCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * and returns a {@code AddDescriptionCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public AddDescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDescriptionCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new AddDescriptionCommand(index, new Description(description));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "yuming7144": 36,
      "BILLXYR": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_CATEGORY, PREFIX_DATE, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Currency currency \u003d ExpenseBook.currency();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElse(\"0\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Description description \u003d ParserUtil.parseExpenseDescription("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Expense expense \u003d new Expense(amount, currency, date, category, description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 9,
      "tanwayne890": 3,
      "-": 1,
      "BILLXYR": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @return a List of Command Instruction for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ClearCommand parse(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 15,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SIGN \u003d new Prefix(\"cc/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "yuming7144": 1,
      "BILLXYR": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteDescriptionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.DeleteDescriptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Parses input arguments and creates a new {@code DeleteDescriptionCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class DeleteDescriptionCommandParser implements Parser\u003cDeleteDescriptionCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteDescriptionCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a {@code DeleteDescriptionCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public DeleteDescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, DeleteDescriptionCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new DeleteDescriptionCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 4,
      "yuming7144": 30,
      "BILLXYR": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Parses input arguments and creates a new DeleteExpenseCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class DeleteExpenseCommandParser implements Parser\u003cDeleteExpenseCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteExpenseCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a DeleteExpenseCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public DeleteExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new DeleteExpenseCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 3,
      "yyutong": 1,
      "-": 21,
      "BILLXYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * and returns a {@code EditCommand} object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_CATEGORY, PREFIX_DATE, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Amount amount \u003d ParserUtil.parseEditAmount(argMultimap.getValue(PREFIX_AMOUNT).orElse(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElse(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Category category \u003d ParserUtil.parseEditCategory(argMultimap.getValue(PREFIX_CATEGORY).orElse(\"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Description description \u003d ParserUtil.parseExpenseDescription("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            editExpenseDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            editExpenseDescriptor.setDescription(ParserUtil.parseExpenseDescription"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    (argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new EditCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        //return new EditCommand(index, amount, category, date, description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "BILLXYR": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExchangeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SIGN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.commands.ExchangeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.CurrencyConverter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new ExchangeCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class ExchangeCommandParser implements Parser\u003cExchangeCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ExchangeCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_SIGN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        CurrencyConverter converter \u003d new CurrencyConverter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SIGN)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExchangeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Currency currencyCode \u003d ParserUtil.parseCurrency(argMultimap.getValue(PREFIX_SIGN).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        if (!converter.isValidCurrency(currencyCode)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ExchangeCommand.MESSAGE_INVALID_CURRENCY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new ExchangeCommand(currencyCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 42,
      "-": 1,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new ExitCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExitCommandParser implements Parser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @return a List of Command Instruction for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExitCommand parse(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 15,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExpenseBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.AddDescriptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CurrenciesCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.DeleteDescriptionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.commands.ExchangeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByCategoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByDateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByDescCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.ListExpenseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RatesCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.ShowBudgetCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.ShowStatisticCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.SortByAmountCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.SortByTimeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.ViewCategoryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses user input arguments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseBookParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        case DeleteExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new DeleteExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case ListExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return new ListExpenseCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        case ViewCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new ViewCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        case AddDescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return new AddDescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        case DeleteDescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return new DeleteDescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case ListExpenseByCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return new ListExpenseByCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case ListExpenseByDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return new ListExpenseByDateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case ListExpenseByDescCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return new ListExpenseByDescCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        case ShowBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new ShowBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        case ShowStatisticCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new ShowStatisticCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        case SetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new SetBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        case SortByAmountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new SortByAmountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        case SortByTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new SortByTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        case ExchangeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new ExchangeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return new ExitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case RatesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RatesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case CurrenciesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CurrenciesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 6,
      "tanwayne890": 10,
      "yyutong": 27,
      "-": 6,
      "yuming7144": 44,
      "BILLXYR": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return a List of Command Instruction for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public HelpCommand parse(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 5,
      "BILLXYR": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListExpenseByCategoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Parses input arguments and creates a new ListExpenseByCategoryCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByCategoryCommandParser implements Parser\u003cListExpenseByCategoryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListExpenseByCategoryCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a ListExpenseByCategoryCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ListExpenseByCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListExpenseByCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] categoryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new ListExpenseByCategoryCommand(new CategoryContainsKeywordsPredicate(Arrays.asList(categoryKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "tanwayne890": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListExpenseByDateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByDateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Parses input arguments and creates a new ListExpenseByDateCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDateCommandParser implements Parser\u003cListExpenseByDateCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListExpenseByDateCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a ListExpenseByDateCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ListExpenseByDateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListExpenseByDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] dateKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        checkValidDate(dateKeywords);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new ListExpenseByDateCommand(new DateContainsKeywordsPredicate(Arrays.asList(dateKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    // for each input date, check dashes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Loop through all the inputDate in {@code inputDates} and check the date is valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * The validity of date is based on format YYYY-MM-DD. This method is checking for 2 dashes appear in the date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param inputDates"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private void checkValidDate(String[] inputDates) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // create a new array for dates to not modifying original array"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] copyDates \u003d new String[inputDates.length];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; i \u003c inputDates.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            copyDates[i] \u003d inputDates[i];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (String date: copyDates) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String[] splitDateByDash \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            if (splitDateByDash.length !\u003d 3) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListExpenseByCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListExpenseByDescCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByDescCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DescContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Parses input arguments and creates a new ListExpenseByDescCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDescCommandParser implements Parser\u003cListExpenseByDescCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListExpenseByDescCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a ListExpenseByDescCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ListExpenseByDescCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListExpenseByDescCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] categoryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new ListExpenseByDescCommand(new DescContainsKeywordsPredicate(Arrays.asList(categoryKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            double entered \u003d Double.parseDouble(amount.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Amount.isValidAmount(entered)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Amount(entered);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static Amount parseEditAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (amount.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new Amount();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                double entered \u003d Double.parseDouble(amount.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                if (!Amount.isValidAmount(entered)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                return new Amount(entered);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            } catch (Exception pe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static Category parseEditCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (category.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new Category();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            requireNonNull(category);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (trimmedDate.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new Date();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static Description parseExpenseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses a {@code String currency} into a {@code Currency}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the given {@code currency} is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static Currency parseCurrency(String currency) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Currency(currency.trim().toUpperCase());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses a {@code String budget} into a {@code Budget}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the given {@code budget} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static Budget parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            double value \u003d Double.parseDouble(budget.trim());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            if (value \u003c\u003d 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                        SetBudgetCommand.MESSAGE_SET_BUDGET_FAIL);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new Budget(value);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    SetBudgetCommand.MESSAGE_SET_BUDGET_FAIL, pe);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 26,
      "tanwayne890": 12,
      "-": 78,
      "BILLXYR": 54,
      "yuming7144": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * E.g. \u0027a/\u0027 in \u0027add a/100 \u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetBudgetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new SetBudgetCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class SetBudgetCommandParser implements Parser\u003cSetBudgetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of userInput in the context of the SetBudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a SetBudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public SetBudgetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        Budget budget \u003d ParserUtil.parseBudget(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new SetBudgetCommand(budget);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 16,
      "tanwayne890": 7,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowBudgetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.commands.ShowBudgetCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new ShowBudget object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class ShowBudgetCommandParser implements Parser\u003cShowBudgetCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of userInput in the context of the ShowBudgetCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a ShowBudgetCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ShowBudgetCommand parse(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new ShowBudgetCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 11,
      "tanwayne890": 7,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowStatisticCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.ShowStatisticCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new ShowStatisticCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class ShowStatisticCommandParser implements Parser\u003cShowStatisticCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowStatisticCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a ShowStatisticCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public ShowStatisticCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return new ShowStatisticCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 7,
      "BILLXYR": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortByAmountCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.SortByAmountCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new SortByAmountCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class SortByAmountCommandParser implements Parser\u003cSortByAmountCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortByAmountCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * and returns a SortByAmountCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public SortByAmountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortByAmountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assert !trimmedArgs.isEmpty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new SortByAmountCommand(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 27,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortByTimeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.SortByTimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new SortByTimeCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class SortByTimeCommandParser implements Parser\u003cSortByTimeCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortByTimeCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * and returns a SortByTimeCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public SortByTimeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortByTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assert !trimmedArgs.isEmpty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new SortByTimeCommand(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 26,
      "BILLXYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCategoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.ViewCategoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new ViewCategoryCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class ViewCategoryCommandParser implements Parser\u003cViewCategoryCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCategoryCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * and returns a ViewCategoryCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ViewCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new ViewCategoryCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 7,
      "yyutong": 11,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class ViewCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 27,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExpenseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.ExchangeRate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.ExpenseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.StatisticSummary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Wraps all data at the UniSave level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseBook implements ReadOnlyExpenseBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private static Currency currency \u003d new Currency();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private final ExpenseList expenses;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Budget budget \u003d new Budget();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * The new ExpenseBook with budget 0 and default Currency SGD."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ExpenseBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        //this.budget \u003d new Budget();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        //this.currency \u003d new Currency();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Creates an ExpenseBook using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseBook(ReadOnlyExpenseBook toBeCopied) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public static Currency currency() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return ExpenseBook.currency;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Set the currency of this {@code ExpenseBook}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param dollarSign of the currency, recommend in the format of three capital letters (e.g. CNY)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void setCurrency(Currency dollarSign) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.currency \u003d dollarSign;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Currency getCurrency() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return this.currency;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Exchange the {@code expenses} to the input currency."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param exchangeRate from the current currency."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void exchange(ExchangeRate exchangeRate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.budget \u003d this.budget.exchange(exchangeRate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.expenses.exchange(this.currency, exchangeRate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Resets the existing data of this {@code ExpenseBook} with {@code newData}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void resetData(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        setBudget(newData.getBudget());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        setCurrency(newData.getCurrency());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the expense book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Adds a expense to the expense book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * The expense must not already exist in the expense book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * {@code target} must exist in the expense book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Removes {@code key} from this {@code ExpenseBook}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * {@code key} must exist in the expense book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Set the budget of this {@code ExpenseBook} to the input amount."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param budget Total budget."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return this.budget;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public double totalSpending() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return expenses.totalSpending();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget getRemainingBudget() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return this.budget.remaining(expenses.totalSpending());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public List\u003cCategory\u003e getCategoryLabels() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return expenses.getCategoryLabels();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int getExpenseSumByCategory(String categoryName) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenses.getExpenseSumByCategory(categoryName);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int getTotalExpense() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenses.getTotalExpense();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public double getExpenseSum() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenses.getExpenseSum();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HashMap\u003cString, Double\u003e getExpenseSumCategory() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenses.getExpenseSumCategory();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HashMap\u003cString, Double\u003e getExpensePercentageCategory() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenses.getExpensePercentageCategory();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public double getExpenseSumOfCategory(String categoryName) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenses.getExpenseSumOfCategory(categoryName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void sortByDescendingAmount() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenses.sortByDescendingAmount();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void sortByAscendingAmount() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenses.sortByAscendingAmount();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void sortByDescendingTime() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenses.sortByDescendingTime();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void sortByAscendingTime() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenses.sortByAscendingTime();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                || (other instanceof ExpenseBook // instanceof handles nulls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 expenses.equals(((ExpenseBook) other).expenses));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return expenses.getStatistics();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public List\u003cStatisticSummary\u003e getStatisticTable() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenses.getStatisticTable();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expenses.updateStatistics();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void updateStatisticSummary() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expenses.updateStatisticSummary();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 84,
      "yyutong": 11,
      "-": 5,
      "yuming7144": 104,
      "BILLXYR": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExpenseModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.ExchangeRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpenseModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final ExpenseBook expenseBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Initializes a ModelManager with the given expenseBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseModelManager(ReadOnlyExpenseBook expenseBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireAllNonNull(expenseBook, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        logger.fine(\"Initializing with expense book: \" + expenseBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.expenseBook \u003d new ExpenseBook(expenseBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.expenseBook.getExpenseList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this(new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return userPrefs.getExpenseBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(expenseBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        userPrefs.setExpenseBookFilePath(expenseBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpenseBook(ReadOnlyExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.expenseBook.resetData(expenseBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns an unmodifiable view of expense list with sample removed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ReadOnlyExpenseBook getExpenseBookWithoutSample() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return SampleDataUtil.getExpenseBookWithoutSample(expenseBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenseBook.hasExpense(expense);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void deleteExpense(Expense targetExpense) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expenseBook.removeExpense(targetExpense);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseBook.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns an updated Expense List"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param predicate predicate"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    // end of edit"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!(obj instanceof ExpenseModelManager)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseModelManager other \u003d (ExpenseModelManager) obj;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseBook.equals(other.expenseBook)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget getExpenseBookBudget() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return expenseBook.getBudget();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getExpenseBookSpending() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return expenseBook.totalSpending();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget getExpenseBookRemaining() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return expenseBook.getRemainingBudget();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void setExpenseBookBudget(Budget budget) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenseBook.setBudget(budget);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void setExpenseBookCurrency(Currency dollarSign) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenseBook.setCurrency(dollarSign);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void expenseBookExchange(ExchangeRate exchangeRate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        expenseBook.exchange(exchangeRate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Currency getExpenseBookCurrency() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return expenseBook.getCurrency();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public List\u003cCategory\u003e getCategoryLabels() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return expenseBook.getCategoryLabels();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int getExpenseSumByCategory(String categoryName) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenseBook.getExpenseSumByCategory(categoryName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int getTotalExpense() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenseBook.getTotalExpense();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public double getExpenseSum() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenseBook.getExpenseSum();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HashMap\u003cString, Double\u003e getExpenseSumCategory() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenseBook.getExpenseSumCategory();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HashMap\u003cString, Double\u003e getExpensePercentageCategory() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenseBook.getExpensePercentageCategory();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public double getExpenseSumOfCategory(String categoryName) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return expenseBook.getExpenseSumOfCategory(categoryName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByDescendingAmount() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expenseBook.sortByDescendingAmount();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByAscendingAmount() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expenseBook.sortByAscendingAmount();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByDescendingTime() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expenseBook.sortByDescendingTime();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByAscendingTime() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expenseBook.sortByAscendingTime();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 46,
      "yyutong": 32,
      "-": 5,
      "yuming7144": 147,
      "BILLXYR": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.ExchangeRate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void setExpenseBook(ReadOnlyExpenseBook expenseBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    ReadOnlyExpenseBook getExpenseBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /** Returns the with sample removed */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    ReadOnlyExpenseBook getExpenseBookWithoutSample();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    void setExpenseBookFilePath(Path expenseBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns true if the expense exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Deletes the given Expense."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * The Expense must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void deleteExpense(Expense targetExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * {@code target} must exist in the finance manager."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * The person identity of {@code editedExpense} must not be the same as another existing expense in the finance"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * manager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Expense list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Budget getExpenseBookBudget();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Budget getExpenseBookRemaining();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    double getExpenseBookSpending();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    void expenseBookExchange(ExchangeRate exchangeRate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    void setExpenseBookBudget(Budget budget);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    Currency getExpenseBookCurrency();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    void setExpenseBookCurrency(Currency dollarSign);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total spending of all the categories."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return a hashmap that contains the total spending of all all categories."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    List\u003cCategory\u003e getCategoryLabels();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total spending of the specific category."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param categoryName the total spending of the specific category."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return the total spending of that specific category."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    int getExpenseSumByCategory(String categoryName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total number of expenses in the expense book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    int getTotalExpense();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sorts the expense list by descending amount."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    void sortByDescendingAmount();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sorts the expense list by ascending amount."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    void sortByAscendingAmount();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sorts the expense list by descending timr."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    void sortByDescendingTime();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sorts the expense list by ascending time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    void sortByAscendingTime();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total spending of the expenses in the expense book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    double getExpenseSum();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total spending of all the categories."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return a hashmap that contains the total spending of all all categories."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    HashMap\u003cString, Double\u003e getExpenseSumCategory();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the percentage of different categories\u0027 spending."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return a hashmap that contains the percentage of different categories\u0027 spending."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    HashMap\u003cString, Double\u003e getExpensePercentageCategory();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total number of expenses of the specific category."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param categoryName the total number of expenses of the specific category."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return the total number of expenses of that specific category."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    double getExpenseSumOfCategory(String categoryName);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 14,
      "yyutong": 17,
      "-": 66,
      "BILLXYR": 49,
      "yuming7144": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExpenseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.StatisticSummary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Unmodifiable view of an expense book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public interface ReadOnlyExpenseBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns an unmodifiable view of the expense list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the currency of this {@code ExpenseBook}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Currency getCurrency();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Sets the budget of this {@code ExpenseBook} to the input amount."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void setBudget(Budget budget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the budget of this {@code ExpenseBook}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the total spending of this {@code ExpenseBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    double totalSpending();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the remaining budget of this {@code ExpenseBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    Budget getRemainingBudget();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets statistics of the expense book"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Updates statistic of the expense book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    void updateStatistics();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Updates statistic summary of the expense book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    void updateStatisticSummary();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    List\u003cStatisticSummary\u003e getStatisticTable();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 17,
      "-": 5,
      "yuming7144": 27,
      "BILLXYR": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "yuming7144": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Path expenseBookFilePath \u003d Paths.get(\"data\" , \"expensebook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        setExpenseBookFilePath(newUserPrefs.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(expenseBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.expenseBookFilePath \u003d expenseBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 expenseBookFilePath.equals(o.expenseBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return Objects.hash(guiSettings, expenseBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + expenseBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "yuming7144": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents a Expense\u0027s amount in the expense book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Guarantees: the amount is non-negative; is valid as declared in {@link #isValidAmount(Double)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Amount should only positive numbers.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public final Double value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public final boolean noValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Constructs an amount object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param value Value should be double."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Amount(Double value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        checkArgument(isValidAmount(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.noValue \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Constructs an amount object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public Amount() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.noValue \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.value \u003d -1.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns true if a given amount is a valid amount."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static boolean isValidAmount(Double value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return String.format(\"%.2f\", this.value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                \u0026\u0026 value.equals(((Amount) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.noValue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 33,
      "-": 2,
      "yuming7144": 14,
      "BILLXYR": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents a Expense\u0027s budget in the expense book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Guarantees: the budget is non-negative; is valid as declared in {@link #isValidBudget(Amount)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private final double budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.budget \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget(double budget) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param spending of an amount."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @return the remaining budget."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget remaining(double spending) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        double remaining \u003d this.getValue() - spending;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new Budget(remaining);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Exchange the current Budget with a exchangeRate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param exchangeRate of toCurrency."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @return new Amount at the given exchangeRate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Budget exchange(ExchangeRate exchangeRate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        double value \u003d this.budget * exchangeRate.getRate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new Budget(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return budget \u003c\u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return String.format(\"%.2f\", budget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Returns true if a given amount is a valid amount."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static boolean isValidBudget(Amount budget) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return budget.value \u003e\u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 46,
      "BILLXYR": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Represents an expense\u0027s Category in the expense list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            \"Category names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * The first character of the category name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param category A valid category name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assert category !\u003d null : \"Need to include the category of the expenses\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        categoryName \u003d category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public Category() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        categoryName \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return categoryName.equals(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "tanwayne890": 59,
      "BILLXYR": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/CategoryContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Category} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class CategoryContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public CategoryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getCategory().categoryName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                || (other instanceof CategoryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u0026\u0026 keywords.equals(((CategoryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 5,
      "tanwayne890": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/CommandList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class CommandList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String ADD_EXPENSE \u003d \"ADD EXPENSE COMMAND\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String ADD_EXPENSE_USAGE \u003d \"ADD expense\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String ADD_EXPENSE_FORMAT \u003d \"add a/AMOUNT c/CATEGORY t/DATE [d/DESCRIPTION]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String ADD_EXPENSE_EXAMPLE \u003d \"add a/50 c/ENTERTAINMENT t/1 d/movie\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String LIST_EXPENSE \u003d \"LIST EXPENSE COMMAND\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String LIST_EXPENSE_USAGE \u003d \"LIST all expenses\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String LIST_EXPENSE_FORMAT \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String LIST_EXPENSE_EXAMPLE \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String LIST_BY_CATEGORY \u003d \"LIST BY CATEGORY\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String LIST_BY_CATEGORY_USAGE \u003d \"LIST expenses of a category\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String LIST_BY_CATEGORY_FORMAT \u003d \"filter-c CATEGORY\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String LIST_BY_CATEGORY_EXAMPLE \u003d \"filter-c entertainment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DELETE \u003d \"DELETE\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DELETE_USAGE \u003d \"delete a specified expense\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DELETE_FORMAT \u003d \"delete INDEX\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DELETE_EXAMPLE \u003d \"delete 2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String VIEW \u003d \"VIEW\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String VIEW_USAGE \u003d \"view a specified expense\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String VIEW_FORMAT \u003d \"view INDEX\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String VIEW_EXAMPLE \u003d \"view 2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VIEW_CATEGORY \u003d \"VIEW CATEGORIES\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String VIEW_CATEGORY_USAGE \u003d \"view all the categories\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VIEW_CATEGORY_FORMAT \u003d \"view-c\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VIEW_CATEGORY_EXAMPLE \u003d \"view-c\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String ADD_DESCRIPTION \u003d \"ADD DESCRIPTION\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String ADD_DESCRIPTION_USAGE \u003d \"add a description to an expense\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String ADD_DESCRIPTION_FORMAT \u003d \"add-d INDEX D/DESCRIPTION\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String ADD_DESCRIPTION_EXAMPLE \u003d \"add-d 3 d/movies\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String DELETE_DESCRIPTION \u003d \"DELETE DESCRIPTION\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DELETE_DESCRIPTION_USAGE \u003d \"delete a description of an expense\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String DELETE_DESCRIPTION_FORMAT \u003d \"delete-d INDEX\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String DELETE_DESCRIPTION_EXAMPLE \u003d \"delete-d 6\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String SET_BUDGET \u003d \"SET BUDGET\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String SET_BUDGET_USAGE \u003d \"set the budget\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SET_BUDGET_FORMAT \u003d \"setbudget AMOUNT\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SET_BUDGET_EXAMPLE \u003d \"setbudget 500.0\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String SHOW_BUDGET \u003d \"SHOW BUDGET\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String SHOW_BUDGET_USAGE \u003d \"show the budget\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SHOW_BUDGET_FORMAT \u003d \"showbudget AMOUNT\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SHOW_BUDGET_EXAMPLE \u003d \"showbudget 500.0\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String EXIT \u003d \"EXIT\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String EXIT_USAGE \u003d \"exit from the application\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String EXIT_FORMAT \u003d \"exit\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String EXIT_EXAMPLE \u003d \"exit\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String SHOW_STATISTIC \u003d \"SHOW STATISTIC\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String SHOW_STATISTIC_USAGE \u003d \"show an overview of your expenses\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SHOW_STATISTIC_FORMAT \u003d \"show-stats\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SHOW_STATISTIC_EXAMPLE \u003d \"show-stats\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_AMOUNT \u003d \"SORT BY AMOUNT\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_TIME \u003d \"SORT BY TIME\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_AMOUNT_USAGE \u003d \"sort expenses by amount in ascending/descending order\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_TIME_USAGE \u003d \"sort expenses by time in ascending/descending order\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_AMOUNT_FORMAT \u003d \"sort-a ORDER\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_TIME_FORMAT \u003d \"sort-t ORDER\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_AMOUNT_EXAMPLE \u003d \"sort-a ascending\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String SORT_BY_TIME_EXAMPLE \u003d \"sort-t descending\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DESCRIPTION \u003d \"FILTER BY DESCRIPTION\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DESCRIPTION_USAGE \u003d \"filter the expenses by keywords in description\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DESCRIPTION_FORMAT \u003d \"filter-d KEYWORD\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DESCRIPTION_EXAMPLE \u003d \"filter-d movie\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DATE \u003d \"FILTER BY DATE\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DATE_USAGE \u003d \"filter the expenses by date\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DATE_FORMAT \u003d \"filter-t YYYY-MM-DD\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String FILTER_BY_DATE_EXAMPLE \u003d \"filter-t 2020-11-02\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String HELP \u003d \"HELP\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String HELP_USAGE \u003d \"look for help when using the app\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String HELP_FORMAT \u003d \"help\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String HELP_EXAMPLE \u003d \"help\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final String usage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final String format;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final String example;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    protected CommandList(String command, String usage, String format, String example) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.format \u003d format;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.example \u003d example;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getUsage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.usage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.format;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getExample() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.example;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static List\u003cCommandList\u003e getCommandList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cCommandList\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList addCommand \u003d new CommandList(ADD_EXPENSE, ADD_EXPENSE_USAGE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                ADD_EXPENSE_FORMAT, ADD_EXPENSE_EXAMPLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList listCommand \u003d new CommandList(LIST_EXPENSE, LIST_EXPENSE_USAGE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                LIST_EXPENSE_FORMAT, LIST_EXPENSE_EXAMPLE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList listByCategoryCommand \u003d new CommandList(LIST_BY_CATEGORY, LIST_BY_CATEGORY_USAGE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                LIST_BY_CATEGORY_FORMAT, LIST_BY_CATEGORY_EXAMPLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList deleteCommand \u003d new CommandList(DELETE, DELETE_USAGE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                DELETE_FORMAT, DELETE_EXAMPLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList viewCommand \u003d new CommandList(VIEW, VIEW_USAGE,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                VIEW_FORMAT, VIEW_EXAMPLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList viewCategoryCommand \u003d new CommandList(VIEW_CATEGORY, VIEW_CATEGORY_USAGE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                VIEW_CATEGORY_FORMAT, VIEW_CATEGORY_EXAMPLE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList addDesCommand \u003d new CommandList(ADD_DESCRIPTION, ADD_DESCRIPTION_USAGE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                ADD_DESCRIPTION_FORMAT, ADD_DESCRIPTION_EXAMPLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList deleteDesCommand \u003d new CommandList(DELETE_DESCRIPTION, DELETE_DESCRIPTION_USAGE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                DELETE_DESCRIPTION_FORMAT, DELETE_DESCRIPTION_EXAMPLE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList setBudgeCommand \u003d new CommandList(SET_BUDGET, SET_BUDGET_USAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                SET_BUDGET_FORMAT, SET_BUDGET_EXAMPLE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList showBudgeCommand \u003d new CommandList(SHOW_BUDGET, SHOW_BUDGET_USAGE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                SHOW_BUDGET_FORMAT, SHOW_BUDGET_EXAMPLE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList exitCommand \u003d new CommandList(EXIT, EXIT_USAGE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                EXIT_FORMAT, EXIT_EXAMPLE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandList showStatisticCommand \u003d new CommandList(SHOW_STATISTIC, SHOW_STATISTIC_USAGE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                SHOW_STATISTIC_FORMAT, SHOW_STATISTIC_EXAMPLE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandList sortByAmountCommand \u003d new CommandList(SORT_BY_AMOUNT, SORT_BY_AMOUNT_USAGE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                SORT_BY_AMOUNT_FORMAT, SORT_BY_AMOUNT_EXAMPLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandList sortByTimeCommand \u003d new CommandList(SORT_BY_TIME, SORT_BY_TIME_USAGE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                SORT_BY_TIME_FORMAT, SORT_BY_TIME_EXAMPLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandList filterByTimeCommand \u003d new CommandList(FILTER_BY_DATE, FILTER_BY_DATE_USAGE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                FILTER_BY_DATE_FORMAT, FILTER_BY_DATE_EXAMPLE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandList filterByDescriptionCommand \u003d new CommandList(FILTER_BY_DESCRIPTION, FILTER_BY_DESCRIPTION_USAGE,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                FILTER_BY_DESCRIPTION_FORMAT, FILTER_BY_DESCRIPTION_EXAMPLE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandList helpCommand \u003d new CommandList(HELP, HELP_USAGE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                HELP_FORMAT, HELP_EXAMPLE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(addCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(deleteCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(listCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(listByCategoryCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(filterByDescriptionCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(filterByTimeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(sortByAmountCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(sortByTimeCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(addDesCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(deleteDesCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(setBudgeCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(showBudgeCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        list.add(showStatisticCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(viewCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(viewCategoryCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(helpCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        list.add(exitCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 58,
      "BILLXYR": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Currency.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents a Expense\u0027s currency in the expense book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class Currency {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private static final String singaporeDollar \u003d \"SGD\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CurrencyConverter converter \u003d new CurrencyConverter();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public final String currencyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Currency() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.currencyCode \u003d singaporeDollar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Currency(String currencyCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.currencyCode \u003d currencyCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidCurrency(Currency currency) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return converter.isValidCurrency(currency);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return currencyCode.hashCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            || (other instanceof Currency // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            \u0026\u0026 currencyCode.equals(((Currency) other).currencyCode)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return currencyCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 33,
      "-": 7,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/CurrencyConverter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class CurrencyConverter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private HashMap\u003cCurrency, ExchangeRate\u003e usdToExchangeRates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Construct a CurrencyConverter with a HashMap to store all the exchange rates from USD."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * The data are read from txt file in doc folder, which can be update manually."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public CurrencyConverter() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        loadExchangeRates();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Calculate the exchange rate from one currency to another, using USD as a base."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param fromCurr the currency being converted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param toCurr target currency."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @return Exchange rate from \u0027fromCurr\u0027 to \u0027toCurr\u0027."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ExchangeRate convert(Currency fromCurr, Currency toCurr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        ExchangeRate usdToFrom \u003d usdToExchangeRates.get(fromCurr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        ExchangeRate usdToTo \u003d usdToExchangeRates.get(toCurr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new ExchangeRate(usdToTo.getRate() / usdToFrom.getRate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Added by Zhang Yuanxing on 2020-10-30. Exchange Rates are get from currencylayer website."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private void loadExchangeRates() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"AED\"), new ExchangeRate(3.673005));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"AFN\"), new ExchangeRate(76.897058));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ALL\"), new ExchangeRate(106.399855));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"AMD\"), new ExchangeRate(493.150079));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ANG\"), new ExchangeRate(1.794897));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"AOA\"), new ExchangeRate(662.941003));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ARS\"), new ExchangeRate(78.3152));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"AUD\"), new ExchangeRate(1.42508));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"AWG\"), new ExchangeRate(1.8));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"AZN\"), new ExchangeRate(1.700615));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BAM\"), new ExchangeRate(1.670957));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BBD\"), new ExchangeRate(2.018907));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BDT\"), new ExchangeRate(84.888486));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BGN\"), new ExchangeRate(1.673433));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BHD\"), new ExchangeRate(0.377075));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BIF\"), new ExchangeRate(1940));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BMD\"), new ExchangeRate(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BND\"), new ExchangeRate(1.36626));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BOB\"), new ExchangeRate(6.904488));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BRL\"), new ExchangeRate(5.765572));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BSD\"), new ExchangeRate(0.999927));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BTC\"), new ExchangeRate(0.000073494475));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BTN\"), new ExchangeRate(74.511335));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BWP\"), new ExchangeRate(11.467127));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BYN\"), new ExchangeRate(2.632181));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BYR\"), new ExchangeRate(19600));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"BZD\"), new ExchangeRate(2.015575));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CAD\"), new ExchangeRate(1.334925));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CDF\"), new ExchangeRate(1965.999921));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CHF\"), new ExchangeRate(0.91611));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CLF\"), new ExchangeRate(0.028025));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CLP\"), new ExchangeRate(773.295715));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CNY\"), new ExchangeRate(6.714987));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"COP\"), new ExchangeRate(3855.5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CRC\"), new ExchangeRate(606.697224));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CUC\"), new ExchangeRate(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CUP\"), new ExchangeRate(26.5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CVE\"), new ExchangeRate(94.650032));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"CZK\"), new ExchangeRate(23.445002));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"DJF\"), new ExchangeRate(178.011679));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"DKK\"), new ExchangeRate(6.38402));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"DOP\"), new ExchangeRate(58.529885));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"DZD\"), new ExchangeRate(128.817921));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"EGP\"), new ExchangeRate(15.694803));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ERN\"), new ExchangeRate(14.999699));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ETB\"), new ExchangeRate(37.550172));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"EUR\"), new ExchangeRate(0.857415));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"FJD\"), new ExchangeRate(2.144979));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"FKP\"), new ExchangeRate(0.77446));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GBP\"), new ExchangeRate(0.774295));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GEL\"), new ExchangeRate(3.2402));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GGP\"), new ExchangeRate(0.77446));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GHS\"), new ExchangeRate(5.840363));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GIP\"), new ExchangeRate(0.77446));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GMD\"), new ExchangeRate(51.75996));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GNF\"), new ExchangeRate(9750.000196));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GTQ\"), new ExchangeRate(7.794376));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"GYD\"), new ExchangeRate(209.16116));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"HKD\"), new ExchangeRate(7.75322));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"HNL\"), new ExchangeRate(24.550079));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"HRK\"), new ExchangeRate(6.4939));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"HTG\"), new ExchangeRate(63.214821));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"HUF\"), new ExchangeRate(315.239845));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"IDR\"), new ExchangeRate(14774.8));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ILS\"), new ExchangeRate(3.42194));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"IMP\"), new ExchangeRate(0.77446));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"INR\"), new ExchangeRate(74.40185));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"IQD\"), new ExchangeRate(1190));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"IRR\"), new ExchangeRate(42104.999943));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ISK\"), new ExchangeRate(141.54015));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"JEP\"), new ExchangeRate(0.77446));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"JMD\"), new ExchangeRate(145.768634));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"JOD\"), new ExchangeRate(0.708996));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"JPY\"), new ExchangeRate(104.637502));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KES\"), new ExchangeRate(108.794649));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KGS\"), new ExchangeRate(81.814885));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KHR\"), new ExchangeRate(4060.000029));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KMF\"), new ExchangeRate(421.874948));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KPW\"), new ExchangeRate(900.017837));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KRW\"), new ExchangeRate(1132.909655));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KWD\"), new ExchangeRate(0.305796));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KYD\"), new ExchangeRate(0.833244));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"KZT\"), new ExchangeRate(433.035752));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LAK\"), new ExchangeRate(9260.000155));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LBP\"), new ExchangeRate(1519.000112));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LKR\"), new ExchangeRate(184.310863));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LRD\"), new ExchangeRate(183.550338));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LSL\"), new ExchangeRate(16.37979));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LTL\"), new ExchangeRate(2.95274));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LVL\"), new ExchangeRate(0.60489));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"LYD\"), new ExchangeRate(1.370072));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MAD\"), new ExchangeRate(9.204938));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MDL\"), new ExchangeRate(17.037461));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MGA\"), new ExchangeRate(3924.999987));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MKD\"), new ExchangeRate(52.639897));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MMK\"), new ExchangeRate(1286.901071));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MNT\"), new ExchangeRate(2863.90923));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MOP\"), new ExchangeRate(7.983973));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MRO\"), new ExchangeRate(357.000515));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MUR\"), new ExchangeRate(39.954881));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MVR\"), new ExchangeRate(15.402159));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MWK\"), new ExchangeRate(754.999779));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MXN\"), new ExchangeRate(21.357698));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MYR\"), new ExchangeRate(4.157025));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"MZN\"), new ExchangeRate(73.159818));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"NAD\"), new ExchangeRate(16.379828));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"NGN\"), new ExchangeRate(381.00041));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"NIO\"), new ExchangeRate(34.698212));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"NOK\"), new ExchangeRate(9.534803));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"NPR\"), new ExchangeRate(119.218102));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"NZD\"), new ExchangeRate(1.513155));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"OMR\"), new ExchangeRate(0.385054));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"PAB\"), new ExchangeRate(0.999927));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"PEN\"), new ExchangeRate(3.611499));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"PGK\"), new ExchangeRate(3.505004));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"PHP\"), new ExchangeRate(48.4155));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"PKR\"), new ExchangeRate(160.703969));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"PLN\"), new ExchangeRate(3.9623));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"PYG\"), new ExchangeRate(7021.960982));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"QAR\"), new ExchangeRate(3.641012));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"RON\"), new ExchangeRate(4.1788));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"RSD\"), new ExchangeRate(100.824992));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"RUB\"), new ExchangeRate(78.975402));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"RWF\"), new ExchangeRate(970));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SAR\"), new ExchangeRate(3.750324));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SBD\"), new ExchangeRate(8.101947));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SCR\"), new ExchangeRate(19.324765));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SDG\"), new ExchangeRate(55.275018));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SEK\"), new ExchangeRate(8.92047));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SGD\"), new ExchangeRate(1.36745));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SHP\"), new ExchangeRate(0.77446));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SLL\"), new ExchangeRate(9929.999973));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SOS\"), new ExchangeRate(583.000258));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SRD\"), new ExchangeRate(14.153991));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"STD\"), new ExchangeRate(21031.906016));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SVC\"), new ExchangeRate(8.749365));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SYP\"), new ExchangeRate(512.61336));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"SZL\"), new ExchangeRate(16.379817));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"THB\"), new ExchangeRate(31.239631));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TJS\"), new ExchangeRate(10.334089));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TMT\"), new ExchangeRate(3.5));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TND\"), new ExchangeRate(2.776498));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TOP\"), new ExchangeRate(2.323499));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TRY\"), new ExchangeRate(8.285205));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TTD\"), new ExchangeRate(6.798891));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TWD\"), new ExchangeRate(28.624983));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"TZS\"), new ExchangeRate(2318.825008));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"UAH\"), new ExchangeRate(28.443894));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"UGX\"), new ExchangeRate(3739.731821));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"USD\"), new ExchangeRate(1));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"UYU\"), new ExchangeRate(42.701957));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"UZS\"), new ExchangeRate(10364.00049));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"VEF\"), new ExchangeRate(9.987499));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"VND\"), new ExchangeRate(23180));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"VUV\"), new ExchangeRate(114.23611));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"WST\"), new ExchangeRate(2.630378));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"XAF\"), new ExchangeRate(560.409912));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"XAG\"), new ExchangeRate(0.042658));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"XAU\"), new ExchangeRate(0.000535));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"XCD\"), new ExchangeRate(2.70255));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"XDR\"), new ExchangeRate(0.707564));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"XOF\"), new ExchangeRate(554.498872));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"XPF\"), new ExchangeRate(102.649882));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"YER\"), new ExchangeRate(250.349783));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ZAR\"), new ExchangeRate(16.386983));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ZMK\"), new ExchangeRate(9001.201691));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ZMW\"), new ExchangeRate(20.554898));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        usdToExchangeRates.put(new Currency(\"ZWL\"), new ExchangeRate(321.999941));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public boolean isValidCurrency(Currency currency) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return usdToExchangeRates.containsKey(currency);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/CurrencyExchangeRate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents a Expense\u0027s currency exchange rate in the expense book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class CurrencyExchangeRate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final String currency;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final String exchangeRate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs a CurrencyExchangeRate object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param currency The name of the currency."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param exchangeRate Exchange rate of this currency to SGD."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public CurrencyExchangeRate(String currency, String exchangeRate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.exchangeRate \u003d exchangeRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the name of the currency."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return The name of this currency."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public String getCurrency() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return currency;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the exchange rate of this currency to SGD."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return The exchange rate of this currency to SGD."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public String getExchangeRate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return exchangeRate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 36,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents a Expense\u0027s date in the expense book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Guarantees: the date is non-negative; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    //public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    // \"Date should only contain numbers, and it should be at least 1 digits long\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    // public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \"Date can be entered in one of these two ways: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                   + \"i) A single number to represent number of days before today.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        + \"and it should be at least 1 digits long. Eg: 1 refer to 1 day  ago \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    + \"and it should be less than 3650. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"ii) The actual date,format: YYYY-MM-DD. Eg: 2020-11-12\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public final String howManyDaysAgo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private LocalDate localDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Constructor for Date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param inputDay Allow user to type in how many days ago he spent the money."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public Date(String inputDay) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        checkArgument(isValidDate(inputDay), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!inputDay.contains(\"-\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            this.howManyDaysAgo \u003d inputDay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            assert Integer.parseInt(inputDay) \u003e\u003d 0 \u0026\u0026 Integer.parseInt(inputDay) \u003c\u003d 3650 : \"Invalid days Being Enter\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            LocalDate localdate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            int convertedDay \u003d Integer.parseInt(inputDay);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            LocalDate dayBefore \u003d localdate.minusDays(convertedDay);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            localDate \u003d dayBefore;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            this.date \u003d dayBefore.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            this.howManyDaysAgo \u003d \"undefined\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            // LocalDate date \u003d LocalDate.parse(inputDay);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            // this.date \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            this.date \u003d inputDay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Constructor for Date. When the date is not entered, localdate will be used for the date of expense。"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public Date () {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        LocalDate localdate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.howManyDaysAgo \u003d \"0\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.date \u003d localdate.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        localDate \u003d localdate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Returns true if a given string is a valid Day."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (test.contains(\"-\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(test);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                int dayBefore \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                return dayBefore \u003e\u003d 0 \u0026\u0026 dayBefore \u003c\u003d 3650;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the localDate of the Date."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return The localDate of the date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this.localDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.date.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getHowManyDaysAgo() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.howManyDaysAgo;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 5,
      "yyutong": 13,
      "BILLXYR": 67,
      "yuming7144": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/DateContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Date} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DateContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public DateContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getDate().date, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                || (other instanceof DateContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u0026\u0026 keywords.equals(((DateContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/DescContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DescContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public DescContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getDescription().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                || (other instanceof DescContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Represents an expense\u0027s description in the finance manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return value.equals(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns true if a given description is a valid description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static boolean isValidDescription(String value) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return !value.equals(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "yyutong": 1,
      "yuming7144": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExchangeRate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents a Expense\u0027s exchange rate in the expense book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class ExchangeRate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private final double exchangeRate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ExchangeRate(double exchangeRate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.exchangeRate \u003d exchangeRate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"%.8f\", this.exchangeRate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public double getRate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return this.exchangeRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 18,
      "-": 1,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents an Expense in the expense book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private final Currency dollarSign;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Expense(Amount amount, Date date, Category category, Description description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        requireAllNonNull(amount, date, category);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.dollarSign \u003d new Currency();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Expense(Amount amount, Currency dollarSign, Date date, Category category, Description description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        requireAllNonNull(amount, date, category);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.dollarSign \u003d dollarSign;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Currency getCurrency() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return this.dollarSign;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Exchange the expense to input currency."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param dollarSign Currency of the input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param exchangeRate from current currency to input Currency."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @return a new expense in the new Currency."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Expense exchange(Currency dollarSign, ExchangeRate exchangeRate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return new Expense("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            new Amount(amount.getValue() * exchangeRate.getRate()), dollarSign, date, category, description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(this.getAmount())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(this.getDate())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 otherExpense.getCategory().equals(this.getCategory())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(this.getDescription());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 otherExpense.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return Objects.hash(amount, date, category, description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            builder.append(\" Amount: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    .append(this.getAmount())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                    .append(this.dollarSign)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    .append(\" Date: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    .append(this.getDate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    .append(\" Category: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(this.getCategory())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            builder.append(\" Amount: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(this.getAmount())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                    .append(this.dollarSign)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\" Date: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(this.getDate())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\" Category: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(this.getCategory())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\" Description: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(this.getDescription())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 38,
      "yyutong": 99,
      "BILLXYR": 4,
      "yuming7144": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExpenseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.ShowStatisticCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": " * A list of expenses that does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "public class ExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private List\u003cStatisticSummary\u003e statisticSummary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param toCheck the expenses to be checked."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param toAdd the expenses to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * View the detals of a certain expense."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param index The index of the expense to be viewed in the ExpenseBook."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void view(Index index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense expense \u003d internalList.get(index.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param toRemove the expenses to be removed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * {@code expenses} must not be nulls."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param expenses the expenses to be set."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Add up the amount in the {@code expenses}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @return total spending of the expense list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public double totalSpending() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        double spending \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        for (Expense expense : internalList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            spending +\u003d expense.getAmount().getValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return spending;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Exchange the {@code expenses} to the input currency."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param dollarSign of the new currency."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * @param exchangeRate from the current currency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public void exchange(Currency dollarSign, ExchangeRate exchangeRate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        List\u003cExpense\u003e exchangedExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        for (Expense expense : internalList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "            exchangedExpenses.add(expense.exchange(dollarSign, exchangeRate));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        setExpenses(exchangedExpenses);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get all the categories in the {@code expenses}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return a list contains all the categories."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public List\u003cCategory\u003e getCategoryLabels() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        List\u003cCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        for (Expense current : internalList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            Category currentCategory \u003d current.getCategory();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            if (!categories.contains(currentCategory)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                categories.add(currentCategory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total spending of the specific category."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param categoryName the total spending of the specific category."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return the total spending of that specific category."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int getExpenseSumByCategory(String categoryName) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        for (Expense current : internalList) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            Category currentCategory \u003d current.getCategory();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String currentCategoryName \u003d currentCategory.categoryName;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            if (currentCategoryName.equals(categoryName)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                counter \u003d counter + 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total number of expenses in the expense book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int getTotalExpense() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        int sum \u003d internalList.size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total spending of the expenses in the expense book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public double getExpenseSum() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (Expense current : internalList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            Amount currentAmount \u003d current.getAmount();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            double currentAmountValue \u003d currentAmount.getValue();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            sum \u003d sum + currentAmountValue;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total spending of all the categories."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return a hashmap that contains the total spending of all all categories."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HashMap\u003cString, Double\u003e getExpenseSumCategory() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cCategory\u003e categories \u003d getCategoryLabels();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Double\u003e hashMap \u003d new HashMap\u003cString, Double\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (int i \u003d 0; i \u003c categories.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String currentCategory \u003d categories.get(i).categoryName;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            double categorySum \u003d getExpenseSumOfCategory(currentCategory);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            hashMap.put(currentCategory, categorySum);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return hashMap;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the percentage of different categories\u0027 spending."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return a hashmap that contains the percentage of different categories\u0027 spending."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HashMap\u003cString, Double\u003e getExpensePercentageCategory() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cCategory\u003e categories \u003d getCategoryLabels();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Double\u003e hashMap \u003d new HashMap\u003cString, Double\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        double totalSum \u003d getExpenseSum();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (int i \u003d 0; i \u003c categories.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String currentCategory \u003d categories.get(i).categoryName;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            double categorySum \u003d getExpenseSumOfCategory(currentCategory);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            double percentage \u003d categorySum / totalSum * 100;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            hashMap.put(currentCategory, percentage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return hashMap;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Get the total number of expenses of the specific category."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param categoryName the total number of expenses of the specific category."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return the total number of expenses of that specific category."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public double getExpenseSumOfCategory(String categoryName) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cCategory\u003e categories \u003d getCategoryLabels();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Double\u003e hashMap \u003d new HashMap\u003cString, Double\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (Expense current : internalList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            Category currentCategory \u003d current.getCategory();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String currentCategoryName \u003d currentCategory.categoryName;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            if (categoryName.equals(currentCategoryName)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                Amount currentAmount \u003d current.getAmount();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                double currentAmountValue \u003d currentAmount.getValue();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                sum \u003d sum + currentAmountValue;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseList) other).internalList));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Sorts the expense list by ascending amount."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByAscendingAmount() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        internalList.sort(Comparator.comparing(expense -\u003e expense.getAmount().value));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Sorts the expense list by descending amount."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByDescendingAmount() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        internalList.sort((expense, other) -\u003e other.getAmount().value.compareTo(expense.getAmount().value));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Sorts the expense list by descending timr."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByDescendingTime() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        internalList.sort((expense, other) -\u003e {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            if (expense.getDate().getLocalDate()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .isBefore(other.getDate().getLocalDate())) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            } else if (expense.getDate().getLocalDate()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .isBefore(other.getDate().getLocalDate())) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Sorts the expense list by ascending time."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void sortByAscendingTime() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        internalList.sort((expense, other) -\u003e {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            if (expense.getDate().getLocalDate()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .isAfter(other.getDate().getLocalDate())) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            } else if (expense.getDate().getLocalDate()"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    .isAfter(other.getDate().getLocalDate())) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the statistics of this expense book."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return The statistics of this expense book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this.statistics;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Gets the statistic table of this expense book."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @return The statistic table of this expense book."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public List\u003cStatisticSummary\u003e getStatisticTable() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        updateStatisticSummary();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.statisticSummary;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Update the statistics of this expense book."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void updateStatisticSummary() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Integer\u003e hashMap \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cCategory\u003e categories \u003d getCategoryLabels();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (int i \u003d 0; i \u003c categories.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String currentCategoryName \u003d categories.get(i).categoryName;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            int sum \u003d getExpenseSumByCategory(currentCategoryName);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            hashMap.put(currentCategoryName, sum);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Double\u003e hashMap3 \u003d getExpenseSumCategory();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Double\u003e hashMap4 \u003d getExpensePercentageCategory();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        HashMap\u003cString, Double\u003e expensePercentageCategoryData \u003d getExpensePercentageCategory();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Map\u003cString, Double\u003e hashMap5 \u003d ShowStatisticCommand.sortByTotalExpense(hashMap3);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cStatisticSummary\u003e statisticSummaries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (Map.Entry\u003cString, Double\u003e hashMap2 : hashMap5.entrySet()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String category \u003d hashMap2.getKey();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            int numberOfExpense \u003d hashMap.get(category);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            double totalAmount \u003d hashMap3.get(category);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            double percentage \u003d hashMap4.get(category);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String formattedAmount \u003d String.format(\"%.2f\", totalAmount);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            String formattedPercentage \u003d String.format(\"%.2f\", percentage);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            StatisticSummary statistic \u003d new StatisticSummary(category, numberOfExpense,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    formattedPercentage, formattedAmount);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            statisticSummaries.add(statistic);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.statisticSummary \u003d statisticSummaries;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Update the statistics of this expense book."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        HashMap\u003cString, Double\u003e expensePercentageCategoryData \u003d getExpensePercentageCategory();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ArrayList\u003cString\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        for (Category category: getCategoryLabels()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            categories.add(category.categoryName);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.statistics \u003d new Statistics(expensePercentageCategoryData, categories);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 71,
      "yyutong": 90,
      "yuming7144": 61,
      "BILLXYR": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/StatisticSummary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class StatisticSummary {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final int numberOfExpense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final String percentage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final String totalSpending;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    protected StatisticSummary(String category, int numberOfExpense, String percentage, String totalSpending) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.numberOfExpense \u003d numberOfExpense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.totalSpending \u003d totalSpending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public int getNumberOfExpense() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.numberOfExpense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getPercentage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.percentage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public String getTotalSpending() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this.totalSpending;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Represents a Expense\u0027s statistic in the expense book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private HashMap\u003cString, Double\u003e categoryAmountPercentage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //private HashMap\u003cString, Double\u003e categoryNumberPercentage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private ArrayList\u003cString\u003e categories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs a Statistics object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param categoryAmountPercentage A hashmap of categories and corresponding percentages."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param categories An arraylist of all existing categories.v"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Statistics(HashMap\u003cString, Double\u003ecategoryAmountPercentage, ArrayList\u003cString\u003e categories) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.categoryAmountPercentage \u003d categoryAmountPercentage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        //this.categoryNumberPercentage \u003d categoryNumberPercentage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the hashmap pf categories and percentages."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return The hashmap of categories and percentage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public HashMap\u003cString, Double\u003e getCategoryAmountPercentage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this.categoryAmountPercentage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Gets the data for PieChart."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @return Data for PieChart."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getCategoryAmountPercenatgePieCharStatistics() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        for (String current: categories) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            double percentage \u003d categoryAmountPercentage.get(current);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            list.add(new PieChart.Data(current, percentage));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 59,
      "BILLXYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ExpenseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        super(\"The expense can not be found!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "yuming7144": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final Description EMPTY_DESCRIPTION \u003d new Description(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new Expense[]{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            new Expense(new Amount(11.2), new Date(\"2\"), new Category(\"entertainment\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    new Description(\"movie\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            new Expense(new Amount(1.2), new Date(\"1\"), new Category(\"foodbeverage\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    new Description(\"macdonald\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            new Expense(new Amount(5.2), new Date(\"5\"), new Category(\"transportation\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    new Description(\"bus\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            new Expense(new Amount(6.2), new Date(\"7\"), new Category(\"entertainment\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    EMPTY_DESCRIPTION),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            new Expense(new Amount(7.2), new Date(\"6\"), new Category(\"entertainment\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    EMPTY_DESCRIPTION),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            new Expense(new Amount(8.2), new Date(\"3\"), new Category(\"entertainment\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    EMPTY_DESCRIPTION),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static ReadOnlyExpenseBook getSampleExpenseBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBook sampleAb \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            sampleAb.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static ReadOnlyExpenseBook getExpenseBookWithoutSample(ExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            expenseBook.removeExpense(sampleExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 5,
      "tanwayne890": 5,
      "-": 18,
      "yuming7144": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExpenseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ExpenseBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public interface ExpenseBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Returns ExpenseBook data as a {@link ReadOnlyExpenseBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @see #getExpenseBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenseBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param expenseBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @see #saveExpenseBook(ReadOnlyExpenseBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "yuming7144": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    // private final Double amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final String currency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"amount\") String amount, @JsonProperty(\"currency\") String currency,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                              @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                             @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                             @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        amount \u003d String.format(\"%.2f\", source.getAmount().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        // amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        currency \u003d source.getCurrency().currencyCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        date \u003d source.getDate().date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        final Amount modelAmount \u003d new Amount(Double.valueOf(amount));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (currency \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    Currency.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final Currency modelCurrency \u003d new Currency(currency);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new Expense(modelAmount, modelCurrency, modelDate, modelCategory, modelDescription);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 13,
      "yuming7144": 76,
      "BILLXYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonExpenseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * A class to access ExpenseBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class JsonExpenseBookStorage implements ExpenseBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExpenseBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public JsonExpenseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return readExpenseBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Similar to {@link #readExpenseBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        logger.info(\"In jsonExpenseBook storage readExpenseBook\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Optional\u003cJsonSerializableExpenseBook\u003e jsonExpenseBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                filePath, JsonSerializableExpenseBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!jsonExpenseBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return Optional.of(jsonExpenseBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        saveExpenseBook(expenseBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Similar to {@link #saveExpenseBook(ReadOnlyExpenseBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        requireNonNull(expenseBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExpenseBook(expenseBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "yuming7144": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableExpenseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * An Immutable ExpenseBook that is serializable to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "@JsonRootName(value \u003d \"expensebook\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class JsonSerializableExpenseBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expense list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExpenseBookStorage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final Double budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final String dollarSign;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Constructs a {@code JsonSerializableExpenseBook} with the given expenses."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public JsonSerializableExpenseBook(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                                       @JsonProperty(\"budget\") String budget,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                                       @JsonProperty(\"dollarSign\") String dollarSign) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.budget \u003d Double.valueOf(budget);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.dollarSign \u003d dollarSign;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Converts a given {@code ReadOnlyExpenseBook} into this class for Json use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExpenseBook}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public JsonSerializableExpenseBook(ReadOnlyExpenseBook source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        budget \u003d source.getBudget().getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        logger.info(\"budget obtained at source.getBudget().getValue() is \" + budget);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        dollarSign \u003d source.getCurrency().currencyCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Converts this expense book into the model\u0027s {@code ExpenseBook} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        logger.info(\"converting json adapted expense to model type\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            logger.info(\"jsonAdaptedExpense： \" + jsonAdaptedExpense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            if (expenseBook.hasExpense(expense)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseBook.setCurrency(new Currency(dollarSign));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseBook.setBudget(new Budget(budget));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 2,
      "-": 34,
      "yuming7144": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public interface Storage extends ExpenseBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "yuming7144": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Manages storage of ExpenseBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private ExpenseBookStorage expenseBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ExpenseBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public StorageManager(ExpenseBookStorage expenseBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.expenseBookStorage \u003d expenseBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseBookStorage.getExpenseBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return readExpenseBook(expenseBookStorage.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseBookStorage.readExpenseBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        saveExpenseBook(expenseBook, expenseBookStorage.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseBookStorage.saveExpenseBook(expenseBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "yuming7144": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class BudgetPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private static final String FXML \u003d \"BudgetPanel.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetPanel.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Label budgetAmount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Label budgetRemaining;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Label totalSpending;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs a BudgetPanel object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param logic The logic manager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public BudgetPanel(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.budget \u003d logic.getExpenseBook().getBudget();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        budgetAmount.setText(String.format(\"Current budget: %s %s\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                logic.getExpenseBook().getBudget(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (logic.getExpenseBook().getRemainingBudget().getValue() \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            budgetRemaining.setText(String.format(\"Remaining budget: %s %s.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"You are overspending your budget, please set a new budget with command \u0027set-b AMOUNT\u0027.\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.getExpenseBook().getRemainingBudget(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            budgetRemaining.setText(String.format(\"Remaining budget: %s %s\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.getExpenseBook().getRemainingBudget(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        totalSpending.setText(String.format(\"Total spending: %s %s\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                logic.getExpenseBook().totalSpending(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Update the budget statistics shown in the GUI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        budgetAmount.setText(String.format(\"Current budget: %s %s\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                logic.getExpenseBook().getBudget(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (logic.getExpenseBook().getRemainingBudget().getValue() \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            budgetRemaining.setText(String.format(\"Remaining budget: %s %s.\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"You are overspending your budget, please set a new budget with command \u0027set-b AMOUNT\u0027.\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.getExpenseBook().getRemainingBudget(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            budgetRemaining.setText(String.format(\"Remaining budget: %s %s\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.getExpenseBook().getRemainingBudget(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        totalSpending.setText(String.format(\"Total spending: %.2f %s\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                logic.getExpenseBook().totalSpending(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                logic.getExpenseBook().getCurrency()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 57,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CurrencyExchangeTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.CurrencyExchangeRate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class CurrencyExchangeTable extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String URL \u003d \"https://www.xe.com/currency/sgd-singapore-dollar.html\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE \u003d \"You can find some useful currency exchange rates here!\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"Please refer to this online website for more accurate and in-time exchange rates.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            + \"\\n\" + URL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private static final String FXML \u003d \"CurrencyExchangeTable.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private TableView\u003cCurrencyExchangeRate\u003e tableView \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CurrencyExchangeTable.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private TableColumn currency \u003d new TableColumn(\"Currency\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private TableColumn exchangeRate \u003d new TableColumn(\"Exchange rate (1.00 SGD)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private ObservableList\u003cCurrencyExchangeRate\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Creates a new CurrencyExchangeTable."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param root Stage to use as the root of the StatisticsWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public CurrencyExchangeTable(Stage root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        label.setGraphic(tableView);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        label.setMinWidth(255);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public CurrencyExchangeTable() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs the exchange rate table."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void constructTable() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        currency.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"currency\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        exchangeRate.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"exchangeRate\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        list.addAll(new CurrencyExchangeRate(\"AED\", String.format(\"%.8f\", 3.673005 / 1.36745)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"AFN\", String.format(\"%.8f\", 76.897058 / 1.36745)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ALL\", String.format(\"%.8f\", 106.399855 / 1.36745)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"AMD\", String.format(\"%.8f\", 493.150079 / 1.36745)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ANG\", String.format(\"%.8f\", 1.794897 / 1.36745)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"AOA\", String.format(\"%.8f\", 662.941003 / 1.36745)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ARS\", String.format(\"%.8f\", 78.3152 / 1.36745)),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"AUD\", String.format(\"%.8f\", 1.42508 / 1.36745)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"AWG\", String.format(\"%.8f\", 1.8 / 1.36745)),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"AZN\", String.format(\"%.8f\", 1.700615 / 1.36745)),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BAM\", String.format(\"%.8f\", 1.670957 / 1.36745)),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BBD\", String.format(\"%.8f\", 2.018907 / 1.36745)),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BDT\", String.format(\"%.8f\", 84.888486 / 1.36745)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BGN\", String.format(\"%.8f\", 1.673433 / 1.36745)),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BHD\", String.format(\"%.8f\", 0.377075 / 1.36745)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BIF\", String.format(\"%.8f\", 1940 / 1.36745)),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BMD\", String.format(\"%.8f\", 1 / 1.36745)),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BND\", String.format(\"%.8f\", 1.36626 / 1.36745)),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BOB\", String.format(\"%.8f\", 6.904488 / 1.36745)),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BRL\", String.format(\"%.8f\", 5.765572 / 1.36745)),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BSD\", String.format(\"%.8f\", 0.999927 / 1.36745)),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BTC\", String.format(\"%.8f\", 7.3494475e-5 / 1.36745)),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BTN\", String.format(\"%.8f\", 74.511335 / 1.36745)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BWP\", String.format(\"%.8f\", 11.467127 / 1.36745)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BYN\", String.format(\"%.8f\", 2.632181 / 1.36745)),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BYR\", String.format(\"%.8f\", 19600 / 1.36745)),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"BZD\", String.format(\"%.8f\", 2.015575 / 1.36745)),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CAD\", String.format(\"%.8f\", 1.334925 / 1.36745)),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CDF\", String.format(\"%.8f\", 1965.999921 / 1.36745)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CHF\", String.format(\"%.8f\", 0.91611 / 1.36745)),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CLF\", String.format(\"%.8f\", 0.028025 / 1.36745)),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CLP\", String.format(\"%.8f\", 773.295715 / 1.36745)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CNY\", String.format(\"%.8f\", 6.714987 / 1.36745)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"COP\", String.format(\"%.8f\", 3855.5 / 1.36745)),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CRC\", String.format(\"%.8f\", 606.697224 / 1.36745)),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CUC\", String.format(\"%.8f\", 1 / 1.36745)),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CUP\", String.format(\"%.8f\", 26.5 / 1.36745)),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CVE\", String.format(\"%.8f\", 94.650032 / 1.36745)),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"CZK\", String.format(\"%.8f\", 23.445002 / 1.36745)),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"DJF\", String.format(\"%.8f\", 178.011679 / 1.36745)),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"DKK\", String.format(\"%.8f\", 6.38402 / 1.36745)),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"DOP\", String.format(\"%.8f\", 58.529885 / 1.36745)),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"DZD\", String.format(\"%.8f\", 128.817921 / 1.36745)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"EGP\", String.format(\"%.8f\", 15.694803 / 1.36745)),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ERN\", String.format(\"%.8f\", 14.999699 / 1.36745)),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ETB\", String.format(\"%.8f\", 37.550172 / 1.36745)),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"EUR\", String.format(\"%.8f\", 0.857415 / 1.36745)),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"FJD\", String.format(\"%.8f\", 2.144979 / 1.36745)),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"FKP\", String.format(\"%.8f\", 0.77446 / 1.36745)),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GBP\", String.format(\"%.8f\", 0.774295 / 1.36745)),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GEL\", String.format(\"%.8f\", 3.2402 / 1.36745)),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GGP\", String.format(\"%.8f\", 0.77446 / 1.36745)),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GHS\", String.format(\"%.8f\", 5.840363 / 1.36745)),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GIP\", String.format(\"%.8f\", 0.77446 / 1.36745)),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GMD\", String.format(\"%.8f\", 51.75996 / 1.36745)),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GNF\", String.format(\"%.8f\", 9750.000196 / 1.36745)),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GTQ\", String.format(\"%.8f\", 7.794376 / 1.36745)),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"GYD\", String.format(\"%.8f\", 209.16116 / 1.36745)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"HKD\", String.format(\"%.8f\", 7.75322 / 1.36745)),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"HNL\", String.format(\"%.8f\", 24.550079 / 1.36745)),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"HRK\", String.format(\"%.8f\", 6.4939 / 1.36745)),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"HTG\", String.format(\"%.8f\", 63.214821 / 1.36745)),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"HUF\", String.format(\"%.8f\", 315.239845 / 1.36745)),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"IDR\", String.format(\"%.8f\", 14774.8 / 1.36745)),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ILS\", String.format(\"%.8f\", 3.42194 / 1.36745)),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"IMP\", String.format(\"%.8f\", 0.77446 / 1.36745)),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"INR\", String.format(\"%.8f\", 74.40185 / 1.36745)),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"IQD\", String.format(\"%.8f\", 1190 / 1.36745)),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"IRR\", String.format(\"%.8f\", 42104.999943 / 1.36745)),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ISK\", String.format(\"%.8f\", 141.54015 / 1.36745)),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"JEP\", String.format(\"%.8f\", 0.77446 / 1.36745)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"JMD\", String.format(\"%.8f\", 145.768634 / 1.36745)),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"JOD\", String.format(\"%.8f\", 0.708996 / 1.36745)),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"JPY\", String.format(\"%.8f\", 104.637502 / 1.36745)),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KES\", String.format(\"%.8f\", 108.794649 / 1.36745)),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KGS\", String.format(\"%.8f\", 81.814885 / 1.36745)),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KHR\", String.format(\"%.8f\", 4060.000029 / 1.36745)),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KMF\", String.format(\"%.8f\", 421.874948 / 1.36745)),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KPW\", String.format(\"%.8f\", 900.017837 / 1.36745)),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KRW\", String.format(\"%.8f\", 1132.909655 / 1.36745)),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KWD\", String.format(\"%.8f\", 0.305796 / 1.36745)),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KYD\", String.format(\"%.8f\", 0.833244 / 1.36745)),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"KZT\", String.format(\"%.8f\", 433.035752 / 1.36745)),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LAK\", String.format(\"%.8f\", 9260.000155 / 1.36745)),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LBP\", String.format(\"%.8f\", 1519.000112 / 1.36745)),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LKR\", String.format(\"%.8f\", 184.310863 / 1.36745)),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LRD\", String.format(\"%.8f\", 183.550338 / 1.36745)),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LSL\", String.format(\"%.8f\", 16.37979 / 1.36745)),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LTL\", String.format(\"%.8f\", 2.95274 / 1.36745)),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LVL\", String.format(\"%.8f\", 0.60489 / 1.36745)),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"LYD\", String.format(\"%.8f\", 1.370072 / 1.36745)),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MAD\", String.format(\"%.8f\", 9.204938 / 1.36745)),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MDL\", String.format(\"%.8f\", 17.037461 / 1.36745)),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MGA\", String.format(\"%.8f\", 3924.999987 / 1.36745)),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MKD\", String.format(\"%.8f\", 52.639897 / 1.36745)),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MMK\", String.format(\"%.8f\", 1286.901071 / 1.36745)),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MNT\", String.format(\"%.8f\", 2863.90923 / 1.36745)),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MOP\", String.format(\"%.8f\", 7.983973 / 1.36745)),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MRO\", String.format(\"%.8f\", 357.000515 / 1.36745)),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MUR\", String.format(\"%.8f\", 39.954881 / 1.36745)),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MVR\", String.format(\"%.8f\", 15.402159 / 1.36745)),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MWK\", String.format(\"%.8f\", 754.999779 / 1.36745)),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MXN\", String.format(\"%.8f\", 21.357698 / 1.36745)),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MYR\", String.format(\"%.8f\", 4.157025 / 1.36745)),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"MZN\", String.format(\"%.8f\", 73.159818 / 1.36745)),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"NAD\", String.format(\"%.8f\", 16.379828 / 1.36745)),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"NGN\", String.format(\"%.8f\", 381.00041 / 1.36745)),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"NIO\", String.format(\"%.8f\", 34.698212 / 1.36745)),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"NOK\", String.format(\"%.8f\", 9.534803 / 1.36745)),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"NPR\", String.format(\"%.8f\", 119.218102 / 1.36745)),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"NZD\", String.format(\"%.8f\", 1.513155 / 1.36745)),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"OMR\", String.format(\"%.8f\", 0.385054 / 1.36745)),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"PAB\", String.format(\"%.8f\", 0.999927 / 1.36745)),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"PEN\", String.format(\"%.8f\", 3.611499 / 1.36745)),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"PGK\", String.format(\"%.8f\", 3.505004 / 1.36745)),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"PHP\", String.format(\"%.8f\", 48.4155 / 1.36745)),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"PKR\", String.format(\"%.8f\", 160.703969 / 1.36745)),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"PLN\", String.format(\"%.8f\", 3.9623 / 1.36745)),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"PYG\", String.format(\"%.8f\", 7021.960982 / 1.36745)),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"QAR\", String.format(\"%.8f\", 3.641012 / 1.36745)),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"RON\", String.format(\"%.8f\", 4.1788 / 1.36745)),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"RSD\", String.format(\"%.8f\", 100.824992 / 1.36745)),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"RUB\", String.format(\"%.8f\", 78.975402 / 1.36745)),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"RWF\", String.format(\"%.8f\", 970 / 1.36745)),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SAR\", String.format(\"%.8f\", 3.750324 / 1.36745)),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SBD\", String.format(\"%.8f\", 8.101947 / 1.36745)),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SCR\", String.format(\"%.8f\", 19.324765 / 1.36745)),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SDG\", String.format(\"%.8f\", 55.275018 / 1.36745)),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SEK\", String.format(\"%.8f\", 8.92047 / 1.36745)),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SGD\", String.format(\"%.8f\", 1.36745 / 1.36745)),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SHP\", String.format(\"%.8f\", 0.77446 / 1.36745)),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SLL\", String.format(\"%.8f\", 9929.999973 / 1.36745)),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SOS\", String.format(\"%.8f\", 583.000258 / 1.36745)),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SRD\", String.format(\"%.8f\", 14.153991 / 1.36745)),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"STD\", String.format(\"%.8f\", 21031.906016 / 1.36745)),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SVC\", String.format(\"%.8f\", 8.749365 / 1.36745)),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SYP\", String.format(\"%.8f\", 512.61336 / 1.36745)),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"SZL\", String.format(\"%.8f\", 16.379817 / 1.36745)),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"THB\", String.format(\"%.8f\", 31.239631 / 1.36745)),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TJS\", String.format(\"%.8f\", 10.334089 / 1.36745)),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TMT\", String.format(\"%.8f\", 3.5 / 1.36745)),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TND\", String.format(\"%.8f\", 2.776498 / 1.36745)),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TOP\", String.format(\"%.8f\", 2.323499 / 1.36745)),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TRY\", String.format(\"%.8f\", 8.285205 / 1.36745)),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TTD\", String.format(\"%.8f\", 6.798891 / 1.36745)),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TWD\", String.format(\"%.8f\", 28.624983 / 1.36745)),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"TZS\", String.format(\"%.8f\", 2318.825008 / 1.36745)),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"UAH\", String.format(\"%.8f\", 28.443894 / 1.36745)),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"UGX\", String.format(\"%.8f\", 3739.731821 / 1.36745)),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"USD\", String.format(\"%.8f\", 1 / 1.36745)),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"UYU\", String.format(\"%.8f\", 42.701957 / 1.36745)),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"UZS\", String.format(\"%.8f\", 10364.00049 / 1.36745)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"VEF\", String.format(\"%.8f\", 9.987499 / 1.36745)),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"VND\", String.format(\"%.8f\", 23180 / 1.36745)),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"VUV\", String.format(\"%.8f\", 114.23611 / 1.36745)),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"WST\", String.format(\"%.8f\", 2.630378 / 1.36745)),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"XAF\", String.format(\"%.8f\", 560.409912 / 1.36745)),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"XAG\", String.format(\"%.8f\", 0.042658 / 1.36745)),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"XAU\", String.format(\"%.8f\", 0.000535 / 1.36745)),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"XCD\", String.format(\"%.8f\", 2.70255 / 1.36745)),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"XDR\", String.format(\"%.8f\", 0.707564 / 1.36745)),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"XOF\", String.format(\"%.8f\", 554.498872 / 1.36745)),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"XPF\", String.format(\"%.8f\", 102.649882 / 1.36745)),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"YER\", String.format(\"%.8f\", 250.349783 / 1.36745)),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ZAR\", String.format(\"%.8f\", 16.386983 / 1.36745)),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ZMK\", String.format(\"%.8f\", 9001.201691 / 1.36745)),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ZMW\", String.format(\"%.8f\", 20.554898 / 1.36745)),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                new CurrencyExchangeRate(\"ZWL\", String.format(\"%.8f\", 321.999941 / 1.36745)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        tableView.setItems(list);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        tableView.getColumns().addAll(currency, exchangeRate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Shows the currency exchange rate table window."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        constructTable();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        logger.fine(\"Showing command currency exchange rates!\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        url.putString(URL);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 123,
      "-": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        amount.setText(String.format(\"%s %s\", expense.getAmount(), expense.getCurrency()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        date.setText(expense.getDate().date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        category.setText(\"Category: \" + expense.getCategory().categoryName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        description.setText(\"Description: \" + expense.getDescription().value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 2,
      "yuming7144": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Creates a {@code ExpenseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "yuming7144": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpCommandWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.CommandList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class HelpCommandWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private static final String FXML \u003d \"HelpCommandWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableView\u003cCommandList\u003e tableView \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HelpCommandWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn command \u003d new TableColumn(\"command\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn commandUsage \u003d new TableColumn(\"usage\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn commandFormat \u003d new TableColumn(\"format\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn commandExample \u003d new TableColumn(\"example\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private ObservableList\u003cCommandList\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Label helpCommandWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates a new SupportedCurrencyTable."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param root Stage to use as the root of the StatisticsWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HelpCommandWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        helpCommandWindow.setGraphic(tableView);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        helpCommandWindow.setMinWidth(1100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        helpCommandWindow.setMinHeight(450);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates a new SupportedCurrencyTable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public HelpCommandWindow() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Constructs the supported currency table."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void constructTable() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        command.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"command\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        commandUsage.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"usage\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        commandFormat.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"format\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        commandExample.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"example\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        List\u003cCommandList\u003e listOfCommand \u003d CommandList.getCommandList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfCommand.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            list.add(listOfCommand.get(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        tableView.setItems(list);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        tableView.getColumns().addAll(command, commandUsage, commandFormat, commandExample);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Shows the currency exchange rate table window."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        constructTable();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        logger.fine(\"Showing command currency exchange rates!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w10-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "yuming7144": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private PieChartWindow pieChartWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private CurrencyExchangeTable currencyExchangeTable;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private SupportedCurrencyTable supportedCurrencyTable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private StatisticTable statisticTable;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private HelpCommandWindow helpCommandWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private BudgetPanel budgetPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private StackPane budgetPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        primaryStage.setMinWidth(600);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        pieChartWindow \u003d new PieChartWindow(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        currencyExchangeTable \u003d new CurrencyExchangeTable();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        supportedCurrencyTable \u003d new SupportedCurrencyTable();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        statisticTable \u003d new StatisticTable(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        helpCommandWindow \u003d new HelpCommandWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseListPanelPlaceholder"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                .getChildren()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                .add("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        expenseListPanel"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                                .getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        budgetPanel \u003d new BudgetPanel(logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        budgetPlaceholder.getChildren().add(budgetPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void handleHelpCommandWindow() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (!helpCommandWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            helpCommandWindow \u003d new HelpCommandWindow();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            helpCommandWindow.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            helpCommandWindow \u003d new HelpCommandWindow();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            helpCommandWindow.focus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void showCurrencyExchangeRateTable() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (!currencyExchangeTable.isShowing()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            currencyExchangeTable \u003d new CurrencyExchangeTable();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            currencyExchangeTable.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            currencyExchangeTable \u003d new CurrencyExchangeTable();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            currencyExchangeTable.focus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the Supported Currency Table or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showSupportedCurrencyTable() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!supportedCurrencyTable.isShowing()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            supportedCurrencyTable \u003d new SupportedCurrencyTable();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            supportedCurrencyTable.show();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            supportedCurrencyTable \u003d new SupportedCurrencyTable();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            supportedCurrencyTable.focus();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Opens the Pie chart window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void handleStatistics() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (!pieChartWindow.isShowing()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            pieChartWindow.show();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            pieChartWindow.focus();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Opens the Statistic Table or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void handleStatisticTable() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (!statisticTable.isShowing()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            statisticTable \u003d new StatisticTable(logic);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            statisticTable.show();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            statisticTable \u003d new StatisticTable(logic);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            statisticTable.focus();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public BudgetPanel getBudgetPanel() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return budgetPanel;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            budgetPanel.update();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                handleHelpCommandWindow();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            if (commandResult.isShowStatistics()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                handleStatistics();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            if (commandResult.isShowStatisticTable()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                System.out.println(\"show\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                handleStatisticTable();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowCurrencies()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                showSupportedCurrencyTable();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowRates()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                showCurrencyExchangeRateTable();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "yyutong": 47,
      "-": 210,
      "yuming7144": 10,
      "BILLXYR": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PieChartWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class PieChartWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String MESSAGE \u003d \"Statistics is shown on the left\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final PieChart PIECHART \u003d new PieChart();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PieChartWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private static final String FXML \u003d \"PieChartWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private static boolean hasStats \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Label statistics;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Creates a new StatisticsWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param root Stage to use as the root of the StatisticsWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public PieChartWindow(Stage root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        statistics.setGraphicTextGap(20.0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        statistics.setGraphic(PIECHART);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        //statistics.setGraphic(tableView);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Creates a new PieChartWindow."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public PieChartWindow() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Constructs a pie chart window object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @param logic Takes in a logic object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public PieChartWindow(Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        hasStats \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void setStats() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        if (hasStats) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            Statistics data \u003d logic.getExpenseBook().getStatistics();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            list \u003d data.getCategoryAmountPercenatgePieCharStatistics();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            PIECHART.setData(list);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            PIECHART.setLegendSide(Side.LEFT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            PIECHART.setTitle(\"Statistics of Expense Book\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            PIECHART.setClockwise(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            PIECHART.setLabelsVisible(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.setStats();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        logger.fine(\"Showing statistics page about the application.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 128,
      "-": 1,
      "BILLXYR": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.StatisticSummary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class StatisticTable extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private static final String FXML \u003d \"StatisticTable.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private static boolean hasStats \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableView\u003cStatisticSummary\u003e tableView \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticTable.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn category \u003d new TableColumn(\"Category\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn numberOfExpense \u003d new TableColumn(\"Number of Expenses\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn percentage \u003d new TableColumn(\"Percentage(%)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private TableColumn totalSpending \u003d new TableColumn(\"Total Spending($)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private ObservableList\u003cStatisticSummary\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Label statisticTable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates a new CurrencyExchangeTable."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param root Stage to use as the root of the StatisticsWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public StatisticTable (Stage root) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        statisticTable.setGraphicTextGap(20.0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        statisticTable.setGraphic(tableView);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        statisticTable.setMinWidth(470);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Constructs a pie chart window object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @param logic Takes in a logic object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public StatisticTable(Logic logic) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        hasStats \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public StatisticTable() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Constructs the exchange rate table."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void constructTable() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        if (hasStats) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            category.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"category\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            numberOfExpense.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"numberOfExpense\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            percentage.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"percentage\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            totalSpending.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"totalSpending\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            List\u003cStatisticSummary\u003e statisticSummaryList \u003d logic.getExpenseBook().getStatisticTable();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            for (int i \u003d 0; i \u003c statisticSummaryList.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                list.add(statisticSummaryList.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            tableView.setItems(list);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            tableView.getColumns().addAll(category, numberOfExpense, percentage, totalSpending);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Shows the currency exchange rate table window."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        constructTable();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        logger.fine(\"Showing brief summary of the spending!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 135
    }
  },
  {
    "path": "src/main/resources/view/BudgetPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003cLabel fx:id\u003d\"budgetAmount\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$budgetAmount\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003cLabel fx:id\u003d\"totalSpending\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$totalSpending\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003cLabel fx:id\u003d\"budgetRemaining\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$budgetRemaining\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yyutong": 31
    }
  },
  {
    "path": "src/main/resources/view/CurrencyExchangeTable.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Exchange Rates\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003cImage url\u003d\"@/images/exchangeRateIcon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"label\" text\u003d\"\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyutong": 26,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: #1A5276;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: derive(#1A5276, 20%);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     -fx-background-color: derive(#1A5276, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     -fx-border-color: derive(#1A5276, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: derive(#1A5276, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: derive(#1A5276, 50%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: derive(#1A5276, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: derive(#1A5276, 20%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: derive(#1A5276, 50%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: #1A5276;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-border-color: #1A5276;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yyutong"
        },
        "content": "#budgetRemaining {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yyutong"
        },
        "content": "#budgetAmount {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yyutong"
        },
        "content": "#totalSpending {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    -fx-background-color: #1A5276;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 26,
      "-": 340
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c!--                \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$amount\" styleClass\u003d\"cell_big_label\" /\u003e--\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 35
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 8
    }
  },
  {
    "path": "src/main/resources/view/ExpenseMainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cVBox fx:id\u003d\"expenseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 60
    }
  },
  {
    "path": "src/main/resources/view/HelpCommandWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help Command Window\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpCommandWindow\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyutong": 1,
      "BILLXYR": 32
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "         title\u003d\"UniSave\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStatistics\" text\u003d\"Pie Chart\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStatisticTable\" text\u003d\"Expenses Summary\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"User Guide\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelpCommandWindow\" text\u003d\"Command Usage Summary\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                   minHeight\u003d\"150\" prefHeight\u003d\"150\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"budgetPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        \u003cVBox fx:id\u003d\"expenseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "          \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyutong": 9,
      "-": 59,
      "yuming7144": 3
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "BILLXYR": 1
    }
  },
  {
    "path": "src/main/resources/view/PieChartWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003cImage url\u003d\"@/images/statistics.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"statistics\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyutong": 33,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/StatisticTable.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Expenses Structure\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        \u003cImage url\u003d\"@/images/statistics.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003cLabel fx:id\u003d\"statisticTable\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yyutong": 1,
      "BILLXYR": 32
    }
  },
  {
    "path": "src/test/data/JsonExpenseBookStorageTest/invalidAndValidExpenseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"amount\" : \"10.00\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"date\" : \"2020-10-27\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"category\" : \"haha\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"description\" : \"hahaha\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"date\" : \"2020-12-31\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"category\" : \"invalid description\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"description\" : \" \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"budget\" : 0.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"dollarSign\" : \"SGD\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 16
    }
  },
  {
    "path": "src/test/data/JsonExpenseBookStorageTest/invalidExpenseExpenseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"date\" : \"2020-10-27\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"category\" : \"haha\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"description\" : \"hahaha\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"budget\" : 0.0,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"dollarSign\" : \"SGD\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableExpenseBookTest/invalidExpenseExpenseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"date\" : \"2020-10-27\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"category\" : \"haha\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"description\" : \"hahaha\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"budget\" : 0.0,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"dollarSign\" : \"SGD\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableExpenseBookTest/typicalExpenseExpenseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"amount\" : \"60.00\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"date\" : \"2020-10-28\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"category\" : \"clothes\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"description\" : \"bought a jacket at Zara\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"amount\" : \"9.00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"date\" : \"2020-10-29\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"category\" : \"snacks\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"description\" : \"bought chocolate\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"amount\" : \"80.00\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"date\" : \"2020-10-29\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"category\" : \"digital devices\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    \"description\" : \"bought logitech keyboard\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"budget\" : 0.0,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"dollarSign\" : \"SGD\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 23
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"expenseBookFilePath\" : \"expensebook.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "yuming7144": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "  \"expenseBookFilePath\" : \"expensebook.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "yuming7144": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "// * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 42,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_MOVIE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_MOVIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_MOVIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOVIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.MOVIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.storage.JsonExpenseBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Model model \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        JsonExpenseBookStorage expenseBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                new JsonExpenseBookStorage(temporaryFolder.resolve(\"expenseBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        StorageManager storage \u003d new StorageManager(expenseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        JsonExpenseBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionExpenseBook.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        String addCommand \u003d AddExpenseCommand.COMMAND_WORD + \" a/\" + VALID_AMOUNT_MOVIE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                + \" c/\" + VALID_CATEGORY_MOVIE + \" D/\" + VALID_DATE_MOVIE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                + \" d/\" + VALID_DESCRIPTION_MOVIE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(MOVIE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ExpenseModelManager expectedModel \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        //fails"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        //need to edit again later"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        //assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        //dummy assertion to pass checkstyle"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertEquals(1, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager(model.getExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonExpenseBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        public void saveExpenseBook(ReadOnlyExpenseBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 21,
      "-": 123,
      "BILLXYR": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDescriptionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddDescriptionCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class AddDescriptionCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand addDesFirstCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new AddDescriptionCommand(TypicalIndexes.INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        new Description(CommandTestUtil.VALID_DESCRIPTION_BOOKS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand addDesSecondCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new AddDescriptionCommand(TypicalIndexes.INDEX_SECOND_EXPENSE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        new Description(CommandTestUtil.VALID_DESCRIPTION_MOVIE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(addDesFirstCommand.equals(addDesFirstCommand));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand addDesFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new AddDescriptionCommand(TypicalIndexes.INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        new Description(CommandTestUtil.VALID_DESCRIPTION_BOOKS));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(addDesFirstCommand.equals(addDesFirstCommandCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand addDesSecondCommandCopy \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new AddDescriptionCommand(TypicalIndexes.INDEX_SECOND_EXPENSE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        new Description(CommandTestUtil.VALID_DESCRIPTION_MOVIE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(addDesSecondCommand.equals(addDesSecondCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(addDesFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(addDesFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(addDesFirstCommand.equals(addDesSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003e model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand addDesCommand \u003d new AddDescriptionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new Description(CommandTestUtil.VALID_DESCRIPTION_MOVIE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        CommandTestUtil.assertCommandFailure(addDesCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand addDesCommand \u003d new AddDescriptionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new Description(CommandTestUtil.VALID_DESCRIPTION_MOVIE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        CommandTestUtil.assertCommandFailure(addDesCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 77,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.ExchangeRate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddExpenseCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExpenseCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ExpenseBuilder aliceAmountAndCategory \u003d new ExpenseBuilder().withAmount(20.0).withCategory(\"Entertainment\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense alice \u003d aliceAmountAndCategory.withDate(\"1\").withDescription(\"movie\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ExpenseBuilder bobWithAmount \u003d new ExpenseBuilder().withAmount(50.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ExpenseBuilder bobAmountAndCategory \u003d bobWithAmount.withAmount(50.0).withCategory(\"Entertainment\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense bob \u003d bobAmountAndCategory.withDate(\"2\").withDescription(\"hotpot\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        AddExpenseCommand addAliceExpenseCommand \u003d new AddExpenseCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        AddExpenseCommand addBobExpenseCommand \u003d new AddExpenseCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(addAliceExpenseCommand.equals(addAliceExpenseCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        AddExpenseCommand addAliceExpenseCommandCopy \u003d new AddExpenseCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(addAliceExpenseCommand.equals(addAliceExpenseCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(addAliceExpenseCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(addAliceExpenseCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(addAliceExpenseCommand.equals(addBobExpenseCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setExpenseBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBookWithoutSample() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Budget getExpenseBookBudget() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Budget getExpenseBookRemaining() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setExpenseBookBudget(Budget budget) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void setExpenseBookCurrency(Currency dollarSign) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void expenseBookExchange(ExchangeRate exchangeRate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public Currency getExpenseBookCurrency() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public List\u003cCategory\u003e getCategoryLabels() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public int getExpenseSumByCategory(String categoryName) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public int getTotalExpense() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public double getExpenseSum() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return -1.0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public HashMap\u003cString, Double\u003e getExpenseSumCategory() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public HashMap\u003cString, Double\u003e getExpensePercentageCategory() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public double getExpenseSumOfCategory(String categoryName) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return -1.0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void sortByDescendingAmount() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void sortByAscendingAmount() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void sortByDescendingTime() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void sortByAscendingTime() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public double getExpenseBookSpending() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return -1.0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            return new ExpenseBook();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 279
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ClearCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model model \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model model \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expectedModel.setExpenseBook(new ExpenseBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "BILLXYR": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CommandResult}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.ExpenseBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CommandTestUtil}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String INVALID_CATEGORY_1 \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String INVALID_CATEGORY_2 \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String INVALID_DATE_1 \u003d \"-1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String INVALID_DATE_2 \u003d \"$\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String INVALID_DATE_3 \u003d \"1010\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Double VALID_AMOUNT_BOOKS \u003d 20.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Double VALID_AMOUNT_MOVIE \u003d 10.0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VALID_DATE_BOOKS \u003d \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VALID_DATE_MOVIE \u003d \"2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VALID_CATEGORY_BOOKS \u003d \"study\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VALID_CATEGORY_MOVIE \u003d \"entertainment\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOOKS \u003d \"Bought textbook\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String VALID_EMPTY_DATE_BOOKS \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String VALID_EMPTY_DESCRIPTION_BOOKS \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String VALID_DESCRIPTION_MOVIE \u003d \"Watched 1917 on Tuesday\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String AMOUNT_DESC_BOOKS \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BOOKS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String AMOUNT_DESC_MOVIE \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_MOVIE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DATE_DESC_BOOKS \u003d \" \" + PREFIX_DATE + VALID_DATE_BOOKS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DATE_DESC_MOVIE \u003d \" \" + PREFIX_DATE + VALID_DATE_MOVIE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String CATEGORY_DESC_BOOKS \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_BOOKS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String CATEGORY_DESC_MOVIE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_MOVIE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOOKS \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOOKS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DESCRIPTION_DESC_MOVIE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MOVIE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"-1\"; // negative number not allowed in Amount"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            + \"-1\"; // \u0027-1\u0027 negative number not allowed in Date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final ExpenseBuilder BOOKS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final ExpenseBuilder MOVIE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final ExpenseBookBuilder EXPENSE_BOOK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        BOOKS \u003d new ExpenseBuilder().withAmount(VALID_AMOUNT_BOOKS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                .withDate(VALID_DATE_BOOKS).withCategory(VALID_CATEGORY_BOOKS).withDescription(VALID_DESCRIPTION_BOOKS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        MOVIE \u003d new ExpenseBuilder().withAmount(VALID_AMOUNT_MOVIE)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                .withDate(VALID_DATE_MOVIE).withCategory(VALID_CATEGORY_MOVIE).withDescription(VALID_DESCRIPTION_MOVIE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        EXPENSE_BOOK \u003d new ExpenseBookBuilder().withExpense(BOOKS.build()).withExpense(MOVIE.build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ExpenseBook expectedExpenseBook \u003d new ExpenseBook(actualModel.getExpenseBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertEquals(expectedExpenseBook, actualModel.getExpenseBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * {@code model}\u0027s expense book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        final String[] splitName \u003d expense.getCategory().categoryName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        model.updateFilteredExpenseList(new CategoryContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 32,
      "-": 68,
      "BILLXYR": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Model model \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteExpenseCommand deleteCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ExpenseModelManager expectedModel \u003d new ExpenseModelManager(model.getExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense personToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteExpenseCommand deleteCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager(model.getExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expectedModel.deleteExpense(personToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        DeleteExpenseCommand deleteFirstCommand \u003d new DeleteExpenseCommand(TypicalIndexes.INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        DeleteExpenseCommand deleteSecondCommand \u003d new DeleteExpenseCommand(TypicalIndexes.INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        DeleteExpenseCommand deleteFirstCommandCopy \u003d new DeleteExpenseCommand(TypicalIndexes.INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        DeleteExpenseCommand deleteSecondCommandCopy \u003d new DeleteExpenseCommand(TypicalIndexes.INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(deleteSecondCommand.equals(deleteSecondCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003e model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        DeleteExpenseCommand deleteCommand \u003d new DeleteExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        DeleteExpenseCommand deleteCommand \u003d new DeleteExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private void showNoExpense(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 33,
      "-": 59,
      "BILLXYR": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteDescriptionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code DeleteDescriptionCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class DeleteDescriptionCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteDescriptionCommand deleteFirstCommand \u003d new DeleteDescriptionCommand(TypicalIndexes.INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteDescriptionCommand deleteSecondCommand \u003d new DeleteDescriptionCommand("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteDescriptionCommand deleteFirstCommandCopy \u003d new DeleteDescriptionCommand("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteDescriptionCommand deleteSecondCommandCopy \u003d new DeleteDescriptionCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(deleteSecondCommand.equals(deleteSecondCommandCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003e model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteDescriptionCommand deleteDesCommand \u003d new DeleteDescriptionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteDesCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        DeleteDescriptionCommand deleteDesCommand \u003d new DeleteDescriptionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteDesCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOOKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Model model \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.SUCCESSFUL_MESSAGE, editedExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager(new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withAmount(VALID_AMOUNT_BOOKS).withCategory(VALID_CATEGORY_BOOKS).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BOOKS)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                .withCategory(VALID_CATEGORY_BOOKS).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.SUCCESSFUL_MESSAGE, editedExpense);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager(new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, new EditExpenseDescriptor());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.SUCCESSFUL_MESSAGE, editedExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager(new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense personInFilteredList \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense editedPerson \u003d new ExpenseBuilder(personInFilteredList).withAmount(VALID_AMOUNT_BOOKS).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BOOKS).build());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.SUCCESSFUL_MESSAGE, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Model expectedModel \u003d new ExpenseModelManager(new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense firstPerson \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // edit Expense filtered list into a duplicate in Expense book"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense personInList \u003d model.getExpenseBook().getExpenseList().get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                new EditExpenseDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BOOKS).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BOOKS).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "BILLXYR": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExitCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Model model \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Model expectedModel \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 17,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code HelpCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Model model \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Model expectedModel \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SUCCESSFUL_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void execute_help_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(\"WRONG MESSAGE\", true, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandResult actualCommandResult \u003d new HelpCommand().execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(expectedCommandResult.equals(actualCommandResult));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 13,
      "-": 15,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListExpenseByCategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYBOARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SNACKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ListExpenseByCategoryCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByCategoryCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Model model \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Model expectedModel \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new CategoryContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new CategoryContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByCategoryCommand listCategoryFirstCommand \u003d new ListExpenseByCategoryCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByCategoryCommand listCategorySecondCommand \u003d new ListExpenseByCategoryCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(listCategoryFirstCommand.equals(listCategoryFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByCategoryCommand listCategoryFirstCommandCopy \u003d new ListExpenseByCategoryCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(listCategoryFirstCommand.equals(listCategoryFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listCategoryFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listCategoryFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listCategoryFirstCommand.equals(listCategorySecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByCategoryCommand command \u003d new ListExpenseByCategoryCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d preparePredicate(\"CLOTHES snacks digital devices\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByCategoryCommand command \u003d new ListExpenseByCategoryCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(Arrays.asList(CLOTHES, SNACKS, KEYBOARD), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses {@code userInput} into a {@code CategoryContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private CategoryContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new CategoryContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListExpenseByDateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYBOARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SNACKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ListExpenseByDateCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDateCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Model model \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Model expectedModel \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DateContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DateContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDateCommand listDateFirstCommand \u003d new ListExpenseByDateCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDateCommand listDateSecondCommand \u003d new ListExpenseByDateCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(listDateFirstCommand.equals(listDateFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDateCommand listDateFirstCommandCopy \u003d new ListExpenseByDateCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(listDateFirstCommand.equals(listDateFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listDateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listDateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listDateFirstCommand.equals(listDateSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDateCommand command \u003d new ListExpenseByDateCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Date firstDate \u003d new Date(\"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Date secondDate \u003d new Date(\"0\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String userInput \u003d firstDate.getDate() + \" \" + secondDate.getDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d preparePredicate(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDateCommand command \u003d new ListExpenseByDateCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(Arrays.asList(CLOTHES, SNACKS, KEYBOARD), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses {@code userInput} into a {@code DateContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private DateContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new DateContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListExpenseByDescCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYBOARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SNACKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DescContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ListExpenseByDescCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDescCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Model model \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Model expectedModel \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DescContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DescContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDescCommand listDescFirstCommand \u003d new ListExpenseByDescCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDescCommand listDescSecondCommand \u003d new ListExpenseByDescCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(listDescFirstCommand.equals(listDescFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDescCommand listDescFirstCommandCopy \u003d new ListExpenseByDescCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(listDescFirstCommand.equals(listDescFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listDescFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listDescFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(listDescFirstCommand.equals(listDescSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDescCommand command \u003d new ListExpenseByDescCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate predicate \u003d preparePredicate(\"jacket chocolate Keyboard\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDescCommand command \u003d new ListExpenseByDescCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(Arrays.asList(CLOTHES, SNACKS, KEYBOARD), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parses {@code userInput} into a {@code DescContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private DescContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new DescContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ListExpenseCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        model \u003d new ExpenseModelManager(getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        expectedModel \u003d new ExpenseModelManager(model.getExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertCommandSuccess(new ListExpenseCommand(), model, ListExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 8,
      "BILLXYR": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortByAmountCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class SortByAmountCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByAmountCommand sortByAmountCommandDescending \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByAmountCommand(\" descending\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByAmountCommand sortByAmountCommandDescendingCopy \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByAmountCommand(\" descending\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByAmountCommand sortByAmountCommandAscending \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByAmountCommand(\" ascending\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByAmountCommand sortByAmountCommandAscendingCopy \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByAmountCommand(\" ascending\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByAmountCommandAscending.equals(sortByAmountCommandAscending));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByAmountCommandDescending.equals(sortByAmountCommandDescending));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByAmountCommandAscending.equals(sortByAmountCommandAscendingCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByAmountCommandDescending.equals(sortByAmountCommandDescendingCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(sortByAmountCommandAscending.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(sortByAmountCommandDescending.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(sortByAmountCommandAscending.equals(sortByAmountCommandDescending));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortByTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class SortByTimeCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByTimeCommand sortByTimeCommandDescending \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByTimeCommand(\" descending\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByTimeCommand sortByTimeCommandDescendingCopy \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByTimeCommand(\" descending\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByTimeCommand sortByTimeCommandAscending \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByTimeCommand(\" ascending\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        SortByTimeCommand sortByTimeCommandAscendingCopy \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                new SortByTimeCommand(\" ascending\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByTimeCommandAscending.equals(sortByTimeCommandAscending));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByTimeCommandDescending.equals(sortByTimeCommandDescending));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByTimeCommandAscending.equals(sortByTimeCommandAscendingCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(sortByTimeCommandDescending.equals(sortByTimeCommandDescendingCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(sortByTimeCommandAscending.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(sortByTimeCommandDescending.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(sortByTimeCommandAscending.equals(sortByTimeCommandDescending));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ExpenseModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewExpenseComman}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class ViewExpenseCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(TypicalIndexes.INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ViewCommand viewSecondCommand \u003d new ViewCommand(TypicalIndexes.INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(TypicalIndexes.INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003e model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandTestUtil.assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Model model \u003d new ExpenseModelManager(TypicalExpenses.getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        CommandTestUtil.assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 64,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_MOVIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOOKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_MOVIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOOKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_MOVIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MOVIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOOKS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_MOVIE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOOKS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_MOVIE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOOKS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_MOVIE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOOKS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOVIE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOOKS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOOKSWITHOUTDES;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.MOVIE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense expectedExpense1 \u003d new ExpenseBuilder(BOOKS).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput1 \u003d AMOUNT_DESC_BOOKS + CATEGORY_DESC_BOOKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                + DATE_DESC_BOOKS + DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseSuccess(parser, userInput1, new AddExpenseCommand(expectedExpense1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense expectedExpense2 \u003d new ExpenseBuilder(MOVIE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput2 \u003d AMOUNT_DESC_MOVIE + CATEGORY_DESC_MOVIE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                + DATE_DESC_MOVIE + DESCRIPTION_DESC_MOVIE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseSuccess(parser, userInput2, new AddExpenseCommand(expectedExpense2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense expectedExpense3 \u003d new ExpenseBuilder(BOOKS).withAmount(VALID_AMOUNT_MOVIE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput3 \u003d AMOUNT_DESC_MOVIE + CATEGORY_DESC_BOOKS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                + DATE_DESC_BOOKS + DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseSuccess(parser, userInput3, new AddExpenseCommand(expectedExpense3));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void parse_optionalFieldsMissing_success() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense expectedExpense1 \u003d new ExpenseBuilder(BOOKSWITHOUTDES).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput1 \u003d AMOUNT_DESC_BOOKS + CATEGORY_DESC_BOOKS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                + DATE_DESC_BOOKS + \" d/\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseSuccess(parser, userInput1, new AddExpenseCommand(expectedExpense1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput1 \u003d CATEGORY_DESC_BOOKS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                + DATE_DESC_BOOKS + DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // missing Amount prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseFailure(parser, userInput1, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput2 \u003d AMOUNT_DESC_MOVIE + DATE_DESC_MOVIE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                + DESCRIPTION_DESC_MOVIE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // missing Category prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseFailure(parser, userInput2, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput3 \u003d DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // missing Both Category and Amount prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseFailure(parser, userInput3,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        //invalid date test not working"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        //change to category.message_constraints to pass checkstyle"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        //remember to change later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput1 \u003d AMOUNT_DESC_BOOKS + CATEGORY_DESC_MOVIE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" t/\" + INVALID_DATE_1 + DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, userInput1, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput2 \u003d AMOUNT_DESC_BOOKS + CATEGORY_DESC_BOOKS"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" t/\" + INVALID_DATE_2 + DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, userInput2, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        //String userInput3 \u003d \" a/\" + VALID_AMOUNT_BOOKS + \" c/\" + VALID_CATEGORY_BOOKS"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        //+ \" D/\" + INVALID_DATE_3 + \" d/\" + VALID_DESCRIPTION_BOOKS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        //assertParseFailure(parser, userInput3, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput4 \u003d AMOUNT_DESC_BOOKS + \" c/\" + INVALID_CATEGORY_1"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" t/\" + VALID_DATE_BOOKS + DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseFailure(parser, userInput4, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        String userInput5 \u003d AMOUNT_DESC_BOOKS + \" c/\" + INVALID_CATEGORY_2"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" t/\" + VALID_DATE_BOOKS + DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertParseFailure(parser, userInput5, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 45,
      "-": 38,
      "BILLXYR": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddDescriptionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.logic.commands.AddDescriptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class AddDescriptionCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private AddDescriptionCommandParser parser \u003d new AddDescriptionCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertParseSuccess(parser, \"1\" + \" d/dummy description\", new AddDescriptionCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new Description(\"dummy description\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertParseFailure(parser, \"d/dummy description\", String.format("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, AddDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertParseFailure(parser, \"a\" + \"d/dummy description\", String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, AddDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddExpenseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_MOVIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOOKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_MOVIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOOKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_MOVIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOOKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MOVIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOOKS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_MOVIE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOOKS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_MOVIE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOOKS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_MOVIE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOOKS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOVIE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import seedu.address.model.expense.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "//import seedu.address.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class AddExpenseCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        ExpenseBuilder aliceAmountAndCategory \u003d new ExpenseBuilder().withAmount(20.0).withCategory(\"study\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        Expense expectedPerson \u003d aliceAmountAndCategory.withDate(\"1\").withDescription(\"Bought textbook\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + AMOUNT_DESC_BOOKS + CATEGORY_DESC_BOOKS + DATE_DESC_BOOKS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                + DESCRIPTION_DESC_BOOKS, new AddExpenseCommand(expectedPerson));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    //public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    //invalid Amount"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    //    assertParseFailure(parser, AMOUNT_DESC_BOOKS + CATEGORY_DESC_BOOKS + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    //            + DESCRIPTION_DESC_BOOKS, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteDescriptionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.DeleteDescriptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class DeleteDescriptionCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private DeleteDescriptionCommandParser parser \u003d new DeleteDescriptionCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteDescriptionCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeleteDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 25,
      "yuming7144": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteExpenseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class DeleteExpenseCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private DeleteExpenseCommandParser parser \u003d new DeleteExpenseCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteExpenseCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOOKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOOKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, VALID_CATEGORY_BOOKS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"-5\" + AMOUNT_DESC_BOOKS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"0\" + AMOUNT_DESC_BOOKS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // invalid amount followed by valid category"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + VALID_CATEGORY_BOOKS, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_BOOKS + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + INVALID_DATE_1 + VALID_CATEGORY_BOOKS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "BILLXYR": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExpenseBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddDescriptionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CurrenciesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RatesCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class ExpenseBookParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final ExpenseBookParser parser \u003d new ExpenseBookParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void parseCommand_description() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        final Description remark \u003d new Description(\"Some remark.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        AddDescriptionCommand command \u003d (AddDescriptionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                AddDescriptionCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_DESCRIPTION + remark.value);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(new AddDescriptionCommand(INDEX_FIRST_EXPENSE, remark), command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        DeleteExpenseCommand command \u003d (DeleteExpenseCommand) parser.parseCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                DeleteExpenseCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertEquals(new DeleteExpenseCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_rates() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RatesCommand.COMMAND_WORD) instanceof RatesCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RatesCommand.COMMAND_WORD + \" 3\") instanceof RatesCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_codes() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(CurrenciesCommand.COMMAND_WORD) instanceof CurrenciesCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(CurrenciesCommand.COMMAND_WORD + \" 3\") instanceof CurrenciesCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD + \" 3\") instanceof ViewCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 34,
      "-": 18,
      "yuming7144": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListExpenseByCategoryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByCategoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByCategoryCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private ListExpenseByCategoryCommandParser parser \u003d new ListExpenseByCategoryCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListExpenseByCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void parse_validArgs_returnsListExpenseByCategoryCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByCategoryCommand expectedListExpenseByCategoryCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new ListExpenseByCategoryCommand(new CategoryContainsKeywordsPredicate(Arrays.asList(\"Food\", \"drink\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseSuccess(parser, \"Food drink\", expectedListExpenseByCategoryCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseSuccess(parser, \" \\n Food \\n \\t drink  \\t\", expectedListExpenseByCategoryCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListExpenseByDateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByDateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDateCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private ListExpenseByDateCommandParser parser \u003d new ListExpenseByDateCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListExpenseByDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void parse_validArgs_returnsListExpenseByDateCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDateCommand expectedListExpenseByDateCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new ListExpenseByDateCommand("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                        new DateContainsKeywordsPredicate(Arrays.asList(\"2011-11-11\", \"2022-12-22\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseSuccess(parser, \"2011-11-11 2022-12-22\", expectedListExpenseByDateCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseSuccess(parser, \" \\n 2011-11-11 \\n \\t 2022-12-22  \\t\", expectedListExpenseByDateCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListExpenseByDescCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.logic.commands.ListExpenseByDescCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.model.expense.DescContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class ListExpenseByDescCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private ListExpenseByDescCommandParser parser \u003d new ListExpenseByDescCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListExpenseByDescCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void parse_validArgs_returnsListExpenseByDescCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ListExpenseByDescCommand expectedListExpenseByDescCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new ListExpenseByDescCommand(new DescContainsKeywordsPredicate(Arrays.asList(\"mcd\", \"kfc\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseSuccess(parser, \"mcd kfc\", expectedListExpenseByDescCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertParseSuccess(parser, \" \\n mcd \\n \\t kfc  \\t\", expectedListExpenseByDescCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExpenseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.StatisticSummary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class ExpenseBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private final ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(Collections.emptyList(), expenseBook.getExpenseList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBook newData \u003d getTypicalExpenseBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(newData, expenseBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseBook.hasExpense(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void hasExpense_expenseNotInExpenseBook_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(expenseBook.hasExpense(CLOTHES));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void hasExpense_expenseInExpenseBook_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        expenseBook.addExpense(CLOTHES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(expenseBook.hasExpense(CLOTHES));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expenseBook.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * A stub ReadOnlyExpenseBook whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static class ExpenseBookStub implements ReadOnlyExpenseBook {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBookStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        public Currency getCurrency() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return new Currency(\"SGD\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            return new Budget(1000);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public double totalSpending() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new Statistics(new HashMap\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        public void updateStatistics() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public void updateStatisticSummary(){}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        public List\u003cStatisticSummary\u003e getStatisticTable() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        public Budget getRemainingBudget() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            return new Budget(10.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 14,
      "-": 7,
      "yuming7144": 87,
      "BILLXYR": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExpenseModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SNACKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.testutil.ExpenseBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class ExpenseModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private ExpenseModelManager modelManager \u003d new ExpenseModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(new ExpenseBook(), new ExpenseBook(modelManager.getExpenseBook()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        userPrefs.setExpenseBookFilePath(Paths.get(\"expense/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        userPrefs.setExpenseBookFilePath(Paths.get(\"new/expense/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpenseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExpenseBookFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void setExpenseBookFilePath_validPath_setsExpenseBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Path path \u003d Paths.get(\"expense/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        modelManager.setExpenseBookFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(path, modelManager.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void hasExpense_expenseNotInExpenseBook_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(modelManager.hasExpense(CLOTHES));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void hasExpense_expenseInExpenseBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        modelManager.addExpense(CLOTHES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(modelManager.hasExpense(CLOTHES));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBookBuilder().withExpense(CLOTHES).withExpense(SNACKS).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBook differentExpenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        modelManager \u003d new ExpenseModelManager(expenseBook, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseModelManager modelManagerCopy \u003d new ExpenseModelManager(expenseBook, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // different expenseBook -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(modelManager.equals(new ExpenseModelManager(differentExpenseBook, userPrefs)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        differentUserPrefs.setExpenseBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(modelManager.equals(new ExpenseModelManager(expenseBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "yuming7144": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setExpenseBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "yuming7144": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String invalidAmount \u003d \"-10\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(Double.valueOf(invalidAmount)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // null Amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // invalid Amount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(Amount.isValidAmount(-2.0)); // negative value"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(Amount.isValidAmount(0.0)); // spending cannot be zero"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(Amount.isValidAmount(-0.0)); // zero"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // valid Amount"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(Amount.isValidAmount(123.0)); // double"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 29,
      "BILLXYR": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/CategoryContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class CategoryContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new CategoryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new CategoryContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new CategoryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void test_categoryContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new CategoryContainsKeywordsPredicate(Collections.singletonList(\"Food\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"Food drink\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Food\", \"drink\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"Food drink\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Food\", \"drink\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"Food drinks\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"FoOd\", \"drINk\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"Food drink\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void test_categoryDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new CategoryContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"Food\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Food\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"Entertainment\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Keywords match desc but does not match category"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"mcd\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"Food\").withDescription(\"mcd\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "class CategoryTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void constructor_invalidCategory_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String invalidCategory \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategory));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(Category.isValidCategory(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(Category.isValidCategory(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"FoodBeverage\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"FOODBEVERAGE\")); // all capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"entertainment\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(Category.isValidCategory(\"ENTERTAINMENT\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 1,
      "tanwayne890": 37,
      "yuming7144": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DateContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DateContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DateContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DateContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DateContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void test_dateContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // One keyword (case sensitive)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DateContainsKeywordsPredicate(Collections.singletonList(new Date(\"0\").getDate()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDate(\"0\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void test_dateDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DateContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDate(\"1\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new DateContainsKeywordsPredicate(Arrays.asList(new Date(\"0\").getDate()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDate(\"1\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Keywords match desc and category but does not match date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new DateContainsKeywordsPredicate(Arrays.asList(\"mcd\", \"Food\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"Food\").withDescription(\"mcd\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                .withDate(\"1\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String invalidDate \u003d \"-10\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // invalid Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-13-22\")); // wrong month"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-12-32\")); // wrong date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-09-31\")); // 30 days in September"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-12\")); // not in YYYY-MM-DD format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertFalse(Date.isValidDate(\"124293842\")); // Date too large"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(Date.isValidDate(\"1\")); // exactly 1 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(Date.isValidDate(\"2020-09-30\")); // in YYYY-MM-DD format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertTrue(Date.isValidDate(\"3650\")); // boundary value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 34,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DescContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DescContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DescContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DescContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DescContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void test_descContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DescContainsKeywordsPredicate(Collections.singletonList(\"mcd\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"mcd\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new DescContainsKeywordsPredicate(Arrays.asList(\"mcd\", \"kfc\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"mcd kfc\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new DescContainsKeywordsPredicate(Arrays.asList(\"mcd\", \"burgerking\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"mcd\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new DescContainsKeywordsPredicate(Arrays.asList(\"McD\", \"kFc\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"mcd kfc\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void test_descDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DescContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                new DescContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"mcd\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new DescContainsKeywordsPredicate(Arrays.asList(\"mcd\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"kfc\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // Keywords match category but does not match desc"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        predicate \u003d new DescContainsKeywordsPredicate(Arrays.asList(\"food\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"food\").withDescription(\"mcd\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String invalidDescription \u003d \" \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(Description.isValidDescription(\"bought jacket at Zara\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Bought logitech keyboard\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertTrue(Description.isValidDescription(\"shopped at capital city\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Amount buyBookExpense \u003d new Amount(10.0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Category buyBookCategory \u003d new Category(\"study\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Date buyBookDate \u003d new Date(\"2\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Description buyBookDescription \u003d new Description(\"bought book at coop\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense buyBook \u003d new Expense(buyBookExpense, buyBookDate,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                buyBookCategory, buyBookDescription);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Amount buyFoodExpense \u003d new Amount(10.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Category buyFoodCategory \u003d new Category(\"food\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Date buyFoodDate \u003d new Date(\"2\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Description buyFoodDescription \u003d new Description(\"bought sushi for dinner\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Expense buyFood \u003d new Expense(buyFoodExpense, buyFoodDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                buyFoodCategory, buyFoodDescription);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(buyBook.isSameExpense(buyBook));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertTrue(buyFood.isSameExpense(buyFood));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(buyBook.isSameExpense(buyFood));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(buyFood.isSameExpense(buyBook));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(buyFood.isSameExpense(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertFalse(buyBook.isSameExpense(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public void isValidExpense() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Amount buyBookExpense \u003d new Amount(10.0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Category buyBookCategory \u003d new Category(\"study\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Description buyBookDescription \u003d new Description(\"bought book at coop\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expense(buyBookExpense, null,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                buyBookCategory, buyBookDescription));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Category buyFoodCategory \u003d new Category(\"food\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Date buyFoodDate \u003d new Date(\"2\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Description buyFoodDescription \u003d new Description(\"bought sushi for dinner\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expense(null, buyFoodDate,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                buyFoodCategory, buyFoodDescription));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Amount movieExpense \u003d new Amount(10.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Date movieDate \u003d new Date(\"1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        Description movieDescription \u003d new Description(\"watch 1917\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expense(movieExpense, movieDate,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                null, movieDescription));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expense(null, null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yyutong"
        },
        "content": "                null, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 70,
      "yuming7144": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/StatisticSummaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class StatisticSummaryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"-10.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"FOOD-BEVERAGE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String INVALID_DATE_DECIMAL \u003d \"1.5\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String INVALID_DATE_NEGATIVE \u003d \"1.5\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-09-32\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String VALID_AMOUNT \u003d String.format(\"%.2f\", CLOTHES.getAmount().value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String VALID_CURRENCY \u003d CLOTHES.getCurrency().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String VALID_CATEGORY \u003d CLOTHES.getCategory().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String VALID_DATE \u003d CLOTHES.getDate().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d CLOTHES.getDescription().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(CLOTHES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(CLOTHES, expense.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(INVALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_CATEGORY, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(null, VALID_CURRENCY, VALID_DATE, VALID_CATEGORY, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(VALID_AMOUNT, VALID_CURRENCY, INVALID_DATE, VALID_CATEGORY, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expense::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_invalidDateDecimal_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(VALID_AMOUNT, VALID_CURRENCY, INVALID_DATE_DECIMAL,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        VALID_CATEGORY, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expense::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_invalidDateNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(VALID_AMOUNT, VALID_CURRENCY, INVALID_DATE_NEGATIVE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                        VALID_CATEGORY, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expense::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_nullCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, null, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, INVALID_CATEGORY, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String expectedMessage \u003d Category.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_CATEGORY, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                new JsonAdaptedExpense(VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_CATEGORY, INVALID_DESCRIPTION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "yuming7144": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonExpenseBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SNACKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "class JsonExpenseBookStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonExpenseBookStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void readExpenseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExpenseBook(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private java.util.Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new JsonExpenseBookStorage(Paths.get(filePath)).readExpenseBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertFalse(readExpenseBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseBook(\"notJsonFormatExpenseBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void readExpenseBook_invalidExpenseExpenseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseBook(\"invalidExpenseExpenseBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void readExpenseBook_invalidAndValidExpenseExpenseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseBook(\"invalidAndValidExpenseBook.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void readAndSaveExpenseBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExpenseBook.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBook original \u003d getTypicalExpenseBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonExpenseBookStorage jsonExpenseBookStorage \u003d new JsonExpenseBookStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        jsonExpenseBookStorage.saveExpenseBook(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ReadOnlyExpenseBook readBack \u003d jsonExpenseBookStorage.readExpenseBook(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(original, new ExpenseBook(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        original.removeExpense(CLOTHES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        jsonExpenseBookStorage.saveExpenseBook(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        readBack \u003d jsonExpenseBookStorage.readExpenseBook(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(original, new ExpenseBook(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        original.removeExpense(SNACKS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        jsonExpenseBookStorage.saveExpenseBook(original); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        readBack \u003d jsonExpenseBookStorage.readExpenseBook().get(); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(original, new ExpenseBook(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void saveExpenseBook_nullExpenseBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     * Saves {@code ExpenseBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private void saveExpenseBook(ReadOnlyExpenseBook expenseBook, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            new JsonExpenseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                    .saveExpenseBook(expenseBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void saveExpenseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseBook(new ExpenseBook(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuming7144": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableExpenseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "//import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "//import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "public class JsonSerializableExpenseBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableExpenseBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    //private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpenseExpenseBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    private static final Path INVALID_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseExpenseBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //        JsonSerializableExpenseBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //                JsonSerializableExpenseBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //        ExpenseBook ExpenseBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //        ExpenseBook typicalExpensesExpenseBook \u003d TypicalExpenses.getTypicalExpenseBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //        assertEquals(ExpenseBookFromFile, typicalExpensesExpenseBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonSerializableExpenseBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSES_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "                JsonSerializableExpenseBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuming7144"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 11,
      "yuming7144": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        userPrefs.setExpenseBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "yuming7144": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        JsonExpenseBookStorage addressBookStorage \u003d new JsonExpenseBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void expenseBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ExpenseBook original \u003d getTypicalExpenseBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        storageManager.saveExpenseBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        ReadOnlyExpenseBook retrieved \u003d storageManager.readExpenseBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertEquals(original, new ExpenseBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    public void getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        assertNotNull(storageManager.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "yuming7144": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    private EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.descriptor \u003d new EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setAmount(expense.getAmount());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setCategory(expense.getCategory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setDate(expense.getDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setDescription(expense.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptorBuilder withAmount(Double amount) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BILLXYR": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * A utility class to help with building Expensebook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " *     {@code Expense ab \u003d new ExpenseBookBuilder().withAmount(100).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class ExpenseBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private ExpenseBook expenseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBookBuilder(ExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.expenseBook \u003d expenseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Adds a new {@code Expense} to the {@code ExpenseBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBookBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBook build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 32,
      "BILLXYR": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Double DEFAULT_AMOUNT \u003d 10.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"FOOD\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Bought sushi for dinner\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Creates a {@code ExpenseBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code ExpenseToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        category \u003d expenseToCopy.getCategory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        description \u003d expenseToCopy.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBuilder withAmount(Double amount) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Category} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return new Expense(amount, date, category, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 5,
      "yyutong": 66,
      "BILLXYR": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "// * A utility class for test cases."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuanxing-y"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuanxing-y": 45,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yyutong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOOKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_MOVIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOOKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_MOVIE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOOKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_MOVIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOOKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOVIE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMPTY_DESCRIPTION_BOOKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yyutong"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yyutong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yyutong"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yyutong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yyutong"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Expense CLOTHES \u003d new ExpenseBuilder().withAmount(60.0)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDate(\"1\").withCategory(\"clothes\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDescription(\"bought a jacket at Zara\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Expense SNACKS \u003d new ExpenseBuilder().withAmount(9.0)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDate(\"0\").withCategory(\"snacks\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDescription(\"bought chocolate\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Expense KEYBOARD \u003d new ExpenseBuilder().withAmount(80.0)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDate(\"0\").withCategory(\"digital devices\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDescription(\"bought logitech keyboard\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Expense BOOKS \u003d new ExpenseBuilder().withAmount(VALID_AMOUNT_BOOKS)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDate(VALID_DATE_BOOKS).withCategory(VALID_CATEGORY_BOOKS)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BOOKS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "    public static final Expense BOOKSWITHOUTDES \u003d new ExpenseBuilder().withAmount(VALID_AMOUNT_BOOKS)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            .withDate(VALID_DATE_BOOKS).withCategory(VALID_CATEGORY_BOOKS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            .withDescription(VALID_EMPTY_DESCRIPTION_BOOKS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Expense MOVIE \u003d new ExpenseBuilder().withAmount(VALID_AMOUNT_MOVIE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDate(VALID_DATE_MOVIE).withCategory(VALID_CATEGORY_MOVIE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_MOVIE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BILLXYR"
        },
        "content": "     * Returns an {@code expenseBook} with all the typical expense."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yyutong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static ExpenseBook getTypicalExpenseBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yyutong"
        },
        "content": "            expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yyutong"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yyutong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuming7144"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CLOTHES, SNACKS, KEYBOARD));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yyutong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 62,
      "BILLXYR": 6,
      "yuming7144": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yyutong"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(500);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yyutong": 3,
      "-": 9
    }
  }
]
