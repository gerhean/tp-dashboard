[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T11-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T11-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "**NUSave** is a brown-field software engineering team project based on the architecture of"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "[AddressBook-Level3](https://github.com/se-edu/addressbook-level3) that aims to provide students staying on"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "campus with a centralised platform to budget, track and manage their expenses."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "## Preview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "* [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "* [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "* For the detailed documentation of this project, see the **[NUSave Product Website](https://ay2021s1-cs2103t-t11-4.github.io/tp/)**."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 16,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    toolVersion \u003d \u00278.35\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "yu-ming-chen": 1,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "### Wen Hao"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "\u003cimg src\u003d\"images/wenhaogoh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "[[github](https://github.com/wenhaogoh)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "* Responsibilities: Database"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "### Yu Ming"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "\u003cimg src\u003d\"images/yu-ming-chen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "[[github](http://github.com/yu-ming-chen)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": "* Responsibilities: Code Quality + Integration"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Ek Chin Hui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "\u003cimg src\u003d\"images/ekchinhui.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "[[github](http://github.com/EkChinHui)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": "* Responsibilities: Database"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sogggy"
        },
        "content": "### Chew Song Yu"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sogggy"
        },
        "content": "\u003cimg src\u003d\"images/sogggy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sogggy"
        },
        "content": "[[github](http://github.com/sogggy)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sogggy"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### David"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sogggy"
        },
        "content": "\u003cimg src\u003d\"images/davidliew9.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "[[github](https://github.com/davidliew9)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Responsibilities: Documentation"
      }
    ],
    "authorContributionMap": {
      "EkChinHui": 2,
      "sogggy": 10,
      "yu-ming-chen": 3,
      "davidliew9": 3,
      "wenhaogoh": 5,
      "-": 31
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidliew9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "- [2. Setting Up](#2-setting-up)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "- [3. Design](#3-design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    * [3.1. Architecture](#31-architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    * [3.2. UI Component](#32-ui-component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    * [3.3. Logic Component](#33-logic-component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    * [3.4. Model Component](#34-model-component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    * [3.5. State Component](#35-state-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    * [3.6. Storage Component](#36-storage-component)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "- [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "- [5. Documentation](#5-documentation)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "- [6. Testing](#6-testing)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "- [7. Dev Ops](#7-dev-ops)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidliew9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "NUSave is a budgeting tool made for **students staying on campus** who want to be able to track and manage their own"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "expenditures with ease. As students, it is common for them to have limited income during their academic years."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "Therefore, it is especially necessary for those living independently to plan their finances prudently to ensure that"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "they do not overspend their tight budget."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidliew9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "A typical student staying on campus has to keep track of: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* daily expenses"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* club finances"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* project budgets"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* administrative fees"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidliew9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "Rather than having multiple documents and spreadsheets to keep track of their budgets, NUSave allows students to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "conveniently manage all their expenditures under one centralised platform."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidliew9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "NUSave implements both **Command Line Interface (CLI)** and **Graphical User Interface (GUI)**."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "In other words, users interact with the application through the command line and the GUI will reflect their actions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidliew9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "Given below is a quick overview of each component:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "**`Main`** has two classes called [`Main`] and [`MainApp`]."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "It has two primary responsibilities:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* At launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The rest of the application consists of five components:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "1. [**`UI`**](#ui-component): Handles the UI of the application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "1. [**`Logic`**](#logic-component): Executes the commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "1. [**`Model`**](#model-component): Holds the data of the application in memory."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "1. [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "1. [**`State`**](#state-componenet): Remembers the current state of the application."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "For each of the five components:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Its API is defined in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Its functionality is exposed using a concrete `{Component Name} Manager` class which implements the corresponding API"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "`interface` mentioned in the previous point."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    - For example, the `Logic` component defines its API in the `Logic.java` interface and exposes its functionality"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "    using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The ***Class Diagram*** given above shows how the five components interact with each other."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The ***Sequence Diagram*** given above shows how the components interact with each other for the scenario where the user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "issues the command `delete 1`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The sections below give more details of each component:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### 3.2. UI Component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "**API**: `Ui.java`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "`StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the `MainWindow` is specified in `MainWindow.fxml`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "**API**: `Logic.java`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "`Logic` uses the `PageParser` class to parse the user command. This results in a `Command` object which is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "executed by the `LogicManager`. The command execution can affect the `Model` (e.g. adding an expenditure). The result of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`. In addition, the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "`CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The ***Sequence Diagram*** given above represents the interactions within the `Logic` component for the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "`execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "**API** : `Model.java`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The `Model`:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Stores the budget data."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Exposes an unmodifiable `ObservableList\u003cExpenditure\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Does not depend on any of the other three components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### 3.5. State Component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "_{To Be Added}_"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### 3.6. Storage Component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "**API** : `Storage.java`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "The `Storage` component:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Can also can save the budget data in json format and read it back."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### Common Classes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "_{To Be Added}_"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## 5. Documentation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## 6. Testing"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## 7. Dev Ops"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* [Dev Ops guide](DevOps.md)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## Appendix"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "**Target User Profile:**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* students staying on campus"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* has a need to manage a significant number of budgets and expenditures"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* prefers using desktop over other platforms"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* types fast and prefers typing to mouse interactions"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* is comfortable using CLI applications"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "**Value Proposition:** "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* manages expenditures faster than a typical mouse/GUI driven application"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* allows users to keep track of their budgets on a centralised platform"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "Priorities: "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* High (must have) - `* * *` "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Medium (nice to have) - `* *`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                | So that I can…​                                                     |"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* * *`  | new user                                   | see a list of available commands | refer to instructions when I forget how to use the application       |"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* * *`  | user                                       | create a budget                | add a new budget that I need                                           |"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* * *`  | user                                       | delete a budget                | remove a budget that I no longer need                                  |"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* * *`  | user                                       | open a budget                  | view the expenditures of a budget                                      |"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* * *`  | user                                       | close a budget                 | return to the main window                                              |"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* * *`  | user                                       | add an expenditure             | add a new expenditure to a budget                                      |"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* * *`  | user                                       | delete an expenditure          | remove an expenditure that I no longer need                            |"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "| `* *`    | user                                       | find an expenditure by name    | locate an expenditure easily                                           |"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "2.  Should be able to hold up to 1000 budgets and expenditures without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks at a fast speed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "* **API**: Application Programming Interface"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "## Appendix: Instructions for manual testing"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "Given below are instructions to test the application manually:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### Launch and Shutdown"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "1. Launching the application"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "   1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "   1. Double-click the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "   Expected: Shows the GUI with a set of sample budgets. The window size may not be optimum."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "   1. Re-launch the application by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "### Deletion"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "1. Deleting a budget"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "   1. Prerequisites: User is in the main page. Multiple budgets are in the list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "      Expected: First budget is deleted from the list. Details of the deleted budget is shown in the status message."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "      Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "davidliew9"
        },
        "content": "      Expected: No budget is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      }
    ],
    "authorContributionMap": {
      "davidliew9": 136,
      "-": 88
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "NUSave is a **desktop app for managing expenditures, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, NUSave can help you manage and track expenses faster than traditional GUI apps.  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "## Table of Contents  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- [Quick Start](#quick-start)   "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- [Features](#features)  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Creating a budget: `create`](#creating-a-budget-create)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Opening a budget: `open`](#opening-a-budget-open)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Closing a budget: `close`](#closing-a-budget-close)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Adding an expenditure: `add`](#adding-an-expenditure-add)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Listing all budgets or expenditures: `list`](#listing-all-budgets-or-expenditures-list)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Locating expenditures by name: `find`](#locating-expenditures-by-name-find)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Deleting a budget or expenditure: `del`](#deleting-a-budget-or-expenditure-del)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Listing available commands: `help`](#listing-available-commands-help)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    * [Exiting the program: `exit`](#exiting-the-program-exit)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- [Command Summary](#command-summary)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "## Quick Start  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer.  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "2. Download the latest `NUSave.jar` from [here](https://github.com/AY2021S1-CS2103T-T11-4/tp/releases).  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "3. Copy the file to the folder you want to use as the *home folder* for your NUSave.  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds.  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "5. Type the command in the command box and press enter to execute it. Some example commands you can try:  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "    - `list`: Lists all budgets.  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `create School Related Expenses`: Adds a budget named School Related Expenses to NUSave.  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `open 1`: Opens the 1st budget (School Related Expenses) shown in the current list.  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `add  Hall Fees 2600`: Adds an expenditure named `Hall Fees` of price $2600 to the budget (School Related Expenses) that is open.  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `del 1`: Deletes the 1st expenditure (Hall Fees) in the list of expenditures.  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `close`: Closes the budget (School Related Expenses) that is open.  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `del 1`: Deletes the 1st budget (School Related Expenses) in the list of budgets.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `help`: Shows the list of commands available for NUSave.  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "   - `exit` : Exits the app.  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "6. Refer to the [features](#features) below for details of each command.  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "---  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "## Features  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Creating a budget: `create`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Creates a budget in NUSave.  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format: `create NAME`  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- This command is only available when no budget is open.  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- Creates a budget with the given `NAME`.  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "     "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `create Daily Expenses`  "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `create School Related Expenses`  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Opening a budget: `open`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Opens a budget in NUSave.  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format: `open INDEX`  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- This command is only available when no budget is open.  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- Opens the budget at the specific `INDEX`.      "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `INDEX` refers to the index number shown in the displayed budgets list.  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- The index **must be a positive integer** e.g. 1, 2, 3, ...  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `open 1`  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Closing a budget: `close`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Closes the budget currently open in NUSave.  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format: `close`  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- This command is only available when a budget is open.  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Adding an expenditure: `add`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Adds an expenditure to the budget that is open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format: `add NAME PRICE`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- This command is only available when a budget is open."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- Adds an expenditure with the given NAME and PRICE to the budget that is open."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- The price **must be a positive integer or double with a maximum of 2 decimal places** e.g. 8, 2.55, 3.4, ..."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- add School Fees 5000"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- add Lunch at Food Court 4 "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Listing all budgets or expenditures: `list`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Shows a list of budgets or expenditures in NUSave.  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format:  `list`  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- If a budget is open, shows a list of all expenditures within the budget.  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- Otherwise, shows a list of all budgets in NUSave.    "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Locating expenditures by name: `find`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Finds expenditures whose names contain any of the given keywords.  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format:  `find KEYWORD`  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- This command is only available when a budget is open.  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- Searches expenditures within the budget that is open.  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `find Breakfast`  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `find Grab`  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Deleting a budget or expenditure: `del`  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Deletes the specific budget or expenditure from NUSave.  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format: `del INDEX`  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- If a budget is open, deletes the expenditure at the specific `INDEX`.  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- Otherwise, deletes the budget at the specific `INDEX`.  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `INDEX` refers to the index number shown in the displayed expenditure/budget list.  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- The index **must be a positive integer** e.g. 1, 2, 3, ...  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "- `del 1`  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "### Listing available commands: `help`  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Shows a list of available commands with descriptions in NUSave.  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "Format:  `help`  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program.  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Format:  `exit`  "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "---  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "## Command Summary  "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "| **Action** | **Format, Examples** |  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|--------|------------------|  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Create (Budget)|`create NAME` \u003cbr\u003ee.g. `create Daily Expenses`|  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Open (Budget)  |`open INDEX`\u003cbr\u003ee.g. `open 1`|  "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Close (Budget) |`close`|  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Add (Expenditure)   |`add NAME PRICE`\u003cbr\u003ee.g. `add Breakfast 10`|  "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Delete              |`del INDEX`\u003cbr\u003ee.g. `del 1`|  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|List                |`list`|  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Find                |`find KEYWORD`\u003cbr\u003ee.g. `find Breakfast`|  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Help                |`help`|  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EkChinHui"
        },
        "content": "|Exit                |`exit`|"
      }
    ],
    "authorContributionMap": {
      "EkChinHui": 106,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.Nusave;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.ReadOnlyNusave;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.storage.JsonNusaveStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.storage.NusaveStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        NusaveStorage nusaveStorage \u003d new JsonNusaveStorage(userPrefs.getNusaveFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        storage \u003d new StorageManager(nusaveStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        Optional\u003cReadOnlyNusave\u003e nusaveOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        ReadOnlyNusave initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            nusaveOptional \u003d storage.readNusave();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            if (!nusaveOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample NUSave.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            initialData \u003d nusaveOptional.orElseGet(SampleDataUtil::getSampleNusave);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty NUSave\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            initialData \u003d new Nusave();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            initialData \u003d new Nusave();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 15,
      "-": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.budgetpageparser.BudgetPageParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.mainpageparser.MainPageParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.Page;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public static final String UNKNOWN_PAGE_ERROR_MESSAGE \u003d \"Could not identify current page.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private final PageParser mainPageParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private final PageParser budgetPageParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.mainPageParser \u003d new MainPageParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.budgetPageParser \u003d new BudgetPageParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        Page currentPage \u003d this.model.getPage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        switch (currentPage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        case MAIN:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            command \u003d mainPageParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        case BUDGET:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            command \u003d budgetPageParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            throw new CommandException(UNKNOWN_PAGE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            storage.saveNusave(model.getNusave());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 23,
      "wenhaogoh": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BudgetPageCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public abstract class BudgetPageCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MainPageCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public abstract class MainPageCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/CloseBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.BudgetPageCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.Page;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.EmptyBudgetIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class CloseBudgetCommand extends BudgetPageCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"close\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    //add budget index for success message (to do String.format)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Closed Budget\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        model.setPage(Page.MAIN);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        model.setBudgetIndex(new EmptyBudgetIndex());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/main/CreateBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "package seedu.address.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.commands.MainPageCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "public class CreateBudgetCommand extends MainPageCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create a Budget. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "            + PREFIX_NAME + \"NAME \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    //add budget index for success message (to do String.format)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Created Budget\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    //need attribute index in constructor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public CreateBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        //generate budget book index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        model.addBudget(budget);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yu-ming-chen": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/main/OpenBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.MainPageCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.Page;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.BudgetIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.BudgetIndexManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class OpenBudgetCommand extends MainPageCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    //add budget index for success message (to do String.format)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened Budget\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    //need attribute index in constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private final BudgetIndex budgetIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public OpenBudgetCommand(BudgetIndex budgetIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.budgetIndex \u003d budgetIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //generate budget book index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        model.setPage(Page.BUDGET);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        model.setBudgetIndex(new BudgetIndexManager(index));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public interface PageParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    Command parseCommand(String commandText) throws ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.budget.BudgetName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public static BudgetName parseBudgetName(String budgetName) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        requireNonNull(budgetName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        String trimmedName \u003d budgetName.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        if (!BudgetName.isValidBudgetName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        return new BudgetName(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yu-ming-chen": 16,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/budgetpageparser/BudgetPageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.parser.budgetpageparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.budget.CloseBudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class BudgetPageParser implements PageParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        case CloseBudgetCommand.COMMAND_WORD: {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            return new CloseBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/budgetpageparser/CloseBudgetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.parser.budgetpageparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.budget.CloseBudgetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class CloseBudgetCommandParser implements Parser\u003cCloseBudgetCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CloseBudgetCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * and returns an CloseBudgetCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public CloseBudgetCommand parse(String args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return new CloseBudgetCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mainpageparser/CreateBudgetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "package seedu.address.logic.parser.mainpageparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.commands.main.CreateBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.budget.BudgetName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "public class CreateBudgetCommandParser implements Parser\u003cCreateBudgetCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenBudgetCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * and returns an OpenBudgetCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public CreateBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        BudgetName budgetName \u003d ParserUtil.parseBudgetName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        Budget budget \u003d new Budget(budgetName, new ArrayList\u003cExpenditure\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        return new CreateBudgetCommand(budget);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yu-ming-chen": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mainpageparser/MainPageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.parser.mainpageparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.logic.commands.main.CreateBudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.main.OpenBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class MainPageParser implements PageParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        case OpenBudgetCommand.COMMAND_WORD: {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            return new OpenBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        case CreateBudgetCommand.COMMAND_WORD: {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "            return new CreateBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 47,
      "yu-ming-chen": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mainpageparser/OpenBudgetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.logic.parser.mainpageparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.commands.main.OpenBudgetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.BudgetIndexManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class OpenBudgetCommandParser implements Parser\u003cOpenBudgetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenBudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * and returns an OpenBudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public OpenBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //        ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //        || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        //Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return new OpenBudgetCommand(new BudgetIndexManager(69));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.Page;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.BudgetIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    ReadOnlyNusave getNusave();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    Page getPage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    Optional\u003cInteger\u003e getBudgetIndex();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    void setPage(Page page);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    void setBudgetIndex(BudgetIndex index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    boolean isMain();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    boolean isBudget();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 15,
      "wenhaogoh": 5,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.Page;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.StateManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.BudgetIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.EmptyBudgetIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final Nusave nusave;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private final StateManager stateManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public ModelManager(ReadOnlyNusave nusave, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireAllNonNull(nusave, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + nusave + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.nusave \u003d new Nusave(nusave);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.stateManager \u003d new StateManager(new EmptyBudgetIndex(), Page.MAIN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this(new Nusave(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Nusave \u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public ReadOnlyNusave getNusave() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return nusave;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        nusave.addBudget(budget);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StateManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public boolean isMain() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return this.stateManager.isMain();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public boolean isBudget() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return this.stateManager.isBudget();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Optional\u003cInteger\u003e getBudgetIndex() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return this.stateManager.getBudgetIndex();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Page getPage() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return this.stateManager.getPage();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public void setBudgetIndex(BudgetIndex index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.stateManager.setBudgetIndex(index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public void setPage(Page page) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.stateManager.setPage(page);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 37,
      "wenhaogoh": 24,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Nusave.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class Nusave implements ReadOnlyNusave {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final List\u003cBudget\u003e budgets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Nusave() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param toBeCopied"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Nusave(ReadOnlyNusave toBeCopied) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private void resetData(ReadOnlyNusave newData) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        setBudgets(newData.getBudgets()); // todo: change to getBudgetsList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            addBudget(budget);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.budgets.add(budget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return null; //todo: for UI team to fix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public List\u003cBudget\u003e getBudgets() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyNusave.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public interface ReadOnlyNusave {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    List\u003cBudget\u003e getBudgets();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private Path nusaveFilePath \u003d Paths.get(\"data\", \"nusave.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Path getNusaveFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return nusaveFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 5,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    private final BudgetName budgetName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private final List\u003cExpenditure\u003e expenditures;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * @param budgetName"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param expenditures"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public Budget(BudgetName budgetName, List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        requireAllNonNull(budgetName, expenditures);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        this.budgetName \u003d budgetName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.expenditures \u003d expenditures;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        return budgetName.value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public List\u003cExpenditure\u003e getExpenditures() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return expenditures;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        expenditures.add(expenditure);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 19,
      "yu-ming-chen": 7,
      "wenhaogoh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/BudgetName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "public class BudgetName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "     * Constructs a {@code BudgetName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param value A valid title."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public BudgetName(String value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        checkArgument(isValidBudgetName(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public static boolean isValidBudgetName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                || (other instanceof seedu.address.model.expenditure.Name // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.address.model.expenditure.Name) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yu-ming-chen": 5,
      "wenhaogoh": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be able to be parsed by LocalDate.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param value A valid date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Date(String value) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        checkArgument(isValidDate(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                || (other instanceof seedu.address.model.expenditure.Date // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.address.model.expenditure.Date) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Expenditure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class Expenditure {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private final Date createdOn;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param price"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param createdOn"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Expenditure(Name name, Price price, Date createdOn, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireAllNonNull(name, price, createdOn, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.createdOn \u003d createdOn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Date getCreatedOn() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return createdOn;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        if (!(other instanceof Expenditure)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sogggy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        Expenditure otherExpenditure \u003d (Expenditure) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return otherExpenditure.getName().equals(getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 42,
      "wenhaogoh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param value A valid name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Name(String value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        checkArgument(isValidName(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                || (other instanceof seedu.address.model.expenditure.Name // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.address.model.expenditure.Name) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Price.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            \"Prices should only contain numbers, and it can have at most 2 decimal places.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(\\\\.[0-9][0-9])?$\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.Nusave;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.ReadOnlyNusave;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.budget.BudgetName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static Budget[] getSampleBudgets() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return new Budget[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "            new Budget(new BudgetName(\"Test BudgetName 1\"), Arrays.asList(getSampleExpenditures())),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "            new Budget(new BudgetName(\"Test BudgetName 2\"), Arrays.asList(getSampleExpenditures()))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static Expenditure[] getSampleExpenditures() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return new Expenditure[]{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            new Expenditure(new Name(\"Shirt\"), new Price(\"85.50\"), new Date(\"2020-10-10\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                            getTagSet(\"Apparel\", \"White\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            new Expenditure(new Name(\"Pants\"), new Price(\"100.50\"), new Date(\"2020-10-10\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                            getTagSet(\"Apparel\", \"Black\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static ReadOnlyNusave getSampleNusave() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        Nusave sampleNusave \u003d new Nusave();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        for (Budget budget : getSampleBudgets()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            sampleNusave.addBudget(budget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return sampleNusave;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yu-ming-chen": 3,
      "wenhaogoh": 23,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/state/Page.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public enum Page {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    MAIN,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    BUDGET"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/state/State.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.BudgetIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public interface State {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    Optional\u003cInteger\u003e getBudgetIndex();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    Page getPage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    boolean isMain();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    boolean isBudget();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    void setPage(Page page);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    void setBudgetIndex(BudgetIndex index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/state/StateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import seedu.address.state.budgetindex.BudgetIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class StateManager implements State {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private BudgetIndex budgetIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private Page currentPage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * Constructs a {@code StateManager} with the given {@code BudgetIndex} and {@code Page}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @param budgetIndex current budget index NUSave is accessed in."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     * @param currentPage current page NUSave is accessed in."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public StateManager(BudgetIndex budgetIndex, Page currentPage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.budgetIndex \u003d budgetIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.currentPage \u003d currentPage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Optional\u003cInteger\u003e getBudgetIndex() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return this.budgetIndex.getBudgetIndex();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Page getPage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return this.currentPage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public boolean isMain() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public boolean isBudget() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public void setPage(Page page) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.currentPage \u003d page;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public void setBudgetIndex(BudgetIndex index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.budgetIndex \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/state/budgetindex/BudgetIndex.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.state.budgetindex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public interface BudgetIndex {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    Optional\u003cInteger\u003e getBudgetIndex();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    void setIndex(int index);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/state/budgetindex/BudgetIndexManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.state.budgetindex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class BudgetIndexManager implements BudgetIndex {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    private int budgetIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public BudgetIndexManager(int budgetIndex) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.budgetIndex \u003d budgetIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        this.budgetIndex \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Optional\u003cInteger\u003e getBudgetIndex() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return Optional.of(this.budgetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/state/budgetindex/EmptyBudgetIndex.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "package seedu.address.state.budgetindex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "public class EmptyBudgetIndex implements BudgetIndex {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    public Optional\u003cInteger\u003e getBudgetIndex() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "import seedu.address.model.budget.BudgetName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    private final String budgetName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final List\u003cJsonAdaptedExpenditure\u003e expenditures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Constructs a {@code JsonSerializableBudget} with the given expenditures."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"bedgetName\") String budgetName,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                             @JsonProperty(\"expenditures\") List\u003cJsonAdaptedExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        this.budgetName \u003d budgetName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.expenditures.addAll(expenditures);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        budgetName \u003d source.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        expenditures.addAll(source.getExpenditures().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                .map(JsonAdaptedExpenditure::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Converts this budget into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yu-ming-chen"
        },
        "content": "        Budget budget \u003d new Budget(new BudgetName(budgetName), new ArrayList\u003cExpenditure\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        for (JsonAdaptedExpenditure jsonAdaptedExpenditure : expenditures) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            Expenditure expenditure \u003d jsonAdaptedExpenditure.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            budget.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yu-ming-chen": 6,
      "wenhaogoh": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpenditure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.expenditure.Price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class JsonAdaptedExpenditure {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expenditure\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final String createdOn;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpenditure} with the given expenditure details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public JsonAdaptedExpenditure(@JsonProperty(\"name\") String name, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                             @JsonProperty(\"createdOn\") String createdOn,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.createdOn \u003d createdOn;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Converts a given {@code Expenditure} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public JsonAdaptedExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        name \u003d expenditure.getName().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        price \u003d expenditure.getPrice().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        createdOn \u003d expenditure.getCreatedOn().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        tags.addAll(expenditure.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Converts this Jackson-friendly adapted expenditure object into the model\u0027s {@code Expenditure} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expenditure."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Expenditure toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        final List\u003cTag\u003e expenditureTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            expenditureTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (createdOn \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (!Date.isValidDate(createdOn)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        final Date modelCreatedOn \u003d new Date(createdOn);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenditureTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return new Expenditure(modelName, modelPrice, modelCreatedOn, modelTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonNusaveStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.ReadOnlyNusave;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class JsonNusaveStorage implements NusaveStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public JsonNusaveStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Path getNusaveFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Optional\u003cReadOnlyNusave\u003e readNusave() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return readNusave(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Optional\u003cReadOnlyNusave\u003e readNusave(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        Optional\u003cJsonSerializableNusave\u003e jsonNusave \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "                filePath, JsonSerializableNusave.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        if (!jsonNusave.isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            return Optional.of(jsonNusave.get().toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public void saveNusave(ReadOnlyNusave nusave) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        saveNusave(nusave, filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public void saveNusave(ReadOnlyNusave nusave, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(nusave);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNusave(nusave), filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableNusave.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.Nusave;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.ReadOnlyNusave;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public class JsonSerializableNusave {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public JsonSerializableNusave(@JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Converts a given {@code ReadOnlyNusave} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNusave}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public JsonSerializableNusave(ReadOnlyNusave source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        //budgets.addAll(source.getBudgetList().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        budgets.addAll(source.getBudgets().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Converts this Nusave into the model\u0027s {@code Nusave} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Nusave toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        Nusave nusave \u003d new Nusave();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "            nusave.addBudget(budget);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return nusave;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NusaveStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.ReadOnlyNusave;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public interface NusaveStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    Path getNusaveFilePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    Optional\u003cReadOnlyNusave\u003e readNusave() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @see #getNusaveFilePath()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    Optional\u003cReadOnlyNusave\u003e readNusave(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * Saves the given {@link ReadOnlyNusave} to the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @param nusave cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    void saveNusave(ReadOnlyNusave nusave) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    void saveNusave(ReadOnlyNusave nusave, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "public interface Storage extends UserPrefsStorage, NusaveStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "import seedu.address.model.ReadOnlyNusave;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    private NusaveStorage nusaveStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public StorageManager(NusaveStorage nusaveStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        this.nusaveStorage \u003d nusaveStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Nusave methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Path getNusaveFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return nusaveStorage.getNusaveFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Optional\u003cReadOnlyNusave\u003e readNusave() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return readNusave(nusaveStorage.getNusaveFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public Optional\u003cReadOnlyNusave\u003e readNusave(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        return nusaveStorage.readNusave(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public void saveNusave(ReadOnlyNusave nusave) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        saveNusave(nusave, nusaveStorage.getNusaveFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "    public void saveNusave(ReadOnlyNusave nusave, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "        nusaveStorage.saveNusave(nusave, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 15,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sogggy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "sogggy": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 24,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public Page getPage() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public Optional\u003cInteger\u003e getBudgetIndex() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void setPage(Page page) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void setBudgetIndex(BudgetIndex index) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public boolean isMain() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public boolean isBudget() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 197,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 17,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 83,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 138,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 56,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 20,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 110,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhaogoh"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhaogoh": 48,
      "-": 5
    }
  }
]
