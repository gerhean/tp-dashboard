[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* This is a desktop application to generate statistics on Covid-19.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * As an application to store Covid-19 data and compute it in various ways"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Generate meaningful representations of Covid-19 data quickly and efficiently."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The project is intended for use by healthcare officials who are required to manage large amounts of Covid-19 related data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * It is **written in OOP fashion** and comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* It is named `VirusTracker` because it is developed to track Covid-19 statistics with the intention of being able to be extended to other pandemics."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* For the detailed documentation of this project, see the **[VirusTracker Product Website](https://ay2021s1-cs2103t-t13-1.github.io/tp/)**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "siangernlow": 9,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 4,
      "-": 72
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "- address_book_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Copyright by GraphicHost - https://pngtree.com/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "- virus_32.png"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "-": 9
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "You can reach us at the email `seer@comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "### Shulong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003cimg src\u003d\"images/dreamerdragon.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/DreamerDragon)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Project Advisor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Qirui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "\u003cimg src\u003d\"images/hhdqirui.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/hhdqirui)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Siang Ern"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003cimg src\u003d\"images/siangernlow.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](http://github.com/siangernlow)] [[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Pin Xian"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "\u003cimg src\u003d\"images/hopinxian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/hopinxian)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "[[portfolio](team/hopinxian.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Han Ming"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003cimg src\u003d\"images/kohhanming.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/KohHanMing)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "DreamerDragon": 1,
      "siangernlow": 11,
      "hhdqirui": 1,
      "-": 42,
      "KohHanMing": 2
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "siangernlow": 1,
      "-": 78
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T13-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagramNew.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* stores a `PersonBook`, `LocationBook` and `VisitBook` for the three types of data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* exposes an unmodifiable `ObservableList` of each type which can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "The `Person`, `Location` and `Visit` components are shown in more detail below."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "![Structure of Person and Location components](images/PersonLocationClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "![Structure of the Visit component](images/VisitClassDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T13-1/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Add person"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "This is a placeholder section for the \"Manage data using CSV files section.\" Please update the link in that section if the header of this"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "section is changed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Add location"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Add visit"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Manage data using CSV files (Siang Ern)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Most data collected by the target user group are likely to be in the form of Excel documents. As such, it is necessary for VirusTracker to include features to import and export data in a way that is compatible with Excel."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "The features are facilitated by the `addFromCsv` and `exportToCsv` commands. They allow VirusTracker to manage data using **Comma-separated values** files which could also be handled by Excel."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Importing data from a CSV file"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "This feature essentially acts as a \"bulk add\" operation. The number of rows in the CSV file corresponds to the **maximum** number of objects that could be added to VirusTracker."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Format:** `addFromCsv FILEPATH l/LIST_TYPE`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `FILEPATH` refers to the absolute path that the file would be located at."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `LIST_TYPE` is the data type that the user is attempting to add. The `addFromCsv` command supports three list types:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    1. [people](#add-person)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    2. [locations](#add-location)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    3. [visits](#add-visit)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Each row in the specified CSV file must follow the format for the add command of the respective type. To find out about the format, you may click the relevant list type above."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "An example of a CSV file that is used to add people is shown below. Notice that column G is not completely filled as the field is optional."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "![SamplePersonCsv](images/ExamplePersonCsv.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The number of columns in the CSV file should correspond to the number of parameters required to create the related object. Information on additional columns **will be disregarded**."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Sequence diagram"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "The sequence diagram below shows how the adding operation works. Certain utility classes have been omitted for readability."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "![AddFromCsvCommandSequenceDiagram](images/AddFromCsvSequenceDiagram.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The above sequence diagram uses the `AddPersonsFromCsvCommand` to handle adding people from CSV files. For locations and visits, replace the command with `AddLocationsFromCsvCommand` and"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "`AddVisitsFromCsvCommand` respectively. The behaviour of the three commands are the same as the above sequence diagram."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Lifelines should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `addFromCsv` command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "![AddFromCsvActivityDiagram](images/AddFromCsvActivityDiagram.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Design considerations:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "The design considerations below highlight alternative ways the command could have been implemented, and provides reasons for the choice of implementation."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "##### Aspect: How are exceptions handled"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "For this aspect, we make a distinction between fatal exceptions and non-fatal exceptions."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Fatal exceptions"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Exceptions that cause the command to be unable to execute further."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * These exceptions include but are not limited to: _missing parameters in CSV file_, _invalid file path, etc._    "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Non-fatal exceptions"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * The command could still continue executing even if this exception occured."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * For example, _duplicate objects in the CSV file._"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * They tend to occur on a row by row basis in the CSV file."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* **Alternative 1:** Stop execution of command only for destructive exceptions."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Pros: User does not need to rerun the command for every exception that occurs."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Cons: Allowing certain exceptions to pass through may result in some bugs further down the line."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* **Alternative 2:** Stop execution for every exception that occurs."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Pros: Ensures correctness of the added objects."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Cons: May lead to worse user experience having to constantly rerun the command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Alternative 1 was chosen as the implementation with considerations from alternative 2."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Upon encountering:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Fatal exception"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * The command stops execution and informs the user of the error."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Non-fatal exception"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * The command continues executing."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * The rows where the exception occurs are recorded."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Upon finishing execution, the user is informed of the success and notified of the erroneous rows."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Rationale**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "As this command handles data from CSV files, it is likely the CSV files would be large (containing more than 10,000 rows)."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Time taken for the `addFromCsv` command to execute is significant."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "As such, the above implementation helps to reduce the need to read the large file repeatedly. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * User can fix the erroneous rows on a new CSV file."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Execution of the command would be faster than if the same large file was executed again."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "This would minimise the impact to user experience as the user would spend less time fixing the errors."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Aspect: Absolute file path"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "The file path the command uses is the absolute path."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The absolute path provides the complete details to locate the CSV file."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Helps to avoid navigation errors that may result from using relative path names."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "By allowing the user to specify the path name, it also gives the user a choice on where to put his CSV files instead of enforcing a particular directory for"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "him to store the files."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Aspect: Reusing list types and the list prefix \u0027l/\u0027"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Concern**: The list types are used for the `list` command, which appear to be unrelated to the `addFromCsv` command."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Rationale**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "This command handles people, locations and visits which corresponded to the list types already implemented for use for the list command."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "By using a format similar to the `list` command, it avoids the need for implementing a possible **data type** parameter which would not have a"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "significant difference from list type."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Furthermore, it allows the user to use a format that they are already comfortable with."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* is a healthcare official involved in the Covid-19 pandemic"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* has a need to generate statistics based on input data of the pandemic"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Value proposition**: produce useful statistics quickly and efficiently"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "(For all user stories below, the **user** is a healthcare official, unless stated otherwise)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of people currently stored in VirusTracker|  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of locations currently stored in VirusTracker|    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of visits currently stored in VirusTracker|    "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user | add location data to a list | generate information about which location needs to be disinfected |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user | delete location data | to keep the locations list up to date|"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user | edit location data | to keep the location information up to date with the latest address or name |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of infected people currently stored in VirusTracker|    "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of quarantined people currently stored in VirusTracker|    "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user with access to visits data from SafeEntry app   | add visit data to a list | generate desired lists and track contacts with the infected cases|"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user with access to the visit list| delete all visits by date | remove all the outdated visits inside the list |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user setting up SafeEntry checkpoints | identify locations with high risk of infection | know which places need these checkpoints the most |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user publishing daily reports | generate daily statistics quickly and easily|                                                         |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user managing infected patient | update people\u0027s infection status | keep the current epidemic situation up to date |"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user managing quarantined people | update people\u0027s quarantine status | be aware of a person\u0027s quarantine status |"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user worried about virus outbreaks | generate locations that infected people have been to | disinfect those locations |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user worried about virus outbreaks | generate people that have been in contact with infected people | quarantine them for safety measures |"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user with data stored in Excel files | import data from Excel files into VirusTracker | avoid typing out the data again |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | export data from VirusTracker into a portable format | use the same data on multiple devices |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "(For all use cases below, the **System** is the `VirusTracker` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC01 - Add a location**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1.  User adds a location."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2.  System adds the new location."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "3.  System displays the updated locations list."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "      "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. System detects error in the entered data."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a1. System prompts user for correct data."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Steps 2a1-2a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC02 - Delete a location**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1.  User identifies a location to be deleted."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2.  System deletes the location."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "3.  System displays the updated locations list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "      "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. System detects that location does not exist."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a1. System prompts user for location to be deleted."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Steps 2a1-2a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC03 - Edit a location**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1.  User edits a location."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2.  System updates the old location with the edited location."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "3.  System displays the updated locations list."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "      "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. System detects error in the entered data."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a1. System prompts user for correct data."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Steps 2a1-2a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC04 - Add a visit**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1.  User chooses to add a visit."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2.  System requests for details of the visit. "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "3.  User enters the required details."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4.  System adds the new visit."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "5.  System displays the updated visits list."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "      "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 3a. System detects error in the entered data."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a1. System prompts user for correct data."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a2. User enters new data.  "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "         "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC05 - Delete visits**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "1. User chooses to clear all the visits up to and before a date."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "2. System requests for details of the targeted date."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3. User enters the required information."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4. System deletes the visits based on the information entered."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "5. System displays the updated visits list.  "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "   "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "      "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "       "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 3a. System detects error in the entered data."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a1. System prompts user for correct data."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a2. User enters new data.  "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "         "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC06 - Update infection status**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1. User provides updated quarantine status of a person."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2. System updates the quarantine status of the person."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "3. System shows the list of people."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. System is unable to find the person specified by the user.     "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a1. System requests for correct details of the person."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a2. User enters the new details.  "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Steps 2a1 - 2a2 are repeated until the person specified by the user exists.  "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* *a. At any time, user choose to cancel the update.  "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC07 - Update quarantine status**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1. User provides updated quarantine status of a person."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2. System updates the quarantine status of the person."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "3. System shows the list of people."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. System is unable to find the person specified by the user.     "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a1. System requests for correct details of the person."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 2a2. User enters the new details.  "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Steps 2a1 - 2a2 are repeated until the person specified by the user exists.  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* *a. At any time, user choose to cancel the update.    "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC08 - View all people**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "1. User requests to list all people."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "2. System shows a list of all people."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2a1. System generates a sample list."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2a2. System shows the sample list."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC09 - View all locations**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "1. User requests to list all locations."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "2. System shows a list of all locations."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2a1. System generates a sample list."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2a2. System shows the sample list."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC10 - View all visits**"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "1. User requests to list all visits."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "2. System shows a list of all visits."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2a1. System generates a sample list."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2a2. System shows the sample list."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC11 - View all infected people**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to list all infected people"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System shows a list of all infected people."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 2b. There are no infected people."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 2b1. Go to 2a."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**UC08 - View all quarantined people**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "1. User requests to list all quarantined people"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "2. System shows a list of all quarantined people."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "* 2b. There are no quarantined people."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    * 2b1. Go to 2a."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "**UC09 - View locations that an infected person has been to**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "1. User requests to list locations that an infected person has been to."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "2. System shows a list of locations that the infected person has been to.  "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 3a. The list is empty."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* 2b. The person is not infected."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* 2c. The system detects invalid user input."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2c1. The system prompts the user to enter valid input."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2c2. User enters new input."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Steps 2c1-2c2 are repeated until the input entered is correct.  "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Use case ends.       "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**UC10 - View people in contact with an infected person**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1. User requests to list people in contact with an infected person."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2. System finds the infected person."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "3. System shows a list of people in contact with an infected person.  "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 3a. The list is empty."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends.   "
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* 2b. The person is not infected."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* 2c. The system detects invalid user input."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2c1. The system prompts the user to enter valid input."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    * 2c2. User enters new input."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Steps 2c1-2c2 are repeated until the input entered is correct.  "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Use case ends.  "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**UC11 - View high-risk locations**"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to list locations with high risk of infection."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System shows a list of locations with high risk.  "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. The location list is empty."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**UC12 - View summary of data**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1. User requests to view statistics of the day."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2. System shows the statistics of the day."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 2a. There is not enough information to produce a certain statistics."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 2a1. System flags that statistic as unavailable."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 2a2. For remaining valid statistics, go to 2. "
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**UC13 - Add data from CSV file**"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to add data from a CSV file."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System requests for information for adding."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3. User enters the information required."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4. System adds the items and informs the user."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 3a. There is an error in the information entered."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a1. System requests for correct information."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a2. User enters new input."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Steps 3a1 - 3a2 are repeated until the information entered is correct.  "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Use case resumes at step 3."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 4a. The system is unable to add certain items in the file."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 4a1. System records the errors and notifies the user."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    System may decide to continue adding items. In that case, return to step 4."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Otherwise, use case ends."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2.  Should be able to hold up to 1000 items for each type of list without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3.  Should be able to switch between different types of data and manipulate them efficiently and quickly."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "5.  Summary of statistics presented should be relevant and useful to the reader."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* **Visits**: A visit event occurs whenever a `Person` enters a `Location`. The `Date` of this visit is also recorded."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 138,
      "DreamerDragon": 22,
      "siangernlow": 249,
      "hhdqirui": 20,
      "-": 335,
      "KohHanMing": 60
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "VirusTracker is a **desktop app for generating statistics for Covid-19, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "VirusTracker can help you generate various statistics on the pandemic quickly and easily with a few simple commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "## **Table of Contents**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Features"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    1. Adding data: `add`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    2. Deleting data: `delete`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    3. Editing data: `edit`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    4. Finding data: `find`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    5. Listing data: `list`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    6. Generating people in contact with an infected person: `generatePeople`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    7. Generating locations an infected person has been to: `generateLocations`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    8. Clearing the current list: `clear`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    9. Viewing help: `help`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    10. Exiting the program: `exit`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Command Summary"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. Download the latest `virustracker.jar` from [here](https://github.com/AY2021S1-CS2103T-T13-4/tp/releases). \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   _Note: VirusTracker is still a work-in-progress and official releases are not available yet._"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`list l/people`** : Lists all people."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a person named `John Doe` to the VirusTracker."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd element shown in the current list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`clear`** : Deletes all entries from VirusTracker."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* **Data** refers collectively to people, locations and visits unless stated otherwise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Adding data: `add`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "To add data to VirusTracker, there are various `add` commands that could be used."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Adding a person"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Adds a person to VirusTracker."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS q/QUARANTINE_STATUS [t/TAG]…​`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 q/true`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 q/false t/criminal`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Adding a visit"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Adds a visit by the person, location of visit and date of visit"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `addVisit PERSON_INDEX LOCATION_INDEX d/DATE`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Visits are used to track close contacts and to detect if infected/quarantined people visit locations they should not."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `PERSON_INDEX` refers to the index of the person as viewed from the most recently displayed people list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `LOCATION_INDEX` refers to the index of the location as viewed from the most recently displayed location list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The indexes **must be positive integers**: 1, 2, 3, …​"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `DATE` refers to the date when the person visited the location"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Adding a location"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Adds a location to VirusTracker."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `addLocation n/NAME a/ADDRESS`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Locations have an address and a name."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The `NAME` of the location is defined by the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The `ADDRESS` of the location is the official Singaporean address of the location."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* No duplicate locations will be allowed in the VirusTracker."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `addLocation n/Vivocity a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `addLocation n/Betsy Crowe\u0027s House a/Newgate Prison`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Deleting data: `delete`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "To delete data from VirusTracker, there are various `delete` commands that could be used."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Deleting a person"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Deletes the specified person from the people list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `delete PERSON_INDEX`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Deletes the person at the specified `PERONS_INDEX`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `PERSON_INDEX` refers to the index of the person as viewed from the most recently displayed people list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `list l/infected` followed by `delete 2` deletes the 2nd infected person in the displayed people list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "#### Deleting a location "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Deletes the specified location from the location list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format: `deleteLocation LOCATION_INDEX`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Deletes the location at the specified `LOCATION_INDEX`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `LOCATION_INDEX` refers to the index of the location as viewed from the most recently displayed location list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `list l/infected` followed by `deleteLocation 2` deletes the 2nd location in the displayed location list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Deleting visits by date"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Deletes all visits before the date"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `deleteVisits d/DATE`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `DATE` refers to a valid date within the visits list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* A `DATE` is valid if **at least one** visit contains the specified date."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* All the visits before and including the date will be removed from the visits list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Editing data: `edit`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "To edit data in VirusTracker, there are various `edit` commands that could be used."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Editing a person"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Edits an existing person in VirusTracker."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `edit PERSON_INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [q/QUARANTINE_STATUS] [t/TAG]…​`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Edits the person at the specified `PERSON_INDEX`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `PERSON_INDEX` refers to the index of the person as viewed from the most recently displayed person list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "#### Editing a location"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Edits an existing location in VirusTracker."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format: `editLocation LOCATION_INDEX [n/NAME] [a/ADDRESS]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Edits the location at the specified `LOCATION_INDEX`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `LOCATION_INDEX` refers to the index of the location as viewed from the most recently displayed location list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "*  `editLocation 1 n/NTU a/Bugis street` Edits the name and address of the 1st location to be `NTU` and `Bugis Street` respectively."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "*  `editLocation 2 n/NUS` Edits the name of the 2nd location to be `NUS`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Finding persons by name: `find`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Listing data: `list`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "There are a variety of `list` commands that list different types of data."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Listing all people "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/people`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Displays the list of all people currently stored in VirusTracker."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "#### Adding a visit "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Adds a visit by the personIndex, locationIndex and date of visit."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Format: `addVisit INDEX INDEX d/DATE`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* The visit is added to the visits list to track close contacts, especially for the infected people."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* First index refers to the Index shown in the people list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* Second index refers to the Index shown in the location list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* Index should be the positive integers within the range of its shown list, otherwise exceptions would be thrown."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* Date refers to the particular date the person has visited the location."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* Date format should follow \"yyyy-MM-dd\", otherwise exceptions would be thrown."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* `addVisit 1 1 d/2020-09-12`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* `addVisit 2 3 d/2020-09-10`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "#### Deleting visits using date "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Deletes all visits before and including the date."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Format: `deleteVisits d/DATE`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* Date format should follow \"yyyy-MM-dd\", otherwise exceptions would be thrown."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* Date corresponds to the dates that exist in the visits list, otherwise it will be invalid."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* All the visits before and including the date will be removed from the visits list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* `deleteVisits d/2020-09-12`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* `deleteVisits d/2020-09-10`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Listing all infected people "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/infected`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Displays the list of all people that are currently infected."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Listing all quarantined people "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/quarantined`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Displays the list of all people currently in quarantine."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Listing all locations"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/locations`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Displays the list of all locations currently stored in VirusTracker."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Listing all visits"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/visits`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Displays the list of all visits currently stored in VirusTracker."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Locations have an address and a name."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Locations are identified by their name."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* No duplicate locations are allowed in the VirusTracker."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `addLocation n/Vivocity a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `addLocation n/Betsy Crowe\u0027s House a/Newgate Prison`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "### Generating all locations visited by a person: `generateLocations`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Shows a list of locations visited by an infected person in the past 2 weeks. "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `listAllLocationsVisited LOCATION_INDEX`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* Locations listed were visited by the infected person of the index given."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* The result given is a filtered list of locations that the person visited in the past 2 weeks."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* This function can be used to identify locations needing to be disinfected after being visited by an infected person."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "### Generating all people in contact with an infected person: `generatePeople`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Shows a list of people who were in contact with an infected person in the past 2 weeks. "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format `listAllPersonsInContact PERSON_INDEX`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* People listed were in contact with the infected person of the index given."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* The result given is a filtered list of people who visited the same locations as that the infected person in the past 2 weeks."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* This function can be used to identify people who need to be quarantined or issued Stay Home Notices."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Listing high risk locations"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "Lists the locations with high risk of Covid infection."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "Format: `list l/high-risk-locations`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "* A location is considered as infected if an infected person visited that location."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "* If number of infected locations are more than 60% of number of total locations, number of high risk locations equals "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "to 40% of number of total locations. Else, number of high risk locations equals to number of infected locations."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "* Let number of high risk locations be `n`. The first `n` number of most infected locations are shown."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "* For example, number of total locations is `10`, number of infected locations is `7`, so the number of high risk "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "locations is `40% * 10 \u003d 4`. The first `4` infected locations from the list of infected locations sorted from highest to "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "lowest risk are displayed."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* If there are less than ten locations that are infected, all locations will"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  be shown."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "#### Listing summary of data"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Shows the general summary of the data in the form of statistics."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/stats`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Data used to generate statistics are the people, locations and visits added into VirusTracker."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Currently, the statistics generated include:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    1. Total number of people, locations and visits"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    2. Total number of people infected/quarantined"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    3. Percentage of people infected/quarantined"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The above provides a brief summary of the pandemic and is subject to extension."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "### Generating all people in contact with an infected person: `generatePeople`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Shows a list of people who where in contact with an infected person in the past 2 weeks. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Format: `generatePeople INDEX`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* People listed were in contact with the infected person of the index given."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* The result given is a filtered list of people who visited the same locations as that the infected person in the past 2 weeks."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* This function can be used to identify people who need to be quarantined or issued Stay Home Notices."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "### Listing all locations visited by a person: `generateLocations`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Shows a list of locations visited by an infected person in the past 2 weeks. "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "Format: `generateLocations INDEX`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* Locations listed were visited by the infected person of the index given."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* The result given is a filtered list of locations that the person visited in the past 2 weeks."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "* This function can be used to identify locations needing to be disinfected after being visited by an infected person."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Clears all entries from VirusTracker."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "VirusTracker data saves in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "### Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS q/QUARANTINE_STATUS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Delete** | `delete PERSON_INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Edit** | `edit PERSON_INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [q/QUARANTINE_STATUS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**List** | `list l/KEYWORD` \u003cbr\u003e e.g., `list l/people`, `list l/stats`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 53,
      "DreamerDragon": 37,
      "siangernlow": 125,
      "hhdqirui": 9,
      "-": 153,
      "KohHanMing": 29
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "title: VirusTracker"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T13-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T13-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**VirusTracker is a desktop application to generate Covid-19 related statistics.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "siangernlow": 5,
      "-": 15
    }
  },
  {
    "path": "docs/team/hopinxian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "title: Ho Pin Xian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "## Project: VirusTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **New Feature**: Added the ability to add locations to VirusTracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  * Justification: This feature allows users to add locations to the VirusTracker. Visits depends on locations. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **New Feature**: Added a quarantine status property to Persons within the VirusTracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "hopinxian": 22
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Simply add the following to [`seedu.address.ui.list.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 393
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.attribute.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.storage.JsonLocationBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.JsonPersonBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.storage.JsonVisitBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.LocationBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.PersonBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.storage.VisitBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing VirusTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBookStorage personBookStorage \u003d new JsonPersonBookStorage(userPrefs.getPersonBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBookStorage locationBookStorage \u003d new JsonLocationBookStorage(userPrefs.getLocationBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBookStorage visitBookStorage \u003d new JsonVisitBookStorage(userPrefs.getVisitBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        storage \u003d new StorageManager(personBookStorage, locationBookStorage, userPrefsStorage, visitBookStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s VirusTracker and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The data from the sample VirusTracker will be used instead if {@code storage}\u0027s VirusTracker is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * or an empty VirusTracker will be used instead if errors occur when reading {@code storage}\u0027s VirusTracker."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cReadOnlyPersonBook\u003e personBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyPersonBook initialPersonData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cReadOnlyLocationBook\u003e locationBookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyLocationBook initialLocationData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Optional\u003cReadOnlyVisitBook\u003e visitBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        ReadOnlyVisitBook initialVisitData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            personBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (personBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PersonBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialPersonData \u003d personBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PersonBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialPersonData \u003d new PersonBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PersonBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialPersonData \u003d new PersonBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationBookOptional \u003d storage.readLocationBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (locationBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample LocationBook\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialLocationData \u003d locationBookOptional.orElseGet(SampleDataUtil::getSampleLocationBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty LocationBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialLocationData \u003d new LocationBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty LocationBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialLocationData \u003d new LocationBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            visitBookOptional \u003d storage.readVisitBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (visitBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample VisitBook\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            initialVisitData \u003d visitBookOptional.orElseGet(SampleDataUtil::getSampleVisitBook);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty VisitBook\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            initialVisitData \u003d new VisitBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty VisitBook\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            initialVisitData \u003d new VisitBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new ModelManager(initialPersonData, initialLocationData, initialVisitData, userPrefs);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty VirusTracker\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.info(\"Starting VirusTracker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping VirusTracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 49,
      "DreamerDragon": 13,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_INVALID_LOCATION_DISPLAYED_INDEX \u003d \"The location index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_ID \u003d \"The person ID provided cannot be found!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_INVALID_LOCATION_ID \u003d \"The location ID provided cannot be found!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Invalid file path. Please enter the \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"absolute path of the file.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_MISSING_DATA_FORMAT \u003d \"Line %d of the CSV file does not \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"specify enough parameters \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"for the specified data type. Please check the CSV file again.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "siangernlow": 5,
      "hhdqirui": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return Integer.toString(zeroBasedIndex + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DreamerDragon": 5,
      "hhdqirui": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/exceptions/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.commons.core.index.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Signals that the operation will result in an invalid index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class InvalidIndexException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public InvalidIndexException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        super(\"Operation would result in invalid index.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the PersonBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see seedu.address.model.Model#getPersonBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ReadOnlyPersonBook getPersonBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the user prefs\u0027 person book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Location Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the LocationBook."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see seedu.address.model.Model#getLocationBook()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ReadOnlyLocationBook getLocationBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of locations */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ObservableList\u003cLocation\u003e getFilteredLocationList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the user prefs\u0027 location book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Visit Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns the VisitBook."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @see seedu.address.model.Model#getVisitBook()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    ReadOnlyVisitBook getVisitBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of visits */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ObservableList\u003cVisit\u003e getFilteredVisitList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns the user prefs\u0027 visit book file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Path getVisitBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 31,
      "DreamerDragon": 13,
      "-": 46,
      "KohHanMing": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.VirusTrackerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final VirusTrackerParser virusTrackerParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        virusTrackerParser \u003d new VirusTrackerParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Command command \u003d virusTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            storage.saveAddressBook(model.getPersonBook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            storage.saveLocationBook(model.getLocationBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            storage.saveVisitBook(model.getVisitBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getPersonBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getPersonBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Location Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getLocationBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getFilteredLocationList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getLocationBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Visit Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public ReadOnlyVisitBook getVisitBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return model.getVisitBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cVisit\u003e getFilteredVisitList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getFilteredVisitList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Path getVisitBookFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return model.getVisitBookFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 34,
      "DreamerDragon": 11,
      "-": 74,
      "KohHanMing": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddFromCsvCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Encapsulates the behaviour of commands which add objects from"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * CSV files."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public abstract class AddFromCsvCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addFromCsv\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reads and adds the data from the specified CSV file \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"to VirusTracker. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"Parameters: FILE_PATH \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + PREFIX_LIST + \"DATA_TYPE\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"FILE_PATH is the absolute file path of the .csv file.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"DATA_TYPE refers to either people, locations or visits.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"The CSV file should have columns corresponding to each parameter required \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"in the respective add functions. Refer to the user guide for more details.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"C:/Users/admin/peopleData.csv l/people\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_DUPLICATES_NOT_ADDED \u003d \"Duplicate %1$s were detected on the \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"following lines:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"%2$s\\n \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"and will not be added.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%d %s successfully added to VirusTracker.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Clears the VirusTracker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"VirusTracker has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.setPersonBook(new PersonBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.setLocationBook(new LocationBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.setVisitBook(new VisitBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 8,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String SWITCH_NONE \u003d \"No switch\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String SWITCH_TO_VIEW_PEOPLE \u003d \"Switch to view people\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String SWITCH_TO_VIEW_LOCATIONS \u003d \"Switch to view locations\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String SWITCH_TO_VIEW_VISITS \u003d \"Switch to view visits\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private final String switchState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String switchState) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.switchState \u003d switchState;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this(feedbackToUser, false, false, SWITCH_NONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 switchState.equals(otherCommandResult.switchState);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String getSwitchState() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return switchState;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 5,
      "-": 68,
      "KohHanMing": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting VirusTracker as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, CommandResult.SWITCH_NONE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 17,
      "KohHanMing": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenerateLocationsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.ModelPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Finds and lists all persons in visit book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GenerateLocationsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generateLocations\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all locations which a person of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"the specified id (case-insensitive) visited and displays them as a list of locations.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"Parameters: PERSONID\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_PERSON_HAS_NO_VISITS \u003d \"This person is not associated with any visits\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_PERSON_IS_NOT_INFECTED \u003d \"This person is not infected\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private final Index personId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public GenerateLocationsCommand(Index personId) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (personId.getZeroBased() \u003e\u003d model.getFilteredPersonList().size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person infectedPerson \u003d model.getFilteredPersonList().get(personId.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!infectedPerson.getInfectionStatus().getStatusAsBoolean()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_IS_NOT_INFECTED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id personIdFromBook \u003d infectedPerson.getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        VisitBook visitsByPerson \u003d model.getInfoHandler().generateVisitsByPerson(personIdFromBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (visitsByPerson.getVisitList().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_HAS_NO_VISITS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cId\u003e locationIds \u003d model.getInfoHandler().generateLocationIdsByVisitBook(visitsByPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        model.updateFilteredLocationList(ModelPredicate.getPredicateShowLocationsById(locationIds));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \"Generated locations for: \" + infectedPerson.getName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                false, false, CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                || (other instanceof GenerateLocationsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u0026\u0026 personId.equals(((GenerateLocationsCommand) other).personId)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 9,
      "DreamerDragon": 1,
      "KohHanMing": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GeneratePeopleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.ModelPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GeneratePeopleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generatePeople\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all people which a person of the specified\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"id (case-insensitive) have been in contact with and displays them as a list of locations.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"Parameters: PERSONID\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_NO_PEOPLE_FOUND \u003d \"There were no people in contact with the given person\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_PERSON_HAS_NO_VISITS \u003d \"This person is not associated with any visits\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_PERSON_IS_NOT_INFECTED \u003d \"This person is not infected\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private final Index personId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public GeneratePeopleCommand(Index personId) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (personId.getZeroBased() \u003e\u003d model.getFilteredPersonList().size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person infectedPerson \u003d model.getFilteredPersonList().get(personId.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!infectedPerson.getInfectionStatus().getStatusAsBoolean()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_IS_NOT_INFECTED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id personIdFromBook \u003d infectedPerson.getId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        VisitBook visitsByPerson \u003d model.getInfoHandler().generateVisitsByPerson(personIdFromBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (visitsByPerson.getVisitList().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_HAS_NO_VISITS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cId\u003e locationIds \u003d model.getInfoHandler().generateLocationIdsByVisitBook(visitsByPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        VisitBook affectedVisits \u003d model.getInfoHandler().generateVisitsByLocationIds(locationIds);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cId\u003e personIds \u003d model.getInfoHandler().generatePersonIdsByVisitBook(affectedVisits, personIdFromBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (personIds.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PEOPLE_FOUND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        model.updateFilteredPersonList(ModelPredicate.getPredicateShowPeopleById(personIds));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \"Generated people for: \" + infectedPerson.getName(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                false, false, CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                || (other instanceof GeneratePeopleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u0026\u0026 personId.equals(((GeneratePeopleCommand) other).personId)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "KohHanMing": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                false, CommandResult.SWITCH_NONE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "KohHanMing": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_INFECTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_LOCATIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_QUARANTINED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_VISITS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.parser.ListType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.model.ModelPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Displays a list which items are the given list type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \": Lists information based on a given type.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            + \"Parameters: l/LIST_TYPE (must be either people, locations, high-risk-locations, visits,\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \" infected or quarantined)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" people\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_PEOPLE \u003d \"Listed all people\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_LOCATIONS \u003d \"Listed all locations\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_VISITS \u003d \"Listed all visits\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_INFECTED \u003d \"Listed all infected people\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_QUARANTINED \u003d \"Listed all quarantined people\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS_STATISTICS \u003d \"Listed the statistics for the day\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static final String MESSAGE_SUCCESS_HIGH_RISK_LOCATIONS \u003d \"Listed high risk locations\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INVALID_LIST_TYPE \u003d \"There is no such list type.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final ListType listType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public ListCommand(ListType listType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_PEOPLE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_PEOPLE, false, false,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_LOCATIONS:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            model.updateFilteredLocationList(PREDICATE_SHOW_ALL_LOCATIONS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_LOCATIONS, false, false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_VISITS:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            model.updateFilteredVisitList(PREDICATE_SHOW_ALL_VISITS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_VISITS, false, false,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case ALL_INFECTED:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_INFECTED, false, false,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case ALL_QUARANTINED:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_QUARANTINED, false, false,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case STATISTICS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            String stats \u003d model.getInfoHandler().getStatistics();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_STATISTICS + \"\\n\" + stats);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case HIGH_RISK_LOCATIONS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            Predicate\u003cLocation\u003e predicateForHighRiskLocations \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                    ModelPredicate.getPredicateForHighRiskLocations(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            model.updateFilteredLocationList(predicateForHighRiskLocations);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_HIGH_RISK_LOCATIONS, false, false,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new CommandException(INVALID_LIST_TYPE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 listType.equals(((ListCommand) other).listType)); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7,
      "siangernlow": 33,
      "hhdqirui": 17,
      "-": 21,
      "KohHanMing": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/location/AddLocationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Adds a location to the virus tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addLocation\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a location to the virus tracker.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Location must have a unique identifier.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_LOCATION_ID + \"ID \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_LOCATION_ID + \"S234F \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_NAME + \"School of Computing \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_ADDRESS + \"NUS School of Computing COM1 13 Computing Dr, 117417 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New location added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOCATION \u003d \"This location already exists in the virus tracker.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Location toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates an AddLocationCommand to add the specified {@code Location}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddLocationCommand(Location location) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        toAdd \u003d location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (model.hasLocation(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.addLocation(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof AddLocationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddLocationCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/location/AddLocationsFromCsvCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandResult.SWITCH_TO_VIEW_LOCATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.AddFromCsvCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddLocationsFromCsvCommand extends AddFromCsvCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String LOCATIONS \u003d \"location(s)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"There are no locations to be added into VirusTracker.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final List\u003cLocation\u003e locationsToAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Creates an AddLocationsFromCsvCommand to add the specified list of {@code Location}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public AddLocationsFromCsvCommand(List\u003cLocation\u003e locationsList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(locationsList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        locationsToAdd \u003d locationsList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (locationsToAdd.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        StringBuilder linesWithDuplicates \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int successfulAdditions \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (int i \u003d 0; i \u003c locationsToAdd.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Location location \u003d locationsToAdd.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // Duplicate location found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (model.hasLocation(location)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                linesWithDuplicates.append(i + 1).append(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            model.addLocation(location);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            successfulAdditions++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String successMessage \u003d createSuccessMessage(successfulAdditions, linesWithDuplicates.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new CommandResult(successMessage, false, false, SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Creates the correct success message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param numOfUniqueAdditions Number of non duplicate locations added to the VirusTracker."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param linesWithDuplicates Line numbers of the duplicate locations."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A success message with number of duplicates detected, if any."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private String createSuccessMessage(int numOfUniqueAdditions, String linesWithDuplicates) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert numOfUniqueAdditions \u003c\u003d locationsToAdd.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        StringBuilder successMessage \u003d new StringBuilder(String.format(MESSAGE_SUCCESS, numOfUniqueAdditions,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                LOCATIONS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // There are duplicates"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (numOfUniqueAdditions \u003c locationsToAdd.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            successMessage.append(String.format(MESSAGE_DUPLICATES_NOT_ADDED, LOCATIONS, linesWithDuplicates));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return successMessage.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                || (other instanceof AddLocationsFromCsvCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 locationsToAdd.equals(((AddLocationsFromCsvCommand) other).locationsToAdd); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/location/DeleteLocationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Deletes a location identified using it\u0027s displayed index from the location book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeleteLocationCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteLocation\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \": Deletes the location identified by the index number used in the displayed location list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Alternatively, user may identify the location by ID.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_LOCATION_ID + \"ID \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_LOCATION_ID + \"L123A \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_DELETE_LOCATION_SUCCESS \u003d \"Deleted Location: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cId\u003e targetId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param targetIndex index of the location to be deleted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DeleteLocationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetIndex \u003d Optional.of(targetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetId \u003d Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param targetId id of the location to be deleted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DeleteLocationCommand(Id targetId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(targetId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetId \u003d Optional.of(targetId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (targetId.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return deleteLocation(targetId.get(), model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } else if (targetIndex.isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return deleteLocation(targetIndex.get(), model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            assert false : \"Delete location command should have either non empty id or index.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private CommandResult deleteLocation(Id id, Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e lastShownList \u003d model.getUnfilteredLocationList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cLocation\u003e locationToDelete \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Location p : lastShownList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                locationToDelete \u003d Optional.of(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (locationToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LOCATION_ID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.deleteLocation(locationToDelete.get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LOCATION_SUCCESS, locationToDelete.get()), false, false,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private CommandResult deleteLocation(Index index, Model model) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e lastShownList \u003d model.getFilteredLocationList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LOCATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location locationToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.deleteLocation(locationToDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LOCATION_SUCCESS, locationToDelete), false, false,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof DeleteLocationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteLocationCommand) other).targetIndex)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 targetId.equals(((DeleteLocationCommand) other).targetId)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/location/EditLocationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_LOCATIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Edits the details of an existing location in the location book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditLocationCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editLocation\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the location identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"by the index number used in the displayed location list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_NAME + \"National University of Singapore \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_ADDRESS + \"21 Lower Kent Ridge Rd, Singapore 119077\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_EDIT_LOCATION_SUCCESS \u003d \"Edited Location: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOCATION \u003d \"This location already exists in the location book.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final EditLocationDescriptor editLocationDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param index of the location in the filtered location list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param editLocationDescriptor details to edit the location with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationCommand(Index index, EditLocationDescriptor editLocationDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(editLocationDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.editLocationDescriptor \u003d new EditLocationDescriptor(editLocationDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e lastShownList \u003d model.getFilteredLocationList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LOCATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location locationToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedLocation \u003d createEditedLocation(locationToEdit, editLocationDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!locationToEdit.isSameLocation(editedLocation) \u0026\u0026 model.hasLocation(editedLocation)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.setLocation(locationToEdit, editedLocation);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.updateFilteredLocationList(PREDICATE_SHOW_ALL_LOCATIONS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LOCATION_SUCCESS, editedLocation), false, false,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates and returns a {@code Location} with the details of {@code locationToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * edited with {@code editLocationDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static Location createEditedLocation(Location locationToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                                                 EditLocationDescriptor editLocationDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assert locationToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Name updatedName \u003d editLocationDescriptor.getName().orElse(locationToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Address updatedAddress \u003d editLocationDescriptor.getAddress().orElse(locationToEdit.getAddress());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id updatedId \u003d locationToEdit.getId();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Location(updatedId, updatedName, updatedAddress);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!(other instanceof EditLocationCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand e \u003d (EditLocationCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 editLocationDescriptor.equals(e.editLocationDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static class EditLocationDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private Id id;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public EditLocationDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public EditLocationDescriptor(EditLocationDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, address);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setId(Id id) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Optional\u003cId\u003e getId() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (!(other instanceof EditLocationDescriptor)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            EditLocationDescriptor e \u003d (EditLocationDescriptor) other;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/AddPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddPersonCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Person must have a unique identifier.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_PERSON_ID + \"ID \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_QUARANTINE_STATUS + \" QUARANTINE_STATUS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + PREFIX_INFECTION + \"INFECTION STATUS \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_PERSON_ID + \"T123A \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_QUARANTINE_STATUS + \"false \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + PREFIX_INFECTION + \"true \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates an AddPersonCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddPersonCommand(Person person) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof AddPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 17,
      "siangernlow": 3,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/AddPersonsFromCsvCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandResult.SWITCH_TO_VIEW_PEOPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.AddFromCsvCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddPersonsFromCsvCommand extends AddFromCsvCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String PERSONS \u003d \"person(s)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"There are no people to be added into VirusTracker.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final List\u003cPerson\u003e peopleToAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Creates an AddPersonsFromCsvCommand to add the specified list of {@code Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public AddPersonsFromCsvCommand(List\u003cPerson\u003e personsList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(personsList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        peopleToAdd \u003d personsList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (peopleToAdd.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        StringBuilder linesWithDuplicates \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int successfulAdditions \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (int i \u003d 0; i \u003c peopleToAdd.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Person person \u003d peopleToAdd.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // Duplicate person found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (model.hasPerson(person)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                linesWithDuplicates.append(i + 1).append(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            model.addPerson(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            successfulAdditions++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String successMessage \u003d createSuccessMessage(successfulAdditions, linesWithDuplicates.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new CommandResult(successMessage, false, false, SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Creates the correct success message."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param numOfUniqueAdditions Number of non duplicate persons added to the VirusTracker."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param linesWithDuplicates Line numbers of the duplicate persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A success message with number of duplicates detected, if any."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private String createSuccessMessage(int numOfUniqueAdditions, String linesWithDuplicates) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert numOfUniqueAdditions \u003c\u003d peopleToAdd.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        StringBuilder successMessage \u003d new StringBuilder("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                String.format(MESSAGE_SUCCESS, numOfUniqueAdditions, PERSONS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // There are duplicates"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (numOfUniqueAdditions \u003c peopleToAdd.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            successMessage.append(String.format(MESSAGE_DUPLICATES_NOT_ADDED, PERSONS, linesWithDuplicates));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return successMessage.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                || (other instanceof AddPersonsFromCsvCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 peopleToAdd.equals(((AddPersonsFromCsvCommand) other).peopleToAdd); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/DeletePersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeletePersonCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Alternatively, user may identify the person by ID.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_PERSON_ID + \"ID \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_PERSON_ID + \"T123A \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cId\u003e targetId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param targetIndex index of the person to be deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DeletePersonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetIndex \u003d Optional.of(targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetId \u003d Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param targetId id of the person to be deleted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DeletePersonCommand(Id targetId) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(targetId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.targetId \u003d Optional.of(targetId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person personToDelete \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (targetId.isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            personToDelete \u003d getPersonToDelete(targetId.get(), model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } else if (targetIndex.isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            personToDelete \u003d getPersonToDelete(targetIndex.get(), model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(personToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete), false, false,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Person getPersonToDelete(Id id, Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getUnfilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cPerson\u003e personToDelete \u003d Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Person p : lastShownList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                personToDelete \u003d Optional.of(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (personToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_ID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personToDelete.get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Person getPersonToDelete(Index index, Model model) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof DeletePersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePersonCommand) other).targetIndex)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 targetId.equals(((DeletePersonCommand) other).targetId)); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 64,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/EditPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditPersonCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"[\" + PREFIX_QUARANTINE_STATUS + \"QUARANTINE STATUS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"[\" + PREFIX_INFECTION + \"INFECTION STATUS] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasSameIdentityExceptId(editedPerson)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), false, false,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus updatedQuarantineStatus \u003d editPersonDescriptor.getQuarantineStatus()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .orElse(personToEdit.getQuarantineStatus());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        InfectionStatus updatedInfectionStatus \u003d editPersonDescriptor.getInfectionStatus()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                                            .orElse(personToEdit.getInfectionStatus());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id updatedId \u003d personToEdit.getId();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Person(updatedId, updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                updatedQuarantineStatus, updatedInfectionStatus, updatedTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!(other instanceof EditPersonCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand e \u003d (EditPersonCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private QuarantineStatus quarantineStatus;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private InfectionStatus infectionStatus;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private Id id;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            setQuarantineStatus(toCopy.quarantineStatus);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            setInfectionStatus(toCopy.infectionStatus);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, quarantineStatus, infectionStatus, tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setQuarantineStatus(QuarantineStatus quarantineStatus) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.quarantineStatus \u003d quarantineStatus;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Optional\u003cQuarantineStatus\u003e getQuarantineStatus() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.ofNullable(quarantineStatus);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void setInfectionStatus(InfectionStatus infectionStatus) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.infectionStatus \u003d infectionStatus;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public Optional\u003cInfectionStatus\u003e getInfectionStatus() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return Optional.ofNullable(infectionStatus);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setId(Id id) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Optional\u003cId\u003e getId() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    \u0026\u0026 getQuarantineStatus().equals(e.getQuarantineStatus())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    \u0026\u0026 getInfectionStatus().equals(e.getInfectionStatus())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 38,
      "siangernlow": 16,
      "hhdqirui": 9,
      "-": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/FindPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class FindPersonCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public FindPersonCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                false, false, CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof FindPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPersonCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 9,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/AddVisitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Adds the new visit to the visit list by visit details (personId, locationId and date)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class AddVisitCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addVisit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New visit added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VISIT \u003d \"This visit already exists in the address book\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_NO_WARNING \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_INFECTED_MADE_VISIT \u003d MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"The following person is infected and \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"may have violated the Stay-Home Notice.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_QUARANTINED_MADE_VISIT \u003d MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"The following person is in quarantine and \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"may have violated the Stay-Home Notice.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_INFECTED_AND_QUARANTINED_MADE_VISIT \u003d MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"The following person is infected and \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"is in quarantine. The Stay-Home Notice may have been violated.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a new visit to the visits list \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"using a person\u0027s index, location\u0027s index and date of visit. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"Updates the existing visits list.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"Indexes are based on the most recently viewed persons and locations list.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"Parameters: PERSON_INDEX LOCATION_INDEX d/DATE\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + \" 2 \" + PREFIX_DATE + \" 2020-05-31 \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cIndex\u003e personIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cIndex\u003e locationIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cId\u003e personId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Optional\u003cId\u003e locationId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Creates an AddVisitCommand to add the specified {@code Visit}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public AddVisitCommand(Index personIndex, Index locationIndex, LocalDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireAllNonNull(personIndex, locationIndex, date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.personIndex \u003d Optional.of(personIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationIndex \u003d Optional.of(locationIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personId \u003d Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationId \u003d Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates an AddVisitCommand to add the specified {@code Visit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddVisitCommand(Id personId, Id locationId, LocalDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(personId, locationId, date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.personId \u003d Optional.of(personId);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationId \u003d Optional.of(locationId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Visit visit \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (personId.isPresent() \u0026\u0026 locationId.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            visit \u003d getVisitToAdd(personId.get(), locationId.get(), model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } else if (personIndex.isPresent() \u0026\u0026 locationIndex.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            visit \u003d getVisitToAdd(personIndex.get(), locationIndex.get(), model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        model.addVisit(visit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String successMessage \u003d getIllegalVisitWarning(visit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new CommandResult(String.format(successMessage, visit), false, false,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Visit getVisitToAdd(Id personId, Id locationId, Model model) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person person \u003d model.getPersonFromId(personId);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d model.getLocationFromId(locationId);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Visit visit \u003d new Visit(person, location, date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (model.hasVisit(visit)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VISIT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return visit;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Visit getVisitToAdd(Index personIndex, Index locationIndex, Model model) throws CommandException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person person \u003d model.getPersonFromIndex(personIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d model.getLocationFromIndex(locationIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Visit visit \u003d new Visit(person, location, date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (model.hasVisit(visit)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VISIT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return visit;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Checks if the person made an illegal visit and returns the appropriate warning."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * An illegal visit occurs when a {@code Person} visits an {@code Address} that is"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * not his own, and he is either infected, in quarantine or both."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param visit The visit to check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A warning string based on whether the visit is illegal or not."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static String getIllegalVisitWarning(Visit visit) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person person \u003d visit.getPerson();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d visit.getLocation();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        boolean isPersonInfected \u003d person.getInfectionStatus().getStatusAsBoolean();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        boolean isPersonQuarantined \u003d person.getQuarantineStatus().getStatusAsBoolean();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (person.getAddress().equals(location.getAddress())) { // Person stayed home"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return MESSAGE_NO_WARNING;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (isPersonInfected \u0026\u0026 isPersonQuarantined) { // Person is infected and in quarantine"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return MESSAGE_INFECTED_AND_QUARANTINED_MADE_VISIT;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } else if (isPersonInfected) { // Person is infected only"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return MESSAGE_INFECTED_MADE_VISIT;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } else if (isPersonQuarantined) { // Person is in quarantine only"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return MESSAGE_QUARANTINED_MADE_VISIT;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } else { // Person is not infected or in quarantine"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return MESSAGE_NO_WARNING;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (!(other instanceof AddVisitCommand)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitCommand e \u003d (AddVisitCommand) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return personIndex.equals(e.personIndex)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 locationIndex.equals(e.locationIndex)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 personId.equals(e.personId)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 locationId.equals(e.locationId)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 date.equals(e.date);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 55,
      "DreamerDragon": 39,
      "siangernlow": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/AddVisitsFromCsvCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandResult.SWITCH_TO_VIEW_VISITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.AddFromCsvCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.DataGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddVisitsFromCsvCommand extends AddFromCsvCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String VISITS \u003d \"visit(s)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"There are no visits to be added into VirusTracker.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final List\u003cDataGenerator.VisitParametersContainer\u003e visitParametersContainersToAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Creates an AddVisitsFromCsvCommand to add the specified list of {@code VisitParametersContainer}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public AddVisitsFromCsvCommand(List\u003cDataGenerator.VisitParametersContainer\u003e visitParametersContainerList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(visitParametersContainerList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        visitParametersContainersToAdd \u003d visitParametersContainerList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (visitParametersContainersToAdd.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        StringBuilder linesWithDuplicates \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int successfulAdditions \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (int i \u003d 0; i \u003c visitParametersContainersToAdd.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            DataGenerator.VisitParametersContainer vpc \u003d visitParametersContainersToAdd.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Person person \u003d model.getPersonFromId(vpc.getPersonIndex());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Location location \u003d model.getLocationFromId(vpc.getLocationIndex());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Visit visit \u003d new Visit(person, location, vpc.getDate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // Duplicate visit found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (model.hasVisit(visit)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                linesWithDuplicates.append(i + 1).append(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            model.addVisit(visit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            successfulAdditions++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String successMessage \u003d createSuccessMessage(successfulAdditions, linesWithDuplicates.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new CommandResult(successMessage, false, false, SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Creates the correct success message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param numOfUniqueAdditions Number of non duplicate visits added to the VirusTracker."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param linesWithDuplicates Line numbers of the duplicate visits."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A success message with number of duplicates detected, if any."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private String createSuccessMessage(int numOfUniqueAdditions, String linesWithDuplicates) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert numOfUniqueAdditions \u003c\u003d visitParametersContainersToAdd.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        StringBuilder successMessage \u003d new StringBuilder(String.format(MESSAGE_SUCCESS, numOfUniqueAdditions, VISITS));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // There are duplicates"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (numOfUniqueAdditions \u003c visitParametersContainersToAdd.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            successMessage.append(String.format(MESSAGE_DUPLICATES_NOT_ADDED, VISITS, linesWithDuplicates));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return successMessage.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                || (other instanceof AddVisitsFromCsvCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 visitParametersContainersToAdd.equals(((AddVisitsFromCsvCommand) other)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .visitParametersContainersToAdd); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "siangernlow": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/DeleteVisitsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Deletes Visits identified using their displayed dates from the visit book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * All the Visits before and including the date parsed will be deleted from the visit book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class DeleteVisitsCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteVisits\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            + \": Deletes the visits before and up to the dates used in the displayed visit list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            + \"Parameters: Date (must be in the format of yyyy-MM-DD)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_DATE + \" 2020-09-09 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MESSAGE_DELETE_VISIT_SUCCESS \u003d \"Deleted Visits: \\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MESSAGE_DELETE_VISIT_FAILED \u003d \"All visits were after the date, hence not deleted.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final LocalDate targetDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public DeleteVisitsCommand(LocalDate targetDate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Deletes Visits identified using their displayed dates from the visit list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns the list of deleted visits using a string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * All the visits that have the date equals or before the parsed date will be removed from the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @param model manages the action of deleting the visits."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @param lastShownList is the list the visit will be removed from."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @param targetDate is the date to be compared with."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public String deleteVisit(Model model, List\u003cVisit\u003e lastShownList, LocalDate targetDate) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // display the visits deleted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        StringBuilder visitsToDelete \u003d new StringBuilder(MESSAGE_DELETE_VISIT_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // count how many visits are deleted and display them in an order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        int order \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        List\u003cVisit\u003e visitsToBeDeleted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        for (Visit visit: lastShownList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            if (visit.getDate().isBefore(targetDate) || visit.getDate().isEqual(targetDate)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                visitsToBeDeleted.add(visit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                visitsToDelete.append(order).append(\". \").append(visit).append(\" \\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                order++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (order \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            for (Visit visit: visitsToBeDeleted) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                model.deleteVisit(visit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (order \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_VISIT_FAILED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            return visitsToDelete.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        List\u003cVisit\u003e lastShownList \u003d model.getFilteredVisitList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String result \u003d deleteVisit(model, lastShownList, targetDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(result, false, false, CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                || (other instanceof DeleteVisitsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 targetDate.equals(((DeleteVisitsCommand) other).targetDate)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 4,
      "DreamerDragon": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddFromCsvCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.AddFromCsvCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationsFromCsvCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonsFromCsvCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitsFromCsvCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Parses input arguments and creates a new AddFromCsvCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * The created object is a child class of the AddFromCsvCommand class,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * handling either adding people, locations or visits depending on the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * input arguments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddFromCsvCommandParser implements Parser\u003cAddFromCsvCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String CSV_FILE_EXTENSION \u003d \".csv\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_EXTENSION \u003d \"Invalid file extension.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \" Ensure that the file has the extension \u0027%1$s\u0027\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_INVALID_DATA_TYPE \u003d \"That data type is not supported by this command.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFromCsvCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * and returns a AddFromCsvCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public AddFromCsvCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isEmpty() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType listType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            listType \u003d ParserUtil.parseListType(argMultimap.getValue(PREFIX_LIST).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATA_TYPE, AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String filepath \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (!checkIfValidCsvExtension(filepath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_EXTENSION, CSV_FILE_EXTENSION));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_PEOPLE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            List\u003cPerson\u003e personsList \u003d DataGenerator.generatePersonsList(filepath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new AddPersonsFromCsvCommand(personsList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_LOCATIONS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            List\u003cLocation\u003e locationsList \u003d DataGenerator.generateLocationsList(filepath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new AddLocationsFromCsvCommand(locationsList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_VISITS:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            List\u003cDataGenerator.VisitParametersContainer\u003e visitParametersContainersList \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    DataGenerator.generateVisitsList(filepath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new AddVisitsFromCsvCommand(visitParametersContainersList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATA_TYPE, AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Checks if the file path has the \".csv\" extension."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param filepath The absolute file path of the file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return true if the specified file is a CSV file, false otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if the filepath is too short to have a csv extension behind it."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private boolean checkIfValidCsvExtension(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int pathLength \u003d filepath.length();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int startIndex \u003d pathLength - CSV_FILE_EXTENSION.length();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int endIndex \u003d pathLength;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (startIndex \u003c 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FILE_EXTENSION, CSV_FILE_EXTENSION));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return filepath.substring(startIndex, endIndex).equals(CSV_FILE_EXTENSION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Prefix PREFIX_QUARANTINE_STATUS \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Prefix PREFIX_INFECTION \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Prefix PREFIX_LIST \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Prefix PREFIX_PERSON_ID \u003d new Prefix(\"idp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Prefix PREFIX_LOCATION_ID \u003d new Prefix(\"idl/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "DreamerDragon": 1,
      "siangernlow": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DataGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_DATA_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Generates objects using data provided in CSV files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class DataGenerator {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Character DEFAULT_SEPARATOR \u003d \u0027,\u0027;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Character DEFAULT_QUOTE \u003d \u0027\"\u0027;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // Minimum number of parameters required to create the object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final int MIN_PERSON_PARAMETERS \u003d 7;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final int MIN_LOCATION_PARAMETERS \u003d 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final int MIN_VISIT_PARAMETERS \u003d 3;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INVALID_ROW_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \"Invalid format detected on line %d. %s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // Prevent instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private DataGenerator() {};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Generates a list of {@code Person} from the given CSV file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param filepath The absolute file path of the CSV file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A list of {@code Person}, one for each line in the CSV file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if there is any formatting error present."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cPerson\u003e generatePersonsList(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Scanner scanner \u003d readFile(filepath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e personsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Used to detect which line had an error"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            List\u003cString\u003e dataValues \u003d generateDataValues(scanner.nextLine());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Person person \u003d generatePerson(dataValues, lineNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            personsList.add(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            lineNumber++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return personsList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Generates a {@code Person} from the given parameters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param dataValues A list containing fields to create a {@code Person}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param lineNumber The current line number of the CSV that we are on. Used for error handling."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A person with the given parameters."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if there are not enough parameters to create a person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static Person generatePerson(List\u003cString\u003e dataValues, int lineNumber) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert MIN_PERSON_PARAMETERS \u003e\u003d 6;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Check if enough parameters; 6 compulsory parameters required for adding a Person"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (dataValues.size() \u003c MIN_PERSON_PARAMETERS) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_DATA_FORMAT, lineNumber));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id id \u003d ParserUtil.parseId(dataValues.get(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Name name \u003d ParserUtil.parseName(dataValues.get(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(dataValues.get(2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(dataValues.get(3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(dataValues.get(4));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            QuarantineStatus quarantineStatus \u003d ParserUtil.parseQuarantineStatus(dataValues.get(5));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            InfectionStatus infectionStatus \u003d ParserUtil.parseInfectionStatus(dataValues.get(6));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (dataValues.size() \u003e MIN_PERSON_PARAMETERS) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                String[] tagsAsString \u003d dataValues.get(7).split(\",\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                tags.addAll(Arrays.asList(tagsAsString));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new Person(id, name, phone, email, address, quarantineStatus, infectionStatus, tagList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(INVALID_ROW_FORMAT, lineNumber, pe.getMessage()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Generates a list of {@code Location} from the given CSV file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param filepath The absolute file path of the CSV file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A list of {@code Location}, one for each line in the CSV file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if there is any formatting error present."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cLocation\u003e generateLocationsList(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Scanner scanner \u003d readFile(filepath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e locationsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Used to detect which line had an error"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            List\u003cString\u003e dataValues \u003d generateDataValues(scanner.nextLine());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Location location \u003d generateLocation(dataValues, lineNumber);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            locationsList.add(location);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            lineNumber++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return locationsList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Generates a {@code Location} from the given parameters."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param dataValues A list containing fields to create a {@code Location}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param lineNumber The current line number of the CSV that we are on. Used for error handling."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A location with the given parameters."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if there are not enough parameters to create a location."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static Location generateLocation(List\u003cString\u003e dataValues, int lineNumber) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert MIN_LOCATION_PARAMETERS \u003e\u003d 2;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Check if enough parameters; 2 compulsory parameters required for adding a Location"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (dataValues.size() \u003c MIN_LOCATION_PARAMETERS) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_DATA_FORMAT, lineNumber));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id id \u003d ParserUtil.parseId(dataValues.get(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Name name \u003d ParserUtil.parseName(dataValues.get(1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(dataValues.get(2));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new Location(id, name, address);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(INVALID_ROW_FORMAT, lineNumber, pe.getMessage()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Generates a list of {@code VisitParametersContainer} from the given CSV file."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * As there is a need to translate from the user input index to the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * actual id of the {@code Person} and {{@code Location}, a container class"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * {@code VisitParameters} is used to store these indexes to be translated further down the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * pipeline."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param filepath The absolute file path of the CSV file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A list of {@code VisitParametersContainer}, one for each line in the CSV file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if there is any formatting error present."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cVisitParametersContainer\u003e generateVisitsList(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Scanner scanner \u003d readFile(filepath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cVisitParametersContainer\u003e visitParametersList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Used to detect which line had an error"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            List\u003cString\u003e dataValues \u003d generateDataValues(scanner.nextLine());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            VisitParametersContainer visitParameters \u003d generateVisitParametersContainer(dataValues, lineNumber);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            visitParametersList.add(visitParameters);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            lineNumber++;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return visitParametersList;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Generates a {@code VisitParametersContainer} from the given parameters."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param dataValues A list containing fields to create a {@code VisitParametersContainer}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param lineNumber The current line number of the CSV that we are on. Used for error handling."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A VisitParametersContainer storing the given parameters."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if there are not enough parameters to create a VisitParametersContainer."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static VisitParametersContainer generateVisitParametersContainer(List\u003cString\u003e dataValues, int lineNumber)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert MIN_VISIT_PARAMETERS \u003e\u003d 3;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Check if enough parameters; 3 compulsory parameters required for adding a Visit"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (dataValues.size() \u003c MIN_VISIT_PARAMETERS) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_DATA_FORMAT, lineNumber));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id personIndex \u003d ParserUtil.parseId(dataValues.get(0));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id locationIndex \u003d ParserUtil.parseId(dataValues.get(1));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            LocalDate date \u003d ParserUtil.parseDate(dataValues.get(2));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new VisitParametersContainer(personIndex, locationIndex, date);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(INVALID_ROW_FORMAT, lineNumber, pe.getMessage()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Generates data values given by the data, delimited by commas."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Accurately generates fields which have commas in them."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param data A string representation of the object\u0027s data."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A list with String fields which would be used to create the required object."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static List\u003cString\u003e generateDataValues(String data) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert !data.isEmpty();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cString\u003e dataValues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // As certain fields may contain commas, we cannot simply split the string using a comma separator."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        char[] chars \u003d data.toCharArray();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // If true, then any DEFAULT_SEPARATOR is to be treated as a normal character and not a delimiter."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        boolean isInQuotes \u003d false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        StringBuilder currentValue \u003d new StringBuilder();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Character c : chars) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // Reached a delimiter, add the currentValue and reset."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (c.equals(DEFAULT_SEPARATOR) \u0026\u0026 !isInQuotes) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                dataValues.add(currentValue.toString());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                currentValue \u003d new StringBuilder();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // Start of a DEFAULT_QUOTE, set flag to ignore any DEFAULT_DELIMITER encountered."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (c.equals(DEFAULT_QUOTE) \u0026\u0026 !isInQuotes) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                isInQuotes \u003d true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            } else if (c.equals(DEFAULT_QUOTE) \u0026\u0026 isInQuotes) { // End of DEFAULT_QUOTE"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                isInQuotes \u003d false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            currentValue.append(c);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Adding the last field"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (currentValue.length() \u003e 0) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            dataValues.add(currentValue.toString());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return dataValues;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Reads the file at the given file path."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param filepath The absolute file path of the file."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A scanner containing the file\u0027s data."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if the specified file path is invalid."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static Scanner readFile(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(filepath));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return scanner;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * This class serves as a container for Visits."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * The stored parameters will be processed in the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * {@code AddVisitsFromCsvCommand}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static class VisitParametersContainer {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private final Id personIndex;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private final Id locationIndex;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private final LocalDate date;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * Creates a VisitParametersContainer object from the given args."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * @param personIndex The index of the person as viewed in the last displayed list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * @param locationIndex The index of a location as viewed in the last displayed list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * @param date The date of the visit."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public VisitParametersContainer(Id personIndex, Id locationIndex, LocalDate date) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireAllNonNull(personIndex, locationIndex, date);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.locationIndex \u003d locationIndex;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Id getPersonIndex() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return personIndex;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Id getLocationIndex() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return locationIndex;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public LocalDate getDate() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (!(other instanceof VisitParametersContainer)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            VisitParametersContainer otherVisitParametersContainer \u003d (VisitParametersContainer) other;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return otherVisitParametersContainer.getPersonIndex().equals(getPersonIndex())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    \u0026\u0026 otherVisitParametersContainer.getLocationIndex().equals(getLocationIndex())"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    \u0026\u0026 otherVisitParametersContainer.getDate().equals(getDate());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 30,
      "siangernlow": 300
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GenerateLocationsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.GenerateLocationsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Parses input arguments and creates a new GenerateLocationsCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GenerateLocationsCommandParser implements Parser\u003cGenerateLocationsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GenerateLocationsCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * and returns a GenerateLocationsCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public GenerateLocationsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new GenerateLocationsCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GenerateLocationsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 5,
      "KohHanMing": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GeneratePeopleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.GeneratePeopleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Parses input arguments and creates a new GeneratePeopleCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GeneratePeopleCommandParser implements Parser\u003cGeneratePeopleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GeneratePeopleCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * and returns a GeneratePeopleCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public GeneratePeopleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GeneratePeopleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 21,
      "KohHanMing": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isEmpty() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType listType \u003d ParserUtil.parseListType(argMultimap.getValue(PREFIX_LIST).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ListCommand(listType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 26,
      "KohHanMing": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public enum ListType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    ALL_PEOPLE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    ALL_LOCATIONS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    ALL_VISITS,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    ALL_INFECTED,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    ALL_QUARANTINED,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    STATISTICS,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    HIGH_RISK_LOCATIONS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 2,
      "hhdqirui": 3,
      "KohHanMing": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Wrong input date format\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses {@code id} into an {@code Id} and returns it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws ParseException if the specified id is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static Id parseId(String id) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Id.isValidId(trimmedId)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Id(trimmedId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // parse exception to be implemented in later stage"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        LocalDate parsedDate;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            parsedDate \u003d LocalDate.parse(trimmedDate, inputFormat);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses a {@code String quarantineStatus} into a {@code QuarantineStatus}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws ParseException if the given {@code quarantineStatus} is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static QuarantineStatus parseQuarantineStatus(String quarantineStatus) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(quarantineStatus);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String trimmedQuarantineStatus \u003d quarantineStatus.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!QuarantineStatus.isValidQuarantineStatus(trimmedQuarantineStatus)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(QuarantineStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new QuarantineStatus(trimmedQuarantineStatus);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Parses a {@code String infectionStatus} into an {@code InfectionStatus}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if the given {@code infectionStatus} is invalid."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static InfectionStatus parseInfectionStatus(String infectionStatus) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(infectionStatus);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String trimmedInfectionStatus \u003d infectionStatus.trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (!InfectionStatus.isValidInfectionStatus(trimmedInfectionStatus)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new InfectionStatus(trimmedInfectionStatus);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Parses the given {@code listType} and returns the enum representing it."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param listType The type of list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return The enum representing the {@code listType}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @throws ParseException When invalid type is given"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static ListType parseListType(String listType) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        requireNonNull(listType);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String trimmedListType \u003d listType.trim().toLowerCase();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        switch (trimmedListType) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case \"people\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case \"locations\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case \"visits\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case \"infected\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return ListType.ALL_INFECTED;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case \"quarantined\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return ListType.ALL_QUARANTINED;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case \"stats\":"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return ListType.STATISTICS;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case \"high-risk-locations\":"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return ListType.HIGH_RISK_LOCATIONS;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 36,
      "DreamerDragon": 16,
      "siangernlow": 31,
      "hhdqirui": 15,
      "-": 120,
      "KohHanMing": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/VirusTrackerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.AddFromCsvCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.GenerateLocationsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.GeneratePeopleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.DeleteLocationCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.DeletePersonCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.FindPersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.DeleteVisitsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.location.AddLocationCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.location.DeleteLocationCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.location.EditLocationCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.person.AddPersonCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.person.DeletePersonCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.person.EditPersonCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.person.FindPersonCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.visit.AddVisitCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.visit.DeleteVisitsCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class VirusTrackerParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case AddPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new AddPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case AddLocationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new AddLocationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case EditPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new EditPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case EditLocationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new EditLocationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case DeletePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new DeletePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case DeleteLocationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new DeleteLocationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case FindPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new FindPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case GenerateLocationsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new GenerateLocationsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case GeneratePeopleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new GeneratePeopleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        case AddVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            return new AddVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        case DeleteVisitsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            return new DeleteVisitsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case AddFromCsvCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new AddFromCsvCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 35,
      "DreamerDragon": 7,
      "siangernlow": 4,
      "-": 63,
      "KohHanMing": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/location/AddLocationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new AddLocationCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommandParser implements Parser\u003cAddLocationCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLocationCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns an AddLocationCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddLocationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_LOCATION_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_LOCATION_ID)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_LOCATION_ID).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d new Location(id, name, address);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new AddLocationCommand(location);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 24,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/location/DeleteLocationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.DeleteLocationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new DeleteLocationCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeleteLocationCommandParser implements Parser\u003cDeleteLocationCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteLocationCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns a DeleteLocationCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DeleteLocationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LOCATION_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION_ID).isPresent() \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION_ID).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_LOCATION_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new DeleteLocationCommand(id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new DeleteLocationCommand(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLocationCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/location/EditLocationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand.EditLocationDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new EditLocationCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditLocationCommandParser implements Parser\u003cEditLocationCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditLocationCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns an EditLocationCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLocationCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor editLocationDescriptor \u003d new EditLocationDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            editLocationDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            editLocationDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!editLocationDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(EditLocationCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new EditLocationCommand(index, editLocationDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/AddPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new AddPersonCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns an AddPersonCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ID, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_QUARANTINE_STATUS, PREFIX_INFECTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON_ID, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                PREFIX_QUARANTINE_STATUS, PREFIX_INFECTION) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_PERSON_ID).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus quarantineStatus \u003d ParserUtil.parseQuarantineStatus("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                argMultimap.getValue(PREFIX_QUARANTINE_STATUS).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        InfectionStatus infectionStatus \u003d ParserUtil.parseInfectionStatus("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                argMultimap.getValue(PREFIX_INFECTION).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person person \u003d new Person(id, name, phone, email, address, quarantineStatus, infectionStatus, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new AddPersonCommand(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 35,
      "siangernlow": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/DeletePersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.DeletePersonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new DeletePersonCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns a DeletePersonCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DeletePersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERSON_ID).isPresent() \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERSON_ID).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_PERSON_ID).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new DeletePersonCommand(id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new DeletePersonCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 30,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/EditPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new EditPersonCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns an EditPersonCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        PREFIX_QUARANTINE_STATUS, PREFIX_INFECTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    EditPersonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUARANTINE_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            editPersonDescriptor.setQuarantineStatus(ParserUtil.parseQuarantineStatus("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    argMultimap.getValue(PREFIX_QUARANTINE_STATUS).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INFECTION).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            editPersonDescriptor.setInfectionStatus("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    ParserUtil.parseInfectionStatus(argMultimap.getValue(PREFIX_INFECTION).get())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new EditPersonCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 24,
      "siangernlow": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/FindPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.FindPersonCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new FindPersonCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns a FindPersonCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public FindPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/visit/AddVisitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Parses input arguments and creates a new AddVisitCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class AddVisitCommandParser implements Parser\u003cAddVisitCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddVisitCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public AddVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_LOCATION_ID, PREFIX_PERSON_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if ((arePrefixesPresent(argMultimap, PREFIX_LOCATION_ID) || arePrefixesPresent(argMultimap, PREFIX_PERSON_ID))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddVisitCommand addVisitCommand \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_LOCATION_ID, PREFIX_PERSON_ID)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            addVisitCommand \u003d parseId(argMultimap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } else if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            addVisitCommand \u003d parseIndex(argMultimap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assert addVisitCommand !\u003d null : \"All arguments should have been either IDs or indexes.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return addVisitCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private AddVisitCommand parseId(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id personId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id locationId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            personId \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_PERSON_ID).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationId \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_LOCATION_ID).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE_FORMAT, AddVisitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new AddVisitCommand(personId, locationId, date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private AddVisitCommand parseIndex(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String[] indexes \u003d argMultimap.getPreamble().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index locationIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            personIndex \u003d ParserUtil.parseIndex(indexes[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationIndex \u003d ParserUtil.parseIndex(indexes[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE_FORMAT, AddVisitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new AddVisitCommand(personIndex, locationIndex, date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 51,
      "DreamerDragon": 41,
      "hhdqirui": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/visit/DeleteVisitsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.DeleteVisitsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Parses input arguments and creates a new DeleteVisitsCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class DeleteVisitsCommandParser implements Parser\u003cDeleteVisitsCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteVisitsCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * and returns a DeleteVisitsCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public DeleteVisitsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVisitsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return new DeleteVisitsCommand(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7,
      "DreamerDragon": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InfoHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_INFECTED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_QUARANTINED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Collectively uses data from the {@code Model} to produce statistics"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * The original data should not be modified in this class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class InfoHandler {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final double HUNDRED_IN_DOUBLE \u003d 100.0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // Used as a flag to detect invalid ratios, such as dividing by zero."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final double INVALID_RATIO \u003d -1.0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String COUNT_FORMAT \u003d \"%d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String PERCENTAGE_FORMAT \u003d \"%.2f\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String INVALID_PERCENTAGE_STRING \u003d \"-%%\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // Headers for summary display"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String TOTAL_PEOPLE_HEADER \u003d \"Total number of people:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String TOTAL_LOCATIONS_HEADER \u003d \"Total number of locations:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String TOTAL_VISITS_HEADER \u003d \"Total number of visits:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String TOTAL_INFECTED_HEADER \u003d \"Total number of infected people:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String TOTAL_QUARANTINED_HEADER \u003d \"Total number of quarantined people:\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String PERCENTAGE_INFECTED \u003d \"Percentage of people infected:\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String PERCENTAGE_QUARANTINED \u003d \"Percentage of people quarantined:\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Initializes an InfoHandler with the given Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public InfoHandler(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public ObservableList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return model.getFilteredLocationList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public ObservableList\u003cVisit\u003e getVisitList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return model.getFilteredVisitList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Filters the people list in the model with the given predicate."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * In any operation, this method should be called twice: once to apply the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * predicate, and another time to remove the predicate after the operation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * is completed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param predicate The predicate to filter the list against."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void updateModelPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Get total counts \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public int getTotalPeople() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return getPersonList().size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public int getTotalLocations() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return getLocationList().size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public int getTotalVisits() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return getVisitList().size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Retrieves the total amount of people who are currently infected."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return the number of people infected currently"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public int getTotalInfected() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        updateModelPersonList(PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int totalInfected \u003d getPersonList().size();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        updateModelPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return totalInfected;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Retrieves the total amount of people who are currently quarantined."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return the number of people quarantined currently."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public int getTotalQuarantined() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        updateModelPersonList(PREDICATE_SHOW_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int totalQuarantined \u003d getPersonList().size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        updateModelPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return totalQuarantined;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Get percentages \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Gets the percentage of people who are currently infected."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return the percentage of infected people."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public double getInfectedOverPeople() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int totalInfected \u003d getTotalInfected();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int totalPeople \u003d getTotalPeople();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Check if dividing by zero"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (totalPeople \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return INVALID_RATIO;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return (double) totalInfected / totalPeople;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Gets the percentage of people who are currently quarantined."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return the percentage of quarantined people."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public double getQuarantinedOverPeople() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int totalQuarantined \u003d getTotalQuarantined();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int totalPeople \u003d getTotalPeople();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Check if dividing by zero"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (totalPeople \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return INVALID_RATIO;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return (double) totalQuarantined / totalPeople;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Converts the given ratio into a percentage String."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns {@code INVALID_PERCENTAGE} if given ratio is -1.0"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param ratio"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public String getRatioAsPercentage(double ratio) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (ratio \u003d\u003d INVALID_RATIO) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return INVALID_PERCENTAGE_STRING;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        double percentage \u003d HUNDRED_IN_DOUBLE * ratio;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return String.format(PERCENTAGE_FORMAT + \"%%\", percentage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Generates a list of visits that a person with a specified Id is associated with."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @param personId Id of the person."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @return List of visits that the person is associated with."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public VisitBook generateVisitsByPerson(Id personId) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        ReadOnlyVisitBook tempVisitBook \u003d model.getVisitBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        VisitBook visitsByPerson \u003d new VisitBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        for (int i \u003d 0; i \u003c tempVisitBook.getVisitList().size(); i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            if (tempVisitBook.getVisitList().get(i).getPerson().getId().equals(personId)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                visitsByPerson.addVisit(tempVisitBook.getVisitList().get(i));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return visitsByPerson;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Generates a list of location Ids that are associated with the visits in the given visit book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @param visitBook List of visits."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @return List of location ids that are associated with the visits."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static List\u003cId\u003e generateLocationIdsByVisitBook(VisitBook visitBook) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cId\u003e locationIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        for (int i \u003d 0; i \u003c visitBook.getVisitList().size(); i++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            locationIds.add(visitBook.getVisitList().get(i).getLocation().getId());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return locationIds;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Generates a list of visits that are associated with the given list of location Ids."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @param locationIds List of location Ids."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @return List of visits that are associated with the location Ids."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public VisitBook generateVisitsByLocationIds(List\u003cId\u003e locationIds) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        ReadOnlyVisitBook tempVisitBook \u003d model.getVisitBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        VisitBook associatedVisits \u003d new VisitBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Id locationId : locationIds) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            for (int i \u003d 0; i \u003c tempVisitBook.getVisitList().size(); i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                Visit visit \u003d tempVisitBook.getVisitList().get(i);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                if (visit.getLocation().getId().equals(locationId)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    associatedVisits.addVisit(visit);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return associatedVisits;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Generates a list of location Ids that are associated with the visits in the given visit book. As this is an"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * intermediate method, it\u0027s purpose is to find other person ids associated visits that are associated with an"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * infected person. Hence, it does not include the original infected person."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @param visitBook List of visits."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @param personId Original infected person visit book is associated with."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @return List of location ids that are associated with the visits."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public List\u003cId\u003e generatePersonIdsByVisitBook(VisitBook visitBook, Id personId) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cId\u003e personIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        for (Visit visit : visitBook.getVisitList()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (visit.getPerson().getId().equals(personId)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            personIds.add(visit.getPerson().getId());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            if (visit.getPerson().getId().equals(personId)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            personIds.add(visit.getPerson().getId());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return personIds;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Summary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Gets a summary of the current statistics."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public String getStatistics() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            TOTAL_PEOPLE_HEADER + \" \" + COUNT_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + TOTAL_LOCATIONS_HEADER + \" \" + COUNT_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + TOTAL_VISITS_HEADER + \" \" + COUNT_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + TOTAL_INFECTED_HEADER + \" \" + COUNT_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + TOTAL_QUARANTINED_HEADER + \" \" + COUNT_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + PERCENTAGE_INFECTED + \" %s\" + \"\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + PERCENTAGE_QUARANTINED + \" %s\" + \"\\n\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            getTotalPeople(), getTotalLocations(), getTotalVisits(),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            getTotalInfected(), getTotalQuarantined(), getRatioAsPercentage(getInfectedOverPeople()),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            getRatioAsPercentage(getQuarantinedOverPeople())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        );"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d High Risk Locations Related \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns a HashSet of ids of persons as given in the argument."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static HashSet\u003cId\u003e getIdHashSetFromPersonsList(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashSet\u003cId\u003e ids \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            ids.add(person.getId());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return ids;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns an ArrayList of location ids of visits as given in the argument."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static ArrayList\u003cId\u003e getLocationIdsFromInfectedVisitList(List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashMap\u003cId, Integer\u003e infectedLocations \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        for (Visit visit : visits) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id id \u003d visit.getLocation().getId();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            if (infectedLocations.containsKey(id)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                infectedLocations.put(id, infectedLocations.get(id) + 1);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                infectedLocations.put(id, 1);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashMap\u003cId, Integer\u003e sortedInfectedLocations \u003d sortByValues(infectedLocations);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return new ArrayList\u003c\u003e(sortedInfectedLocations.keySet());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Sort HashMap by value. Only Used by method getLocationIdsFromInfectedVisitList."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static HashMap\u003cId, Integer\u003e sortByValues(HashMap\u003cId, Integer\u003e map) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cMap.Entry\u003cId, Integer\u003e\u003e list \u003d new LinkedList\u003c\u003e(map.entrySet());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // Sort in decreasing order"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        list.sort((o1, o2) -\u003e o2.getValue().compareTo(o1.getValue()));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashMap\u003cId, Integer\u003e sortedHashMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Map.Entry\u003cId, Integer\u003e entry : list) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            sortedHashMap.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return sortedHashMap;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Determines the number of high risk locations given all infected locations and total locations."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static int getNumberOfHighRiskLocations(int numberOfInfectedLocations, int numberOfTotalLocations) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if number of infected locations is more than 60% of total locations,number of infected"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        locations considered to be high risk will be 40% of total locations. Otherwise, all"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        infected locations are considered to be high risk. This criterion needs further discussion"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        and is subjected to change."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if (numberOfInfectedLocations \u003e numberOfTotalLocations * 0.6) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return (int) (numberOfTotalLocations * 0.4);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return numberOfInfectedLocations;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (!(obj instanceof InfoHandler)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        InfoHandler other \u003d (InfoHandler) obj;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return model.equals(other.model);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 22,
      "DreamerDragon": 7,
      "siangernlow": 198,
      "hhdqirui": 59,
      "KohHanMing": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the user prefs\u0027 person book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the user prefs\u0027 person book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void setPersonBookFilePath(Path personBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns the PersonBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ReadOnlyPersonBook getPersonBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces person book data with the data in {@code personBook}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void setPersonBook(ReadOnlyPersonBook personBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the person book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a person with the same id as {@code person} exists in the person book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    boolean hasSameIdPerson(Person person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a person with the same identity except id as {@code person} exists in the person book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    boolean hasSameIdentityExceptId(Person person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code person} must not already exist in the person book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The person must exist in the person book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code target} must exist in the person book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the person book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered person list */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ObservableList\u003cPerson\u003e getUnfilteredPersonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Location Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the user prefs\u0027 location book file path."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the user prefs\u0027 location book file path."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void setLocationBookFilePath(Path locationBookFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns the LocationBook */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ReadOnlyLocationBook getLocationBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces location book data with the data in {@code locationBook}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void setLocationBook(ReadOnlyLocationBook locationBook);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the virus tracker."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    boolean hasLocation(Location location);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds the given location."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code location} must not already exist in the location book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void addLocation(Location location);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Deletes the given location."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must exist in the location book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void deleteLocation(Location target);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the given location {@code target} with {@code editedLocation}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code target} must exist in the location book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location identity of {@code editedPerson} must not be the same as another existing location in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * location book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void setLocation(Location target, Location editedLocation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered location list */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ObservableList\u003cLocation\u003e getFilteredLocationList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered location list */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ObservableList\u003cLocation\u003e getUnfilteredLocationList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Updates the filter of the filtered location list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Visit Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns the user prefs\u0027 visit book file path."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Path getVisitBookFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Sets the user prefs\u0027 visit book file path."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    void setVisitBookFilePath(Path visitBookFilePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns the visitBook */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ReadOnlyVisitBook getVisitBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Replaces visit book data with the data in {@code visitBook}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    void setVisitBook(ReadOnlyVisitBook visitBook);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a visit with the same identity as {@code visit} exists in the visit book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    boolean hasVisit(Visit visit);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds the given visit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code visit} must not already exist in the visit book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void addVisit(Visit visit);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Deletes the given visit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The visit must exist in the visit book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void deleteVisit(Visit visit);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /** Returns an unmodifiable view of the filtered visit list */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    ObservableList\u003cVisit\u003e getFilteredVisitList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Updates the filter of the filtered visit list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    void updateFilteredVisitList(Predicate\u003cVisit\u003e predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Info Handler \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return the {@code InfoHandler} associated with the model."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    InfoHandler getInfoHandler();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Gets the given person using the id."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code id} must already exist in the person book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Person getPersonFromId(Id id);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Gets the given location using the id."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code id} must already exist in the location book."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Location getLocationFromId(Id id);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Gets the given person using the index."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code index} must already exist in the person book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Person getPersonFromIndex(Index index);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Gets the given location using the index."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code index} must already exist in the location book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Location getLocationFromIndex(Index index);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 120,
      "DreamerDragon": 40,
      "siangernlow": 5,
      "hhdqirui": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_LOCATIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_VISITS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents the in-memory model of the VirusTracker data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final PersonBook personBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final LocationBook locationBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final VisitBook visitBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final InfoHandler infoHandler;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private final FilteredList\u003cLocation\u003e filteredLocations;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final FilteredList\u003cVisit\u003e filteredVisits;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Initializes a ModelManager with the given personBook, locationBook, visitBook and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ModelManager(ReadOnlyPersonBook personBook, ReadOnlyLocationBook locationBook,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        ReadOnlyVisitBook visitBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(personBook, locationBook, visitBook, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.fine(\"Initializing with person book: \" + personBook + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                + \" and location book: \" + locationBook + \" and visit book: \" + visitBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.personBook \u003d new PersonBook(personBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBook \u003d new LocationBook(locationBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.visitBook \u003d new VisitBook(visitBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.infoHandler \u003d new InfoHandler(this);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.personBook.getPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        filteredLocations \u003d new FilteredList\u003c\u003e(this.locationBook.getLocationList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        filteredVisits \u003d new FilteredList\u003c\u003e(this.visitBook.getVisitList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this(new PersonBook(), new LocationBook(), new VisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return userPrefs.getPersonBookFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setPersonBookFilePath(Path personBookFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(personBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userPrefs.setPersonBookFilePath(personBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setPersonBook(ReadOnlyPersonBook personBook) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.personBook.resetData(personBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook.hasPerson(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean hasSameIdPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook.hasSameIdPerson(person);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean hasSameIdentityExceptId(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook.hasSameIdentityExceptId(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook.addPerson(person);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook.removePerson(target);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook.getPersonList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LocationBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return userPrefs.getLocationBookFilePath();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath(Path locationBookFilePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(locationBookFilePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userPrefs.setLocationBookFilePath(locationBookFilePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBook(ReadOnlyLocationBook locationBook) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBook.resetData(locationBook);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook.hasLocation(location);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addLocation(Location location) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(location);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // needs to be updated to persons when doing list command"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        updateFilteredLocationList(PREDICATE_SHOW_ALL_LOCATIONS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void deleteLocation(Location target) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.removeLocation(target);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(target, editedLocation);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.setLocation(target, editedLocation);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Visit} backed by the internal list of"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code versionedVisitBook}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return filteredLocations;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e getUnfilteredLocationList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook.getLocationList();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        filteredLocations.setPredicate(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d VisitBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getVisitBookFilePath() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return userPrefs.getVisitBookFilePath();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setVisitBookFilePath(Path visitBookFilePath) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(visitBookFilePath);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userPrefs.setVisitBookFilePath(visitBookFilePath);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public ReadOnlyVisitBook getVisitBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visitBook;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setVisitBook(ReadOnlyVisitBook visitBook) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.visitBook.resetData(visitBook);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean hasVisit(Visit visit) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visitBook.hasVisit(visit);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addVisit(Visit visit) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        visitBook.addVisit(visit);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        updateFilteredVisitList(PREDICATE_SHOW_ALL_VISITS); // needs to be updated to persons when doing list command"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void deleteVisit(Visit visit) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visitBook.removeVisit(visit);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Visit} backed by the internal list of"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code versionedVisitBook}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cVisit\u003e getFilteredVisitList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return filteredVisits;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void updateFilteredVisitList(Predicate\u003cVisit\u003e predicate) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        filteredVisits.setPredicate(predicate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InfoHandler \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public InfoHandler getInfoHandler() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return infoHandler;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person getPersonFromId(Id id) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Person p : getUnfilteredPersonList()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location getLocationFromId(Id id) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Location l : getUnfilteredLocationList()) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (l.getId().equals(id)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return l;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person getPersonFromIndex(Index index) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location getLocationFromIndex(Index index) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return getFilteredLocationList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook.equals(other.personBook)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 locationBook.equals(other.locationBook)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 visitBook.equals(other.visitBook)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 168,
      "DreamerDragon": 40,
      "siangernlow": 13,
      "hhdqirui": 7,
      "-": 122,
      "KohHanMing": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Contains predicates used by the model to filter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * the relevant lists."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class ModelPredicate {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // Code duplications in the three lines below; future refactoring should take note of this."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Predicate\u003cLocation\u003e PREDICATE_SHOW_ALL_LOCATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Predicate\u003cVisit\u003e PREDICATE_SHOW_ALL_VISITS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /** {@code Predicate} to handle person list */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_INFECTED \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        person -\u003e person.getInfectionStatus().getStatusAsBoolean();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_QUARANTINED \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        person -\u003e person.getQuarantineStatus().getStatusAsBoolean();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /** {@code Predicate} for filtering out the infected visits from all visits */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static Predicate\u003cVisit\u003e getPredicateForInfectedVisits(HashSet\u003cId\u003e infectedIds) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visit -\u003e infectedIds.contains(visit.getPerson().getId());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /** {@code Predicate} for filtering high risk locations */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static Predicate\u003cLocation\u003e getPredicateForHighRiskLocations(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        ObservableList\u003cPerson\u003e allInfectedPersons \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashSet\u003cId\u003e infectedPersonIds \u003d InfoHandler.getIdHashSetFromPersonsList(allInfectedPersons);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.updateFilteredVisitList(getPredicateForInfectedVisits(infectedPersonIds));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        ObservableList\u003cVisit\u003e allInfectedVisits \u003d model.getFilteredVisitList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ArrayList\u003cId\u003e infectedLocationIds \u003d InfoHandler.getLocationIdsFromInfectedVisitList(allInfectedVisits);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.updateFilteredLocationList(PREDICATE_SHOW_ALL_LOCATIONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        int numberOfTotalLocations \u003d model.getFilteredLocationList().size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        int numberOfHighRiskLocations \u003d InfoHandler.getNumberOfHighRiskLocations("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                infectedLocationIds.size(), numberOfTotalLocations);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ArrayList\u003cId\u003e highRiskLocationIds \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                new ArrayList\u003c\u003e(infectedLocationIds.subList(0, numberOfHighRiskLocations));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return location -\u003e highRiskLocationIds.contains(location.getId());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /** {@code Predicate} to generate a predicate for whether a person\u0027s Id is included in the list of person Ids  */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static Predicate\u003cPerson\u003e getPredicateShowPeopleById(List\u003cId\u003e personIds) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return person -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            boolean isIncluded \u003d person.getId().equals(personIds.get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            for (int i \u003d 1; i \u003c personIds.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                isIncluded \u003d isIncluded || person.getId().equals(personIds.get(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return isIncluded;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /** {@code Predicate} to generate predicate for whether a location\u0027s Id is included in the list of location Ids */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static Predicate\u003cLocation\u003e getPredicateShowLocationsById(List\u003cId\u003e locationIds) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return location -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            boolean isIncluded \u003d location.getId().equals(locationIds.get(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            for (int i \u003d 1; i \u003c locationIds.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                isIncluded \u003d isIncluded || location.getId().equals(locationIds.get(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return isIncluded;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "DreamerDragon": 1,
      "siangernlow": 25,
      "hhdqirui": 29,
      "KohHanMing": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getPersonBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Path getVisitBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "DreamerDragon": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Path personBookFilePath \u003d Paths.get(\"data\" , \"personbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Path locationBookFilePath \u003d Paths.get(\"data\", \"locationbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Path visitBookFilePath \u003d Paths.get(\"data\", \"visitbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        setPersonBookFilePath(newUserPrefs.getPersonBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        setLocationBookFilePath(newUserPrefs.getLocationBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        setVisitBookFilePath(newUserPrefs.getVisitBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setPersonBookFilePath(Path personBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(personBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.personBookFilePath \u003d personBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath(Path locationBookFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(locationBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBookFilePath \u003d locationBookFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Path getVisitBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visitBookFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisitBookFilePath(Path visitBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(visitBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.visitBookFilePath \u003d visitBookFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 personBookFilePath.equals(o.personBookFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 locationBookFilePath.equals(o.locationBookFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 visitBookFilePath.equals(o.visitBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return Objects.hash(guiSettings, personBookFilePath, locationBookFilePath, visitBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(\"\\nLocal person data file location : \" + personBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(\"\\nLocal location data file location : \" + locationBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        sb.append(\"\\nLocal visit data file location : \" + visitBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 22,
      "DreamerDragon": 12,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Represents a Person\u0027s address in the person book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Represents a Person\u0027s email in the person book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/Id.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents an Id that uniquely identifies a person or a location."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Ids can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The first character of the id must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs an {@code Id}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Id(String id) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        value \u003d id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a given string is a valid id."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof Id // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 value.equals(((Id) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/InfectionStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Represents a Person\u0027s infection status in the tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidInfectionStatus(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class InfectionStatus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The infection status of a person can only be true or false.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * The infection status can only be specified as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * true or false, case-insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)(true|false)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private boolean isInfected;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Constructs an {@code InfectionStatus}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param infectionStatus A valid infection status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public InfectionStatus(String infectionStatus) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(infectionStatus);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        checkArgument(isValidInfectionStatus(infectionStatus), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        isInfected \u003d Boolean.parseBoolean(infectionStatus);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns true if a given string is a valid infection status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static boolean isValidInfectionStatus(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return Pattern.matches(VALIDATION_REGEX, test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns the boolean format of the infection status"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * @return a boolean indicating whether the person is infected or not"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean getStatusAsBoolean() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return isInfected;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns the String format of the infection status"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A String either containing true or false."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public String getStatusAsString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return String.valueOf(isInfected);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return String.valueOf(isInfected);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                || (other instanceof InfectionStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 isInfected \u003d\u003d ((InfectionStatus) other).isInfected); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return Boolean.valueOf(isInfected).hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "siangernlow": 67,
      "hhdqirui": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Represents a Person\u0027s name in the person book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Represents a Person\u0027s phone number in the person book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/QuarantineStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Represents a Person\u0027s quarantine status in the person book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuarantineStatus(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class QuarantineStatus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            \"Quarantine status should either be true or false, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs a {@code QuarantineStatus}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param quarantineStatus A valid quarantine status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public QuarantineStatus(String quarantineStatus) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(quarantineStatus);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        checkArgument(isValidQuarantineStatus(quarantineStatus), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        value \u003d quarantineStatus.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns if a given string is a valid quarantine status."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static boolean isValidQuarantineStatus(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return test.toLowerCase().equals(\"true\") || test.toLowerCase().equals(\"false\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns the quarantine status in format of boolean"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * @return the boolean format of quarantine status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean getStatusAsBoolean() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return value.equals(\"true\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof QuarantineStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 value.equals(((QuarantineStatus) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 50,
      "DreamerDragon": 1,
      "hhdqirui": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attribute/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents a Location in the location book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Every field must be present and not null. Id must be unique."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location(Id id, Name name, Address address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(name, address, id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if both locations have the same name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * This defines a weaker notion of equality between two locations."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean isSameLocation(Location otherLocation) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (otherLocation \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return otherLocation !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherLocation.getName().equals(getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if both locations have the same id."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean isSameId(Location otherLocation) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (otherLocation \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return otherLocation !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherLocation.getId().equals(getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if both locations have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * This defines a stronger notion of equality between two locations."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!(other instanceof Location)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location otherLocation \u003d (Location) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return otherLocation.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherLocation.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherLocation.getId().equals(getId());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return Objects.hash(name, address, id);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/LocationBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Wraps all data at the location-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Duplicates are not allowed (by .isSameLocation comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBook implements ReadOnlyLocationBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final UniqueLocationList locations;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates a LocationBook using the Locations in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook(ReadOnlyLocationBook toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the contents of the location list with {@code locations}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locations.setLocations(locations);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Resets the existing data of this {@code LocationBook} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData(ReadOnlyLocationBook newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        setLocations(newData.getLocationList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //// location-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the location book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.contains(location);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds a location to the location book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must not already exist in the location book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addLocation(Location l) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.add(l);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the given location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code target} must exist in the location book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the same as another existing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * location in the location book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(editedLocation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.setLocation(target, editedLocation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Removes {@code key} from this {@code LocationBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code key} must exist in the location book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void removeLocation(Location key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.asUnmodifiableObservableList().size() + \" locations\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof LocationBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 locations.equals(((LocationBook) other).locations));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/LocationNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Tests that a {@code Location}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationNameContainsKeywordsPredicate implements Predicate\u003cLocation\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean test(Location location) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(location.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof LocationNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 keywords.equals(((LocationNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/ReadOnlyLocationBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Unmodifiable view of a location book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface ReadOnlyLocationBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns an unmodifiable view of the locations list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * This list will not contain any duplicate locations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ObservableList\u003cLocation\u003e getLocationList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/UniqueLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotIdentifiableException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A list of locations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * This list also enforces that all elements have unique ids."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A location is considered unique by comparing using {@code Location#isSameLocation(Location)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * updating of locations uses Location#isSameLocation(Location) for equality so as to ensure that the location being"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueLocationList. However, the removal of a location uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Location#equals(Object) so as to ensure that the location with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * @see Location#isSameLocation(Location)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class UniqueLocationList implements Iterable\u003cLocation\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if the list contains an equivalent location as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * or if the location shares the same id as a location in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean contains(Location toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLocation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if the list contains a location with the same id as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean containsSameIdLocation(Location toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds a location to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must not have same id as another location in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void add(Location toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (containsSameIdLocation(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new LocationNotIdentifiableException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the same as another existing location in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(target, editedLocation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!target.isSameLocation(editedLocation) \u0026\u0026 contains(editedLocation)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assert(target.isSameId(editedLocation));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.set(index, editedLocation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Removes the equivalent location from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove(Location toRemove) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations(UniqueLocationList replacement) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the contents of this list with {@code locations}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(locations);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!locationsAreUnique(locations)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!locationsAreIdentifiable(locations)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new LocationNotIdentifiableException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.setAll(locations);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Iterator\u003cLocation\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof UniqueLocationList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLocationList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if {@code locations} contains only unique locations."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private boolean locationsAreUnique(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (int i \u003d 0; i \u003c locations.size() - 1; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c locations.size(); j++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                if (locations.get(i).isSameLocation(locations.get(j))) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if {@code locations} contains identifiable locations."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * This is true if all locations have different ids."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private boolean locationsAreIdentifiable(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (int i \u003d 0; i \u003c locations.size() - 1; i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c locations.size(); j++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                if (locations.get(i).isSameId(locations.get(j))) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/DuplicateLocationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Signals that the operation will result in duplicate Locations (Locations are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DuplicateLocationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DuplicateLocationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        super(\"Operation would result in duplicate locations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/LocationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Signals that the operation is unable to find the specified location."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/LocationNotIdentifiableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Signals that the operation will result in unidentifiable Locations (Locations are considered unidentifiable if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * have the same id value)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationNotIdentifiableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationNotIdentifiableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        super(\"Operation would result in unidentifiable locations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Represents a Person in the person book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final QuarantineStatus quarantineStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final InfectionStatus infectionStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person(Id id, Name name, Phone phone, Email email, Address address, QuarantineStatus quarantineStatus,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                  InfectionStatus infectionStatus, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        requireAllNonNull(name, phone, email, address, quarantineStatus, infectionStatus, id, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        this.quarantineStatus \u003d quarantineStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        this.infectionStatus \u003d infectionStatus;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public QuarantineStatus getQuarantineStatus() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return quarantineStatus;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public InfectionStatus getInfectionStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return infectionStatus;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns true if both person have the same id."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean isSameId(Person otherPerson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 otherPerson.getId().equals(getId());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 otherPerson.getId().equals(getId());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns true if both persons are of the same identity expect id"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean isSameIdentityExceptIdPerson(Person otherPerson) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherPerson.getQuarantineStatus().equals(getQuarantineStatus())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 otherPerson.getInfectionStatus().equals(getInfectionStatus())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                \u0026\u0026 otherPerson.getId().equals(getId());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return Objects.hash(name, phone, email, address, quarantineStatus, infectionStatus, tags, id);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(\" Quarantine Status: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(getQuarantineStatus())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .append(\" Infected: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .append(getInfectionStatus())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 20,
      "DreamerDragon": 1,
      "siangernlow": 8,
      "hhdqirui": 33,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Wraps all data at the person-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class PersonBook implements ReadOnlyPersonBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public PersonBook() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates a PersonBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public PersonBook(ReadOnlyPersonBook toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Resets the existing data of this {@code PersonBook} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData(ReadOnlyPersonBook newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns true if a person with the same id as {@code person} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean hasSameIdPerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return persons.containsSameIdPerson(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns true if a person with the same identity except id as {@code person} exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean hasSameIdentityExceptId(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return persons.containsSameIdentityExpectIdPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Removes {@code key} from this {@code PersonBook}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof PersonBook // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 persons.equals(((PersonBook) other).persons));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "DreamerDragon": 1,
      "hhdqirui": 16,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ReadOnlyPersonBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Unmodifiable view of a person book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface ReadOnlyPersonBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotIdentifiableException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns true if the list contains a person with the same id as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean containsSameIdPerson(Person toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns true if the list contains a person with the same identity except id as the given argument."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean containsSameIdentityExpectIdPerson(Person toCheck) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameIdentityExceptIdPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if (containsSameIdPerson(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            throw new PersonNotIdentifiableException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if (containsSameIdPerson(editedPerson) \u0026\u0026 !target.isSameId(editedPerson)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            throw new PersonNotIdentifiableException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if (!personsAreIdentifiable(persons)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            throw new PersonNotIdentifiableException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns true if {@code locations} contains identifiable locations."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * This is true if all locations have different ids."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private boolean personsAreIdentifiable(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                if (persons.get(i).isSameId(persons.get(j))) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhdqirui": 42,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotIdentifiableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": " * Signals that the operation will result in unidentifiable Person (Person are considered unidentifiable if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": " * have the same id value)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "public class PersonNotIdentifiableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public PersonNotIdentifiableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        super(\"Operation would result in unidentifiable persons due to duplicate id value\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhdqirui": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Contains utility methods for populating {@code PersonBook}, {@code LocationBook}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * and {@code VisitBook} with sample data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Person(new Id(\"S123A\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new QuarantineStatus(\"true\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"false\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Person(new Id(\"S234B\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new QuarantineStatus(\"true\"), new InfectionStatus(\"false\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Person(new Id(\"S345C\"), new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new QuarantineStatus(\"false\"), new InfectionStatus(\"false\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Person(new Id(\"S456D\"), new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new QuarantineStatus(\"false\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"true\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Person(new Id(\"S567E\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new QuarantineStatus(\"false\"), new InfectionStatus(\"true\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Person(new Id(\"S678F\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new QuarantineStatus(\"false\"), new InfectionStatus(\"true\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static Location[] getSampleLocations() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Location[] {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Id(\"L123A\"), new Name(\"School of Computing\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"NUS School of Computing COM1 13 Computing Dr, 117417\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Id(\"L234B\"), new Name(\"VivoCity\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"1 HarbourFront Walk, Singapore 098585\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Id(\"L345C\"), new Name(\"Stephen Riady Centre\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"2 College Ave West, Singapore 138607\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Id(\"L456D\"), new Name(\"ION Orchard\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"2 Orchard Turn, Singapore 238801\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Id(\"L567E\"), new Name(\"Plaza Singapura\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"68 Orchard Rd, Singapore 238839\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Id(\"L678F\"), new Name(\"Singapore Zoo\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd, 729826\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static List\u003cVisit\u003e getSampleVisits() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-02-02\", inputFormat);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cVisit\u003e visits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Person p : getSamplePersons()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            for (Location l : getSampleLocations()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                visits.add(new Visit(p, l, date));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                date \u003d date.minusDays(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return visits;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static ReadOnlyPersonBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook samplePb \u003d new PersonBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            samplePb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return samplePb;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static ReadOnlyLocationBook getSampleLocationBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook sampleLb \u003d new LocationBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Location sampleLocation : getSampleLocations()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            sampleLb.addLocation(sampleLocation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return sampleLb;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static ReadOnlyVisitBook getSampleVisitBook() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook sampleVb \u003d new VisitBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        for (Visit sampleVisit : getSampleVisits()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            sampleVb.addVisit(sampleVisit);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return sampleVb;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 76,
      "DreamerDragon": 13,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/ReadOnlyVisitBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Unmodifiable view of a visit book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public interface ReadOnlyVisitBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns an unmodifiable view of the visits list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * This list will not contain any duplicate visits."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    ObservableList\u003cVisit\u003e getVisitList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/UniqueVisitList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.exceptions.DuplicateVisitException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.exceptions.VisitNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * A list of visits that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * A visit is considered unique by comparing using {@code visit #equals(Visit)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * updating and deleting of visits uses Visit#equal(Visit) for equality so as to ensure that the visit being"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueVisitList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * @see Visit #equals(Visit)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class UniqueVisitList implements Iterable\u003cVisit\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final ObservableList\u003cVisit\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final ObservableList\u003cVisit\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if the list contains an equivalent visit as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean contains(Visit toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Adds a visit to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * The visit must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void add(Visit toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Removes the equivalent visit from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * The visit must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void remove(Visit toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new VisitNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Replaces the Visit {@code target} in the list with {@code editedVisit}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * The identities of {@code editedVisit} must not be the same as another existing visit in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisit(Visit target, Visit editedVisit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireAllNonNull(target, editedVisit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new VisitNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (target.equals(editedVisit) || contains(editedVisit)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        internalList.set(index, editedVisit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisits(UniqueVisitList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Replaces the contents of this list with {@code visits}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code visits} must not contain duplicate visits."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisits(List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireAllNonNull(visits);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!visitsAreUnique(visits)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new DuplicateVisitException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        internalList.setAll(visits);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public ObservableList\u003cVisit\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Iterator\u003cVisit\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                || (other instanceof UniqueVisitList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueVisitList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if {@code visits} contains only unique visits."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private boolean visitsAreUnique(List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        for (int i \u003d 0; i \u003c visits.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            for (int j \u003d i + 1; j \u003c visits.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                if (visits.get(i).equals(visits.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DreamerDragon": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/Visit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Represents a Visit in the visit book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class Visit {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Visit(Person person, Location location, LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireAllNonNull(person, location, date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if the date of the visit corresponds to the entered date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean isSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return date \u003d\u003d this.date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if the person of the visit corresponds to the entered person"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean isSamePerson(Person person) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return person \u003d\u003d this.person;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if the location of the visit corresponds to the entered location"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean isSameLocation(Location location) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return location \u003d\u003d this.location;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if both visits have the same identity and data fields."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!(other instanceof Visit)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit otherVisit \u003d (Visit) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return otherVisit.getPerson().equals(getPerson())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 otherVisit.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 otherVisit.getDate().equals(getDate());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return Objects.hash(person, location, date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        builder.append(\" Person: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .append(getPerson().getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .append(getLocation().getName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .append(getDate().format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DreamerDragon": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/VisitBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Wraps all data at the visit-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class VisitBook implements ReadOnlyVisitBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final UniqueVisitList visits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visits \u003d new UniqueVisitList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBook() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Creates a VisitBook using the Visits in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBook(ReadOnlyVisitBook toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Replaces the contents of the visit list with {@code visits}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code visits} must not contain duplicate visits."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisits(List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.visits.setVisits(visits);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Resets the existing data of this {@code VisitBook} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void resetData(ReadOnlyVisitBook newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        setVisits(newData.getVisitList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    //// visit-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns true if a visit with the same identity as {@code visit} exists in the visit book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean hasVisit(Visit visit) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visits.contains(visit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Adds a Visit to the visit book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * The visit must not already exist in the visit book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void addVisit(Visit l) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visits.add(l);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Replaces the given visit {@code target} in the list with {@code editedVisit}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code target} must exist in the visit book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * The identities of {@code editedVisit} must not be the same as another existing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * visit in the visit book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisit(Visit target, Visit editedVisit) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(editedVisit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visits.setVisit(target, editedVisit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Removes {@code key} from this {@code VisitBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code key} must exist in the visit book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void removeVisit(Visit key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visits.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visits.asUnmodifiableObservableList().size() + \" visits\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public ObservableList\u003cVisit\u003e getVisitList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visits.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                || (other instanceof VisitBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                \u0026\u0026 visits.equals(((VisitBook) other).visits));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visits.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/exceptions/DuplicateVisitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.model.visit.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Signals that the operation will result in duplicate visits (Visits are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class DuplicateVisitException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public DuplicateVisitException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        super(\"Operation would result in duplicate visits\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DreamerDragon": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/exceptions/VisitNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.model.visit.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Signals that the operation is unable to find the specified visit."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class VisitNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DreamerDragon": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLocation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Jackson-friendly version of {@link Location}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonAdaptedLocation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Location\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs a {@code JsonAdaptedLocation} with the given location details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonAdaptedLocation(@JsonProperty(\"name\") String name, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                               @JsonProperty(\"id\") String id) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts a given {@code Location} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonAdaptedLocation(Location source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        id \u003d source.getId().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts this Jackson-friendly adapted location object into the model\u0027s {@code Location} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted location."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Id.isValidId(id)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Id modelId \u003d new Id(id);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Location(modelId, modelName, modelAddress);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final String quarantineStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final String infectionStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            @JsonProperty(\"quarantineStatus\") String quarantineStatus,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            @JsonProperty(\"infectionStatus\") String infectionStatus,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.quarantineStatus \u003d quarantineStatus;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.infectionStatus \u003d infectionStatus;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus \u003d source.getQuarantineStatus().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus \u003d source.getInfectionStatus().getStatusAsString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (quarantineStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, QuarantineStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!QuarantineStatus.isValidQuarantineStatus(quarantineStatus)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(QuarantineStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final QuarantineStatus modelQuarantineStatus \u003d new QuarantineStatus(quarantineStatus);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (infectionStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, InfectionStatus.class.getSimpleName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (!InfectionStatus.isValidInfectionStatus(infectionStatus)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new IllegalValueException(InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        final InfectionStatus modelInfectionStatus \u003d new InfectionStatus(infectionStatus);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Id.isValidId(id)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Id modelId \u003d new Id(id);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Person(modelId, modelName, modelPhone, modelEmail, modelAddress, modelQuarantineStatus,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                modelInfectionStatus, modelTags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 28,
      "siangernlow": 14,
      "hhdqirui": 8,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVisit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Jackson-friendly version of {@link Visit}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class JsonAdaptedVisit {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Visit\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String namePerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String addressPerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String quarantineStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String infectionStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String idPerson;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String nameLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String addressLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String idLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final String dateOfVisit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisit} with the given visit details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public JsonAdaptedVisit(@JsonProperty(\"namePerson\") String namePerson,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"addressPerson\") String addressPerson,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"quarantineStatus\") String quarantineStatus,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"infectionStatus\") String infectionStatus,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"idPerson\") String idPerson,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"nameLocation\") String nameLocation,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"addressLocation\") String addressLocation,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"idLocation\") String idLocation,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                            @JsonProperty(\"dateOfVisit\") String date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.namePerson \u003d namePerson;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.addressPerson \u003d addressPerson;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.quarantineStatus \u003d quarantineStatus;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.infectionStatus \u003d infectionStatus;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.idPerson \u003d idPerson;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.nameLocation \u003d nameLocation;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.addressLocation \u003d addressLocation;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.idLocation \u003d idLocation;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.dateOfVisit \u003d date;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Converts a given {@code Visit} into this class for Jackson use."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public JsonAdaptedVisit(Visit source) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        namePerson \u003d source.getPerson().getName().fullName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        phone \u003d source.getPerson().getPhone().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        email \u003d source.getPerson().getEmail().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        addressPerson \u003d source.getPerson().getAddress().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        quarantineStatus \u003d source.getPerson().getQuarantineStatus().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        infectionStatus \u003d source.getPerson().getInfectionStatus().getStatusAsString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        idPerson \u003d source.getPerson().getId().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        tagged.addAll(source.getPerson().getTags().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        nameLocation \u003d source.getLocation().getName().fullName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        addressLocation \u003d source.getLocation().getAddress().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        idLocation \u003d source.getLocation().getId().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        dateOfVisit \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Converts this Jackson-friendly adapted visit object into the model\u0027s {@code Visit} object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted visit."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Visit toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (namePerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!Name.isValidName(namePerson)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final Name modelName \u003d new Name(namePerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (addressPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!Address.isValidAddress(addressPerson)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final Address modelAddress \u003d new Address(addressPerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (quarantineStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, QuarantineStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!QuarantineStatus.isValidQuarantineStatus(quarantineStatus)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(QuarantineStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final QuarantineStatus modelQuarantineStatus \u003d new QuarantineStatus(quarantineStatus);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (infectionStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, InfectionStatus.class.getSimpleName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!InfectionStatus.isValidInfectionStatus(infectionStatus)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final InfectionStatus modelInfectionStatus \u003d new InfectionStatus(infectionStatus);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (idPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Id.isValidId(idPerson)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Id modelIdPerson \u003d new Id(idPerson);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Person modelPerson \u003d new Person(modelIdPerson, modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                modelQuarantineStatus, modelInfectionStatus, modelTags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (nameLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!Name.isValidName(nameLocation)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final Name modelNameLocation \u003d new Name(nameLocation);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (addressLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (!Address.isValidAddress(addressLocation)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        final Address modelAddressLocation \u003d new Address(addressLocation);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (idLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Id.isValidId(idLocation)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Id modelIdLocation \u003d new Id(idLocation);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Location modelLocation \u003d new Location(modelIdLocation, modelNameLocation, modelAddressLocation);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (dateOfVisit \u003d\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (dateOfVisit.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new IllegalValueException(\"Please enter the correct date format\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        LocalDate modelDate \u003d LocalDate.parse(dateOfVisit, inputFormat);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return new Visit(modelPerson, modelLocation, modelDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 23,
      "DreamerDragon": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonLocationBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A class to access LocationBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonLocationBookStorage implements LocationBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLocationBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonLocationBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return readLocationBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Similar to {@link #readLocationBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cJsonSerializableLocationBook\u003e jsonLocationBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                filePath, JsonSerializableLocationBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!jsonLocationBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.of(jsonLocationBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        saveLocationBook(locationBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Similar to {@link #saveLocationBook(ReadOnlyLocationBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(locationBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLocationBook(locationBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPersonBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A class to access PersonBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonPersonBookStorage implements PersonBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPersonBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonPersonBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cJsonSerializablePersonBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                filePath, JsonSerializablePersonBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (jsonAddressBook.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveAddressBook(ReadOnlyPersonBook personBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        saveAddressBook(personBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyPersonBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveAddressBook(ReadOnlyPersonBook personBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(personBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePersonBook(personBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 16,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableLocationBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * An Immutable LocationBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "@JsonRootName(value \u003d \"locationbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "class JsonSerializableLocationBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOCATION \u003d \"Locations list contains duplicate location(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final List\u003cJsonAdaptedLocation\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs a {@code JsonSerializableLocationBook} with the given locations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonSerializableLocationBook(@JsonProperty(\"locations\") List\u003cJsonAdaptedLocation\u003e locations) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locations.addAll(locations);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts a given {@code ReadOnlyLocationBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLocationBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonSerializableLocationBook(ReadOnlyLocationBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.addAll(source.getLocationList().stream().map(JsonAdaptedLocation::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts this location book into the model\u0027s {@code LocationBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook locationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (JsonAdaptedLocation jsonAdaptedLocation : locations) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Location location \u003d jsonAdaptedLocation.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (locationBook.hasLocation(location)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationBook.addLocation(location);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePersonBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * An Immutable PersonBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "class JsonSerializablePersonBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs a {@code JsonSerializablePersonBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonSerializablePersonBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts a given {@code ReadOnlyPersonBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePersonBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonSerializablePersonBook(ReadOnlyPersonBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts this person book into the model\u0027s {@code PersonBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public PersonBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook personBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (personBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            personBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 15,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableVisitBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * An Immutable VisitBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "@JsonRootName(value \u003d \"visitbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "class JsonSerializableVisitBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VISIT \u003d \"Visits list contains duplicate visit(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final List\u003cJsonAdaptedVisit\u003e visits \u003d new ArrayList\u003cJsonAdaptedVisit\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Constructs a {@code JsonSerializableVisitBook} with the given visits."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public JsonSerializableVisitBook(@JsonProperty(\"visits\") List\u003cJsonAdaptedVisit\u003e visits) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.visits.addAll(visits);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Converts a given {@code ReadOnlyVisitBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableVisitBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public JsonSerializableVisitBook(ReadOnlyVisitBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visits.addAll(source.getVisitList().stream().map(JsonAdaptedVisit::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Converts this visit book into the model\u0027s {@code VisitBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook visitBook \u003d new VisitBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        for (JsonAdaptedVisit jsonAdaptedVisit : visits) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            Visit visit \u003d jsonAdaptedVisit.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            if (visitBook.hasVisit(visit)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_VISIT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            visitBook.addVisit(visit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visitBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "DreamerDragon": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonVisitBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * A class to access VisitBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class JsonVisitBookStorage implements VisitBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonVisitBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public JsonVisitBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Path getVisitBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Optional\u003cReadOnlyVisitBook\u003e readVisitBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return readVisitBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Similar to {@link #readVisitBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Optional\u003cReadOnlyVisitBook\u003e readVisitBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Optional\u003cJsonSerializableVisitBook\u003e jsonVisitBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                filePath, JsonSerializableVisitBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        if (jsonVisitBook.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            return Optional.of(jsonVisitBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void saveVisitBook(ReadOnlyVisitBook visitBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        saveVisitBook(visitBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Similar to {@link #saveVisitBook(ReadOnlyVisitBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void saveVisitBook(ReadOnlyVisitBook visitBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(visitBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableVisitBook(visitBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LocationBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents a storage for {@link LocationBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface LocationBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns LocationBook data as a {@link ReadOnlyLocationBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see #getLocationBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyLocationBook\u003e readLocationBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Saves the given {@link ReadOnlyLocationBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param locationBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see #saveLocationBook(ReadOnlyLocationBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PersonBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents a storage for {@link PersonBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface PersonBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns PersonBook data as a {@link ReadOnlyPersonBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyPersonBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyPersonBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Saves the given {@link ReadOnlyPersonBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param personBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveAddressBook(ReadOnlyPersonBook personBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyPersonBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveAddressBook(ReadOnlyPersonBook personBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 12,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface Storage extends PersonBookStorage, LocationBookStorage, UserPrefsStorage, VisitBookStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyPersonBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveAddressBook(ReadOnlyPersonBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Path getVisitBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Optional\u003cReadOnlyVisitBook\u003e readVisitBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    void saveVisitBook(ReadOnlyVisitBook visitBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 14,
      "DreamerDragon": 9,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Manages storage of VirusTracker data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private PersonBookStorage personBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private LocationBookStorage locationBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private VisitBookStorage visitBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PersonBookStorage}, {@code LocationBookStorage},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * {@code VisitBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public StorageManager(PersonBookStorage personBookStorage, LocationBookStorage locationBookStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, VisitBookStorage visitBookStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.personBookStorage \u003d personBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBookStorage \u003d locationBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.visitBookStorage \u003d visitBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return readAddressBook(personBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyPersonBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveAddressBook(ReadOnlyPersonBook personBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        saveAddressBook(personBook, personBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveAddressBook(ReadOnlyPersonBook personBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBookStorage.saveAddressBook(personBook, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LocationBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBookStorage.getLocationBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return readLocationBook(locationBookStorage.getLocationBookFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBookStorage.readLocationBook(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        saveLocationBook(locationBook, locationBookStorage.getLocationBookFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBookStorage.saveLocationBook(locationBook, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d VisitBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Path getVisitBookFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visitBookStorage.getVisitBookFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Optional\u003cReadOnlyVisitBook\u003e readVisitBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return readVisitBook(visitBookStorage.getVisitBookFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Optional\u003cReadOnlyVisitBook\u003e readVisitBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visitBookStorage.readVisitBook(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void saveVisitBook(ReadOnlyVisitBook visitBook) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        saveVisitBook(visitBook, visitBookStorage.getVisitBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void saveVisitBook(ReadOnlyVisitBook visitBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visitBookStorage.saveVisitBook(visitBook, filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 48,
      "DreamerDragon": 33,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/VisitBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents a storage for {@link VisitBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public interface VisitBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Path getVisitBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns VisitBook data as a {@link ReadOnlyVisitBook}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Optional\u003cReadOnlyVisitBook\u003e readVisitBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @see #getVisitBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Optional\u003cReadOnlyVisitBook\u003e readVisitBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Saves the given {@link ReadOnlyVisitBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @param visitBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    void saveVisitBook(ReadOnlyVisitBook visitBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * @see #saveVisitBook(ReadOnlyVisitBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    void saveVisitBook(ReadOnlyVisitBook visitBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "DreamerDragon": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.list.LocationListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.list.PersonListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.list.VisitListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private LocationListPanel locationListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private VisitListPanel visitListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        locationListPanel \u003d new LocationListPanel(logic.getFilteredLocationList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        visitListPanel \u003d new VisitListPanel(logic.getFilteredVisitList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPersonBookFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (commandResult.getSwitchState().equals(CommandResult.SWITCH_TO_VIEW_PEOPLE)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (commandResult.getSwitchState().equals(CommandResult.SWITCH_TO_VIEW_LOCATIONS)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                listPanelPlaceholder.getChildren().add(locationListPanel.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (commandResult.getSwitchState().equals(CommandResult.SWITCH_TO_VIEW_VISITS)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                listPanelPlaceholder.getChildren().add(visitListPanel.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7,
      "-": 193,
      "KohHanMing": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/virus_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/list/LocationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class LocationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private static final String FXML \u003d \"LocationListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public final Location location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Label locationName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public LocationCard(Location location, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        index.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        id.setText(location.getId().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationName.setText(location.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        address.setText(location.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (!(other instanceof LocationCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        LocationCard card \u003d (LocationCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u0026\u0026 location.equals(card.location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "KohHanMing": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/list/LocationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class LocationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private static final String FXML \u003d \"LocationListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LocationListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private ListView\u003cLocation\u003e locationListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public LocationListPanel(ObservableList\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        locationListView.setItems(locationList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        locationListView.setCellFactory(listView -\u003e new LocationListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    class LocationListViewCell extends ListCell\u003cLocation\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        protected void updateItem(Location location, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            super.updateItem(location, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            if (empty || location \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                setGraphic(new LocationCard(location, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "KohHanMing": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/list/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Label personName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Label quarantineStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private Label infectionStatus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        index.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        id.setText(person.getId().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personName.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus.setText(\"Quarantine Status: \" + person.getQuarantineStatus().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus.setText(\"Infected: \" + person.getInfectionStatus().getStatusAsString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "siangernlow": 3,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/list/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/list/VisitCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class VisitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private static final String FXML \u003d \"VisitListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public final Visit visit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Label personName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Label locationName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public VisitCard(Visit visit, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        date.setText(\"Date: \" + visit.getDate().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        personName.setText(\"Visit by: \" + visit.getPerson().getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        locationName.setText(\"Location: \" + visit.getLocation().getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        VisitCard card \u003d (VisitCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u0026\u0026 visit.equals(card.visit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "DreamerDragon": 2,
      "KohHanMing": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/list/VisitListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class VisitListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private static final String FXML \u003d \"VisitListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private ListView\u003cVisit\u003e visitListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public VisitListPanel(ObservableList\u003cVisit\u003e visitList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        visitListView.setItems(visitList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        visitListView.setCellFactory(listView -\u003e new VisitListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    class VisitListViewCell extends ListCell\u003cVisit\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        protected void updateItem(Visit visit, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            super.updateItem(visit, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            if (empty || visit \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                setGraphic(new VisitCard(visit, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "KohHanMing": 48
    }
  },
  {
    "path": "src/main/resources/view/LocationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u003cLabel fx:id\u003d\"locationName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$id\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "KohHanMing": 30
    }
  },
  {
    "path": "src/main/resources/view/LocationListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    \u003cListView fx:id\u003d\"locationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         title\u003d\"VirusTracker\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    \u003cImage url\u003d\"@/images/virus_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003cVBox fx:id\u003d\"list\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 55,
      "KohHanMing": 2
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        \u003cLabel fx:id\u003d\"personName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$id\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "      \u003cLabel fx:id\u003d\"quarantineStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quarantineStatus\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "      \u003cLabel fx:id\u003d\"infectionStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$infectionStatus\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 4,
      "siangernlow": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/VisitListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u003cLabel fx:id\u003d\"personName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            \u003cLabel fx:id\u003d\"locationName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 33
    }
  },
  {
    "path": "src/main/resources/view/VisitListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    \u003cListView fx:id\u003d\"visitListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void hashCode_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).hashCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(100, Index.fromOneBased(100).hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(29, Index.fromZeroBased(28).hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(555, Index.fromZeroBased(554).hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhdqirui": 8,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/virus_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.JsonLocationBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.JsonPersonBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.JsonVisitBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonPersonBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonPersonBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage locationBookStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonLocationBookStorage(temporaryFolder.resolve(\"locationBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonVisitBookStorage visitBookStorage \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new JsonVisitBookStorage(temporaryFolder.resolve(\"visitBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, locationBookStorage,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                userPrefsStorage, visitBookStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(clearCommand, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonPersonBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonPersonBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage locationBookStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonLocationBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionLocationBook.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonVisitBookStorage visitBookStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new JsonVisitBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionVisitBook.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, locationBookStorage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                userPrefsStorage, visitBookStorage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String addCommand \u003d AddPersonCommand.COMMAND_WORD + ID_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + QUARANTINE_STATUS_DESC_AMY + INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void getFilteredLocationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredLocationList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void getFilteredVisitList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredVisitList().remove(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static class JsonPersonBookIoExceptionThrowingStub extends JsonPersonBookStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private JsonPersonBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void saveAddressBook(ReadOnlyPersonBook personBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static class JsonLocationBookIoExceptionThrowingStub extends JsonLocationBookStorage {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private JsonLocationBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static class JsonVisitBookIoExceptionThrowingStub extends JsonVisitBookStorage {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        private JsonVisitBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        public void saveVisitBook(ReadOnlyVisitBook visitBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 38,
      "DreamerDragon": 15,
      "siangernlow": 4,
      "-": 152,
      "KohHanMing": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(), new LocationBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new VisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // test that all books are cleared"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // test that person book is cleared"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new LocationBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new VisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // test that location book is cleared"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model \u003d new ModelManager(new PersonBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new VisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // test that visit book is cleared"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model \u003d new ModelManager(new PersonBook(), new LocationBook(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 24,
      "DreamerDragon": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                false, false, CommandResult.SWITCH_NONE)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                true, false, CommandResult.SWITCH_NONE)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                false, true, CommandResult.SWITCH_NONE)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                true, false, CommandResult.SWITCH_NONE).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                false, true, CommandResult.SWITCH_NONE).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "KohHanMing": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.EditLocationDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_NAME_NUS \u003d \"NUS\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_NAME_VIVOCITY \u003d \"Vivocity\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ADDRESS_NUS \u003d \"21 Lower Kent Ridge Rd, Singapore 119077\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ADDRESS_VIVOCITY \u003d \"1 HarbourFront Walk, Singapore 098585\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_QUARANTINE_STATUS_AMY \u003d \"true\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_QUARANTINE_STATUS_BOB \u003d \"false\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String VALID_INFECTION_STATUS_AMY \u003d \"false\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String VALID_INFECTION_STATUS_BOB \u003d \"true\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ID_AMY_LOCATION \u003d \"L9\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ID_BOB_LOCATION \u003d \"L10\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ID_AMY \u003d \"S9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ID_BOB \u003d \"S10\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ID_NUS \u003d \"L1\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_ID_VIVOCITY \u003d \"L2\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String ID_DESC_AMY \u003d \" \" + PREFIX_PERSON_ID + VALID_ID_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String ID_DESC_BOB \u003d \" \" + PREFIX_PERSON_ID + VALID_ID_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String ID_DESC_AMY_LOCATION \u003d \" \" + PREFIX_LOCATION_ID + VALID_ID_AMY_LOCATION;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String ID_DESC_BOB_LOCATION \u003d \" \" + PREFIX_LOCATION_ID + VALID_ID_BOB_LOCATION;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String NAME_DESC_NUS \u003d \" \" + PREFIX_NAME + VALID_NAME_NUS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String NAME_DESC_VIVOCITY \u003d \" \" + PREFIX_NAME + VALID_NAME_VIVOCITY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String ADDRESS_DESC_NUS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_NUS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String ADDRESS_DESC_VIVOCITY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_VIVOCITY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String QUARANTINE_STATUS_DESC_AMY \u003d \" \" + PREFIX_QUARANTINE_STATUS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + VALID_QUARANTINE_STATUS_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String QUARANTINE_STATUS_DESC_BOB \u003d \" \" + PREFIX_QUARANTINE_STATUS"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INFECTION_DESC_AMY \u003d \" \" + PREFIX_INFECTION + VALID_INFECTION_STATUS_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INFECTION_DESC_BOB \u003d \" \" + PREFIX_INFECTION + VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String INVALID_PERSON_ID_DESC \u003d \" \" + PREFIX_PERSON_ID + \" \"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String INVALID_LOCATION_ID_DESC \u003d \" \" + PREFIX_LOCATION_ID + \" \"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String INVALID_QUARANTINE_STATUS_DESC \u003d \" \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_QUARANTINE_STATUS + \"quarantined\"; // only booleans allowed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INVALID_INFECTION_DESC \u003d \" \" + PREFIX_INFECTION + \"nope\"; // only true or false allowed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String INVALID_ID_LOCATION \u003d \" -1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final EditLocationCommand.EditLocationDescriptor DESC_NUS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final EditLocationCommand.EditLocationDescriptor DESC_VIVOCITY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY).withInfectionStatus(VALID_INFECTION_STATUS_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withId(VALID_ID_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withInfectionStatus(VALID_INFECTION_STATUS_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DESC_NUS \u003d new EditLocationDescriptorBuilder().withName(VALID_NAME_NUS)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withAddress(VALID_ADDRESS_NUS).withId(VALID_ID_NUS).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DESC_VIVOCITY \u003d new EditLocationDescriptorBuilder().withName(VALID_NAME_VIVOCITY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withAddress(VALID_ADDRESS_VIVOCITY).withId(VALID_ID_VIVOCITY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook expectedPersonBook \u003d new PersonBook(actualModel.getPersonBook());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedPersonBook, actualModel.getPersonBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the location at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code model}\u0027s location book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static void showLocationAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredLocationList().size());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d model.getFilteredLocationList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final String[] splitName \u003d location.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.updateFilteredLocationList(new LocationNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(1, model.getFilteredLocationList().size());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 65,
      "siangernlow": 6,
      "hhdqirui": 3,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                false, true, CommandResult.SWITCH_NONE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "KohHanMing": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GenerateLocationsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.commands.GenerateLocationsCommand.MESSAGE_PERSON_HAS_NO_VISITS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.commands.GenerateLocationsCommand.MESSAGE_PERSON_IS_NOT_INFECTED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_INFECTED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_QUARANTINED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GenerateLocationsCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index secondIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand firstGenerateLocationsCommand \u003d new GenerateLocationsCommand(firstIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand secondGenerateLocationsCommand \u003d new GenerateLocationsCommand(secondIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertTrue(firstGenerateLocationsCommand.equals(firstGenerateLocationsCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand copyOfGenerateLocationsCommand \u003d new GenerateLocationsCommand(firstIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertTrue(firstGenerateLocationsCommand.equals(copyOfGenerateLocationsCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(firstGenerateLocationsCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(firstGenerateLocationsCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(firstGenerateLocationsCommand.equals(secondGenerateLocationsCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_indexOutOfBounds_throwCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(100);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand command \u003d new GenerateLocationsCommand(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_personAtIndexNotInfected_throwCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_PERSON_IS_NOT_INFECTED;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand command \u003d new GenerateLocationsCommand(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_noVisitsFound_throwCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_PERSON_HAS_NO_VISITS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        model.deleteVisit(model.getVisitBook().getVisitList().get(6));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand command \u003d new GenerateLocationsCommand(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_validInputFromViewingAllPeople_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d \"Generated locations for: Daniel Meier\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Model expectedModelForGenerate \u003d expectedModel;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Predicate\u003cLocation\u003e locationPredicate \u003d location -\u003e location.getId().equals(\"L456D\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        expectedModelForGenerate.updateFilteredLocationList(locationPredicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand command \u003d new GenerateLocationsCommand(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModelForGenerate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_validInputFromViewingAllInfected_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult expectedCommand \u003d new CommandResult(\"Generated locations for: Benson Meier\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                false, false, CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Model modelForAllInfected \u003d model;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        modelForAllInfected.updateFilteredPersonList(PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Model expectedModelForGenerate \u003d expectedModel;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Predicate\u003cLocation\u003e locationPredicate \u003d location -\u003e location.getId().equals(\"L456D\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        expectedModelForGenerate.updateFilteredPersonList(PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        expectedModelForGenerate.updateFilteredLocationList(locationPredicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand command \u003d new GenerateLocationsCommand(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertCommandSuccess(command, modelForAllInfected, expectedCommand, expectedModelForGenerate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_invalidInputFromViewingAllQuarantined_throwCommandException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Model modelForAllQuarantined \u003d model;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        modelForAllQuarantined.updateFilteredPersonList(PREDICATE_SHOW_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand command \u003d new GenerateLocationsCommand(index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(modelForAllQuarantined));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7,
      "siangernlow": 3,
      "KohHanMing": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GeneratePeopleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.commands.GeneratePeopleCommand.MESSAGE_NO_PEOPLE_FOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.commands.GeneratePeopleCommand.MESSAGE_PERSON_HAS_NO_VISITS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.commands.GeneratePeopleCommand.MESSAGE_PERSON_IS_NOT_INFECTED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_INFECTED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_QUARANTINED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.DANIEL_LOCATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GeneratePeopleCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index secondIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand firstGeneratePeopleCommand \u003d new GeneratePeopleCommand(firstIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand secondGeneratePeopleCommand \u003d new GeneratePeopleCommand(secondIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertTrue(firstGeneratePeopleCommand.equals(firstGeneratePeopleCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand copyOfGeneratePeopleCommand \u003d new GeneratePeopleCommand(firstIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertTrue(firstGeneratePeopleCommand.equals(copyOfGeneratePeopleCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(firstGeneratePeopleCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(firstGeneratePeopleCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertFalse(firstGeneratePeopleCommand.equals(secondGeneratePeopleCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_indexOutOfBounds_throwCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(100);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand command \u003d new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_personAtIndexNotInfected_throwCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_PERSON_IS_NOT_INFECTED;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand command \u003d new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_noVisitsFound_throwCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_PERSON_HAS_NO_VISITS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        model.deleteVisit(model.getVisitBook().getVisitList().get(6));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand command \u003d new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_noPeopleFound_throwCommandException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_PEOPLE_FOUND;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand command \u003d new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_validInputFromViewingAllPeople_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d \"Generated people for: Daniel Meier\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Visit testVisit \u003d new Visit(new PersonBuilder().withId(\"S8910H\").build(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                DANIEL_LOCATION, DEFAULT_DATE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        model.addVisit(testVisit);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Model expectedModelForGenerate \u003d expectedModel;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        expectedModelForGenerate.addVisit(testVisit);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Predicate\u003cPerson\u003e personPredicate \u003d person -\u003e person.getId().equals(\"S8910H\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        expectedModelForGenerate.updateFilteredPersonList(personPredicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand command \u003d new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModelForGenerate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_validInputFromViewingAllInfected_noPeopleFound() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_PEOPLE_FOUND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Model modelForAllInfected \u003d model;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        modelForAllInfected.updateFilteredPersonList(PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand command \u003d new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            assertTrue(e.getMessage().equals(expectedMessage));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void execute_invalidInputFromViewingAllQuarantined_throwCommandException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Model modelForAllQuarantined \u003d model;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        modelForAllQuarantined.updateFilteredPersonList(PREDICATE_SHOW_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand command \u003d new GeneratePeopleCommand(index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(modelForAllQuarantined));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 6,
      "KohHanMing": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                true, false, CommandResult.SWITCH_NONE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "KohHanMing": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.parser.ListType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType PEOPLE_LIST \u003d ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType LOCATIONS_LIST \u003d ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType VISITS_LIST \u003d ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final ListType INFECTED_LIST \u003d ListType.ALL_INFECTED;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final ListType QUARANTINED_LIST \u003d ListType.ALL_QUARANTINED;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType STATISTICS_LIST \u003d ListType.STATISTICS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType HIGH_RISK_LOCATIONS_LIST \u003d ListType.HIGH_RISK_LOCATIONS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_personsListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_SUCCESS_ALL_PEOPLE, false, false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(PEOPLE_LIST),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_personsListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_SUCCESS_ALL_PEOPLE, false, false,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(PEOPLE_LIST),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_locationsList_showsSameList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_SUCCESS_ALL_LOCATIONS, false, false,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(LOCATIONS_LIST),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_visitsList_showsSameList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_SUCCESS_ALL_VISITS, false, false,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void execute_infectedList_showsSameList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModelInfected \u003d expectedModel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModelInfected.updateFilteredPersonList(ModelPredicate.PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_SUCCESS_ALL_INFECTED, false, false,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertCommandSuccess(new ListCommand(INFECTED_LIST),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model, expectedCommandResult, expectedModelInfected);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void execute_quarantinedList_showsSameList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModelQuarantined \u003d expectedModel;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModelQuarantined.updateFilteredPersonList(ModelPredicate.PREDICATE_SHOW_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_SUCCESS_ALL_QUARANTINED,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                false, false, CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertCommandSuccess(new ListCommand(QUARANTINED_LIST),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model, expectedCommandResult, expectedModelQuarantined);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_statistics_showsSameList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        //changed due to merge conflict"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_STATISTICS + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + \"Total number of people: 7\" + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + \"Total number of locations: 7\" + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + \"Total number of visits: 8\" + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + \"Total number of infected people: 5\" + \"\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + \"Total number of quarantined people: 2\" + \"\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + \"Percentage of people infected: 71.43%\" + \"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + \"Percentage of people quarantined: 28.57%\" + \"\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // assertCommandSuccess(new ListCommand(STATISTICS_LIST),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        //       model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_highRiskLocations_showsSameList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Model expectedModelHighRiskLocations \u003d expectedModel;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModelHighRiskLocations.updateFilteredLocationList("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                ModelPredicate.getPredicateForHighRiskLocations(expectedModelHighRiskLocations));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_SUCCESS_HIGH_RISK_LOCATIONS,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                false, false, CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(HIGH_RISK_LOCATIONS_LIST),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model, expectedCommandResult, expectedModelHighRiskLocations);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand listPersonsCommand \u003d new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(listPersonsCommand.equals(listPersonsCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand listPersonsCommandCopy \u003d new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(listPersonsCommand.equals(listPersonsCommandCopy));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand differentListCommand \u003d new ListCommand(LOCATIONS_LIST);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(listPersonsCommand.equals(differentListCommand));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(listPersonsCommand.equals(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(listPersonsCommand.equals(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 25,
      "DreamerDragon": 5,
      "siangernlow": 68,
      "hhdqirui": 12,
      "-": 31,
      "KohHanMing": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/location/AddLocationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLocationCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_locationAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelStubAcceptingLocationAdded modelStub \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommandTest.ModelStubAcceptingLocationAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location validLocation \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult commandResult \u003d new AddLocationCommand(validLocation).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(String.format(AddLocationCommand.MESSAGE_SUCCESS, validLocation),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(Arrays.asList(validLocation), modelStub.locationsAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_duplicateLocation_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location validLocation \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addLocationCommand \u003d new AddLocationCommand(validLocation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStub modelStub \u003d new AddLocationCommandTest.ModelStubWithLocation(validLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(CommandException.class, AddLocationCommand.MESSAGE_DUPLICATE_LOCATION, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                addLocationCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location alice \u003d new LocationBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location bob \u003d new LocationBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addAliceCommand \u003d new AddLocationCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addBobCommand \u003d new AddLocationCommand(bob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addAliceCommandCopy \u003d new AddLocationCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A Model stub that contains a single location."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private class ModelStubWithLocation extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private final Location location;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelStubWithLocation(Location location) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return this.location.isSameLocation(location);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A Model stub that always accept the location being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private class ModelStubAcceptingLocationAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final ArrayList\u003cLocation\u003e locationsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return locationsAdded.stream().anyMatch(location::isSameLocation);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void addLocation(Location location) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationsAdded.add(location);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new LocationBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 113,
      "siangernlow": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/location/AddLocationsFromCsvCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.AddFromCsvCommand.MESSAGE_DUPLICATES_NOT_ADDED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.AddFromCsvCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.location.AddLocationsFromCsvCommand.LOCATIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.location.AddLocationsFromCsvCommand.MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BENSON_LOCATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.TypicalLocations;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddLocationsFromCsvCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_nullLocations_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLocationsFromCsvCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_locationsAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingLocationsAdded expectedModel \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ModelStubAcceptingLocationsAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingLocationsAdded actualModel \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ModelStubAcceptingLocationsAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e locationsToAdd \u003d TypicalLocations.getTypicalLocations();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Location location : locationsToAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            expectedModel.addLocation(location);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddLocationsFromCsvCommand actualCommand \u003d new AddLocationsFromCsvCommand(locationsToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new CommandResult(String.format(MESSAGE_SUCCESS, locationsToAdd.size(), LOCATIONS),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        false, false, CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, actualModel, commandResult, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_emptyLocationsList_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingLocationsAdded model \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ModelStubAcceptingLocationsAdded();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e locationsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddLocationsFromCsvCommand actualCommand \u003d new AddLocationsFromCsvCommand(locationsToAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_EMPTY_LIST, ()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e actualCommand.execute(model));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_duplicateLocations_successWithWarning() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingLocationsAdded expectedModel \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ModelStubAcceptingLocationsAdded();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingLocationsAdded actualModel \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ModelStubAcceptingLocationsAdded();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e locationsToAdd \u003d TypicalLocations.getTypicalLocations();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Location location : locationsToAdd) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            expectedModel.addLocation(location);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int numOfUniqueAdditions \u003d locationsToAdd.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Duplicate locations"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        locationsToAdd.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        locationsToAdd.add(BENSON_LOCATION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddLocationsFromCsvCommand actualCommand \u003d new AddLocationsFromCsvCommand(locationsToAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String linesWithDuplicates \u003d String.format(\"%d %d \", locationsToAdd.size() - 1, locationsToAdd.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, numOfUniqueAdditions, LOCATIONS)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + String.format(MESSAGE_DUPLICATES_NOT_ADDED, LOCATIONS, linesWithDuplicates);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        false, false, CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, actualModel, commandResult, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Location house \u003d new LocationBuilder().withName(\"house\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Location school \u003d new LocationBuilder().withName(\"school\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e locationsAddHouse \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        locationsAddHouse.add(house);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e locationsAddHouseAndSchool \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        locationsAddHouseAndSchool.add(house);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        locationsAddHouseAndSchool.add(school);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddLocationsFromCsvCommand addHouseCommand \u003d new AddLocationsFromCsvCommand(locationsAddHouse);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddLocationsFromCsvCommand addHouseAndSchoolCommand \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddLocationsFromCsvCommand(locationsAddHouseAndSchool);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(addHouseCommand, addHouseCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddLocationsFromCsvCommand addHouseCommandCopy \u003d new AddLocationsFromCsvCommand(locationsAddHouse);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(addHouseCommandCopy, addHouseCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addHouseCommand, 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addHouseCommand, null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different location lists -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addHouseAndSchoolCommand, addHouseCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * A Model stub that always accepts the locations being added."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static class ModelStubAcceptingLocationsAdded extends ModelStub {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private final ArrayList\u003cLocation\u003e locationsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public ArrayList\u003cLocation\u003e getLocationsAdded() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return locationsAdded;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return locationsAdded.contains(location);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void addLocation(Location location) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            locationsAdded.add(location);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (!(obj instanceof ModelStubAcceptingLocationsAdded)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            ModelStubAcceptingLocationsAdded other \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    (ModelStubAcceptingLocationsAdded) obj;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return locationsAdded.equals(other.getLocationsAdded());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/location/DeleteLocationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showLocationAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ID_NOT_IN_TYPICAL_LOCATIONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeleteLocationCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location locationToDelete \u003d model.getFilteredLocationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteLocationCommand \u003d new DeleteLocationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteLocationCommand.MESSAGE_DELETE_LOCATION_SUCCESS, locationToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel.deleteLocation(locationToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deleteLocationCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLocationList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteLocationCommand \u003d new DeleteLocationCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(deleteLocationCommand, model, Messages.MESSAGE_INVALID_LOCATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showLocationAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location locationToDelete \u003d model.getFilteredLocationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteLocationCommand \u003d new DeleteLocationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteLocationCommand.MESSAGE_DELETE_LOCATION_SUCCESS, locationToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel.deleteLocation(locationToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showNoLocation(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deleteLocationCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showLocationAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of location book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLocationBook().getLocationList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteLocationCommand \u003d new DeleteLocationCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(deleteLocationCommand, model, Messages.MESSAGE_INVALID_LOCATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_validId_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location locationToDelete \u003d model.getFilteredLocationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteLocationCommand \u003d new DeleteLocationCommand(locationToDelete.getId());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteLocationCommand.MESSAGE_DELETE_LOCATION_SUCCESS, locationToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel.deleteLocation(locationToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deleteLocationCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_invalidId_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteLocationCommand \u003d new DeleteLocationCommand(ID_NOT_IN_TYPICAL_LOCATIONS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(deleteLocationCommand, model, Messages.MESSAGE_INVALID_LOCATION_ID);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteFirstIndexCommand \u003d new DeleteLocationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteSecondIndexCommand \u003d new DeleteLocationCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIndexCommand.equals(deleteFirstIndexCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteFirstIndexCommandCopy \u003d new DeleteLocationCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIndexCommand.equals(deleteFirstIndexCommandCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIndexCommand.equals(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIndexCommand.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIndexCommand.equals(deleteSecondIndexCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteFirstIdCommand \u003d new DeleteLocationCommand(new Id(\"L1\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteSecondIdCommand \u003d new DeleteLocationCommand(new Id(\"L2\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIdCommand.equals(deleteFirstIdCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand deleteFirstIdCommandCopy \u003d new DeleteLocationCommand(new Id(\"L1\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIdCommand.equals(deleteFirstIdCommandCopy));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(deleteSecondIdCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different identification -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(deleteFirstIndexCommand));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no location."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private void showNoLocation(Model model) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.updateFilteredLocationList(p -\u003e false);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(model.getFilteredLocationList().isEmpty());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/location/EditLocationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_NUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VIVOCITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showLocationAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand.EditLocationDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.EditLocationDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditLocationCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "class EditLocationCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedLocation \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder(editedLocation).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditLocationCommand.MESSAGE_EDIT_LOCATION_SUCCESS, editedLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel.setLocation(model.getFilteredLocationList().get(0), editedLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editLocationCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index indexLastLocation \u003d Index.fromOneBased(model.getFilteredLocationList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location lastLocation \u003d model.getFilteredLocationList().get(indexLastLocation.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBuilder locationInList \u003d new LocationBuilder(lastLocation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedLocation \u003d locationInList.withName(VALID_NAME_NUS).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder().withName(VALID_NAME_NUS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(indexLastLocation, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditLocationCommand.MESSAGE_EDIT_LOCATION_SUCCESS, editedLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel.setLocation(lastLocation, editedLocation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editLocationCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new EditLocationCommand.EditLocationDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedLocation \u003d model.getFilteredLocationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditLocationCommand.MESSAGE_EDIT_LOCATION_SUCCESS, editedLocation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editLocationCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showLocationAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location locationInFilteredList \u003d model.getFilteredLocationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedLocation \u003d new LocationBuilder(locationInFilteredList).withName(VALID_NAME_NUS).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new EditLocationDescriptorBuilder().withName(VALID_NAME_NUS).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditLocationCommand.MESSAGE_EDIT_LOCATION_SUCCESS, editedLocation);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel.setLocation(model.getFilteredLocationList().get(0), editedLocation);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_LOCATIONS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editLocationCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_duplicateLocationUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location firstLocation \u003d model.getFilteredLocationList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder(firstLocation).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editLocationCommand, model, EditLocationCommand.MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_duplicateLocationFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showLocationAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // edit location in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location locationInList \u003d model.getLocationBook().getLocationList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new EditLocationDescriptorBuilder(locationInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editLocationCommand, model, EditLocationCommand.MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_invalidLocationIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLocationList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand.EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_NUS).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editLocationCommand, model, Messages.MESSAGE_INVALID_LOCATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_invalidLocationIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showLocationAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of location book list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLocationBook().getLocationList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand editLocationCommand \u003d new EditLocationCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new EditLocationDescriptorBuilder().withName(VALID_NAME_NUS).build());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editLocationCommand, model, Messages.MESSAGE_INVALID_LOCATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final EditLocationCommand standardCommand \u003d new EditLocationCommand(INDEX_FIRST, DESC_NUS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor copyDescriptor \u003d new EditLocationCommand.EditLocationDescriptor(DESC_NUS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand commandWithSameValues \u003d new EditLocationCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditLocationCommand(INDEX_SECOND, DESC_NUS)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditLocationCommand(INDEX_FIRST, DESC_VIVOCITY)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 188
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/location/EditLocationDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_NUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VIVOCITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_VIVOCITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_VIVOCITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand.EditLocationDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.EditLocationDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditLocationDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptorWithSameValues \u003d new EditLocationDescriptor(DESC_NUS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(DESC_NUS.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(DESC_NUS.equals(DESC_NUS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(DESC_NUS.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(DESC_NUS.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(DESC_NUS.equals(DESC_VIVOCITY));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor editedNus \u003d new EditLocationDescriptorBuilder(DESC_NUS)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_VIVOCITY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedNus \u003d new EditLocationDescriptorBuilder(DESC_NUS).withAddress(VALID_ADDRESS_VIVOCITY).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddPersonCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddPersonCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Person validPerson \u003d TypicalPersons.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(new AddPersonCommand(validPerson), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person personInList \u003d model.getPersonBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 14,
      "DreamerDragon": 2,
      "hhdqirui": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddPersonCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(CommandException.class, AddPersonCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                addPersonCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new PersonBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 16,
      "siangernlow": 1,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddPersonsFromCsvCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.AddFromCsvCommand.MESSAGE_DUPLICATES_NOT_ADDED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.AddFromCsvCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.person.AddPersonsFromCsvCommand.MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.person.AddPersonsFromCsvCommand.PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddPersonsFromCsvCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_nullPersons_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPersonsFromCsvCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_personsAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded expectedModel \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded actualModel \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e personsToAdd \u003d TypicalPersons.getTypicalPersons();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Person person : personsToAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            expectedModel.addPerson(person);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommand actualCommand \u003d new AddPersonsFromCsvCommand(personsToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new CommandResult(String.format(MESSAGE_SUCCESS, personsToAdd.size(), PERSONS),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        false, false, CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, actualModel, commandResult, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_emptyPersonsList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded model \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e personsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommand actualCommand \u003d new AddPersonsFromCsvCommand(personsToAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_EMPTY_LIST, ()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e actualCommand.execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_duplicatePersons_successWithWarning() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded expectedModel \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded actualModel \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e personsToAdd \u003d TypicalPersons.getTypicalPersons();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Person person : personsToAdd) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            expectedModel.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int numOfUniqueAdditions \u003d personsToAdd.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Duplicate people"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        personsToAdd.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        personsToAdd.add(BENSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommand actualCommand \u003d new AddPersonsFromCsvCommand(personsToAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String linesWithDuplicates \u003d String.format(\"%d %d \", personsToAdd.size() - 1, personsToAdd.size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, numOfUniqueAdditions, PERSONS)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + String.format(MESSAGE_DUPLICATES_NOT_ADDED, PERSONS, linesWithDuplicates);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        false, false, CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, actualModel, commandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"alice\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"bob\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e personsAddAlice \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        personsAddAlice.add(alice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e personsAddAliceAndBob \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        personsAddAliceAndBob.add(alice);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        personsAddAliceAndBob.add(bob);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommand addAliceCommand \u003d new AddPersonsFromCsvCommand(personsAddAlice);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommand addAliceAndBobCommand \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddPersonsFromCsvCommand(personsAddAliceAndBob);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommand addHouseCommandCopy \u003d new AddPersonsFromCsvCommand(personsAddAlice);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(addHouseCommandCopy, addAliceCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addAliceCommand, 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addAliceCommand, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different person lists -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addAliceAndBobCommand, addAliceCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * A Model stub that always accepts the person being added."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static class ModelStubAcceptingPersonsAdded extends ModelStub {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public ArrayList\u003cPerson\u003e getPersonsAdded() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return personsAdded;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return personsAdded.contains(person);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (!(obj instanceof AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded other \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    (AddPersonsFromCsvCommandTest.ModelStubAcceptingPersonsAdded) obj;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return personsAdded.equals(other.getPersonsAdded());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/DeletePersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ID_NOT_IN_TYPICAL_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * {@code DeletePersonCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeletePersonCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonBook().getPersonList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_validId_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(personToDelete.getId());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_invalidId_throwsCommandException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(ID_NOT_IN_TYPICAL_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_ID);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deleteFirstIndexCommand \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deleteSecondIndexCommand \u003d new DeletePersonCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIndexCommand.equals(deleteFirstIndexCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deleteFirstIndexCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIndexCommand.equals(deleteFirstIndexCommandCopy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIndexCommand.equals(1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIndexCommand.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIndexCommand.equals(deleteSecondIndexCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deleteFirstIdCommand \u003d new DeletePersonCommand(new Id(\"S1\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deleteSecondIdCommand \u003d new DeletePersonCommand(new Id(\"S2\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIdCommand.equals(deleteFirstIdCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand deleteFirstIdCommandCopy \u003d new DeletePersonCommand(new Id(\"S1\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(deleteFirstIdCommand.equals(deleteFirstIdCommandCopy));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(deleteSecondIdCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different identification -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(deleteFirstIdCommand.equals(deleteFirstIndexCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 88,
      "DreamerDragon": 2,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * and unit tests for EditPersonCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditPersonCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PersonBook(model.getPersonBook()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new VisitBook(model.getVisitBook()), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person personInList \u003d model.getPersonBook().getPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonBook().getPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final EditPersonCommand standardCommand \u003d new EditPersonCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 66,
      "DreamerDragon": 2,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different quarantine status -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different infection status -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7,
      "siangernlow": 5,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/FindPersonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class FindPersonCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FindPersonCommand command \u003d new FindPersonCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FindPersonCommand command \u003d new FindPersonCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_PEOPLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 18,
      "DreamerDragon": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/visit/AddVisitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showLocationAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.FIONA_LOCATION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.INFECTED_AND_QUARANTINED_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.INFECTED_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.QUARANTINED_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_DATE_STRING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_LOCATION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_LOCATION_ID;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_LOCATION_INDEX;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_PERSON_ID;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_PERSON_INDEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.VisitBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddVisitCommandTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitCommand(DEFAULT_PERSON_INDEX,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                DEFAULT_LOCATION_INDEX, null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitCommand(DEFAULT_PERSON_INDEX,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                null, DEFAULT_DATE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitCommand(null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                DEFAULT_LOCATION_INDEX, DEFAULT_DATE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitCommand(DEFAULT_PERSON_ID,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DEFAULT_LOCATION_ID, null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitCommand(DEFAULT_PERSON_ID,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                null, DEFAULT_DATE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitCommand(null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DEFAULT_LOCATION_ID, DEFAULT_DATE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_unfilteredListIndex_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded modelStub \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Visit validVisit \u003d new VisitBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            CommandResult commandResult \u003d new AddVisitCommand(DEFAULT_PERSON_INDEX, DEFAULT_LOCATION_INDEX,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    DEFAULT_DATE).execute(modelStub);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertEquals(String.format(AddVisitCommand.MESSAGE_SUCCESS, validVisit),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertEquals(Arrays.asList(validVisit), modelStub.visitsAdded);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertEquals(commandResult.getSwitchState(), CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assert false : \"Command Exception not expected.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_unfilteredListId_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelStubAcceptingVisitAdded modelStub \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Visit validVisit \u003d new VisitBuilder().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            CommandResult commandResult \u003d new AddVisitCommand(DEFAULT_PERSON_ID, DEFAULT_LOCATION_ID,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    DEFAULT_DATE).execute(modelStub);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            assertEquals(String.format(AddVisitCommand.MESSAGE_SUCCESS, validVisit),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            assertEquals(Arrays.asList(validVisit), modelStub.visitsAdded);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            assertEquals(commandResult.getSwitchState(), CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            assert false : \"Command Exception not expected.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_filteredListIndex_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new VisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        showLocationAtIndex(model, INDEX_THIRD);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        showPersonAtIndex(model, INDEX_FOURTH);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Location location \u003d model.getFilteredLocationList().get(0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Visit validVisit \u003d new VisitBuilder().withDate(DEFAULT_DATE_STRING)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .withLocation(location)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .withPerson(person)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            CommandResult commandResult \u003d new AddVisitCommand(INDEX_FIRST, INDEX_FIRST, DEFAULT_DATE).execute(model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertEquals(model.getFilteredVisitList().get(0), validVisit);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertEquals(commandResult.getSwitchState(), CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assert false : \"Command Exception not expected.\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_duplicateVisitIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Visit validVisit \u003d new VisitBuilder().build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitCommand addvisitCommand \u003d new AddVisitCommand(DEFAULT_PERSON_INDEX, DEFAULT_LOCATION_INDEX,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                DEFAULT_DATE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStub modelStub \u003d new AddVisitCommandTest.ModelStubWithVisit(validVisit);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(CommandException.class, AddVisitCommand.MESSAGE_DUPLICATE_VISIT, () -\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                addvisitCommand.execute(modelStub));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_infectedVisit_successWithWarning() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded model \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded expectedModel \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Visit visitWithInfected \u003d new VisitBuilder().withPerson(INFECTED_PERSON).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModel.addVisit(visitWithInfected);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddVisitCommand actualCommand \u003d new AddVisitCommand(INDEX_FOURTH, INDEX_SECOND,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                DEFAULT_DATE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(AddVisitCommand.MESSAGE_INFECTED_MADE_VISIT, visitWithInfected);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_quarantinedVisit_successWithWarning() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded model \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded expectedModel \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Visit visitWithQuarantined \u003d new VisitBuilder().withPerson(QUARANTINED_PERSON).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModel.addVisit(visitWithQuarantined);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddVisitCommand actualCommand \u003d new AddVisitCommand(INDEX_FIRST, INDEX_SECOND,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                DEFAULT_DATE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(AddVisitCommand.MESSAGE_QUARANTINED_MADE_VISIT, visitWithQuarantined);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_infectedAndQuarantinedVisit_successWithWarning() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded model \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded expectedModel \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Visit visitWithInfectedAndQuarantined \u003d new VisitBuilder().withPerson(INFECTED_AND_QUARANTINED_PERSON)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .withLocation(FIONA_LOCATION).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModel.addVisit(visitWithInfectedAndQuarantined);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddVisitCommand actualCommand \u003d new AddVisitCommand(INDEX_SECOND, INDEX_SIXTH, DEFAULT_DATE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(AddVisitCommand.MESSAGE_INFECTED_AND_QUARANTINED_MADE_VISIT,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                visitWithInfectedAndQuarantined);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * This test ensures that no warning is shown if an infected/quarantined"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * person makes a visit to his own home."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_infectedAndQuarantinedButStayedHome_successNoWarning() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded model \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubAcceptingVisitAdded expectedModel \u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitCommandTest.ModelStubAcceptingVisitAdded();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Visit visitWithInfectedAndQuarantined \u003d new VisitBuilder().withPerson(INFECTED_AND_QUARANTINED_PERSON).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedModel.addVisit(visitWithInfectedAndQuarantined);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddVisitCommand actualCommand \u003d new AddVisitCommand(INDEX_SECOND, DEFAULT_LOCATION_INDEX, DEFAULT_DATE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(AddVisitCommand.MESSAGE_NO_WARNING,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                visitWithInfectedAndQuarantined);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Index personAIndex \u003d Index.fromOneBased(Integer.parseInt(\"1\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Index personBIndex \u003d Index.fromOneBased(Integer.parseInt(\"1\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Index locationAIndex \u003d Index.fromOneBased(Integer.parseInt(\"1\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Index locationBIndex \u003d Index.fromOneBased(Integer.parseInt(\"2\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        LocalDate dateA \u003d LocalDate.parse(\"2020-09-09\", inputFormat);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        LocalDate dateB \u003d LocalDate.parse(\"2020-09-09\", inputFormat);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitCommand addSampleACommand \u003d new AddVisitCommand(personAIndex, locationAIndex, dateA);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitCommand addSampleBCommand \u003d new AddVisitCommand(personBIndex, locationBIndex, dateB);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(addSampleACommand.equals(addSampleACommand));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitCommand addSampleACommandCopy \u003d new AddVisitCommand(personBIndex, locationBIndex, dateB);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(addSampleBCommand.equals(addSampleACommandCopy));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(addSampleBCommand.equals(1));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(addSampleACommand.equals(null));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(addSampleACommand.equals(addSampleBCommand));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * A Model stub that contains a single visit."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private class ModelStubWithVisit extends ModelStub {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private final Visit visit;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ModelStubWithVisit(Visit visit) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireNonNull(visit);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.visit \u003d visit;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Person getPersonFromIndex(Index index) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (index.equals(DEFAULT_PERSON_INDEX)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return DEFAULT_PERSON;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            } else if (index.equals(INDEX_FOURTH)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return INFECTED_PERSON;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            } else if (index.equals(INDEX_FIRST)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return QUARANTINED_PERSON;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return DEFAULT_PERSON;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Location getLocationFromIndex(Index index) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return DEFAULT_LOCATION;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean hasVisit(Visit visit) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireNonNull(visit);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return this.visit.equals(visit);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * A Model stub that always accept the visit being added."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private class ModelStubAcceptingVisitAdded extends ModelStub {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        final ArrayList\u003cVisit\u003e visitsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean hasVisit(Visit visit) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireNonNull(visit);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return visitsAdded.stream().anyMatch(visit::equals);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void addVisit(Visit visit) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireNonNull(visit);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            visitsAdded.add(visit);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Person getPersonFromIndex(Index index) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (index.equals(DEFAULT_PERSON_INDEX)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return DEFAULT_PERSON;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            } else if (index.equals(INDEX_FOURTH)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return INFECTED_PERSON;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            } else if (index.equals(INDEX_FIRST)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return QUARANTINED_PERSON;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return DEFAULT_PERSON;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Location getLocationFromIndex(Index index) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (index.equals(INDEX_SIXTH)) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                return FIONA_LOCATION;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return DEFAULT_LOCATION;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Location getLocationFromId(Id id) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return DEFAULT_LOCATION;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Person getPersonFromId(Id id) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return DEFAULT_PERSON;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public ReadOnlyVisitBook getVisitBook() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new VisitBook();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return obj instanceof ModelStubAcceptingVisitAdded;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 88,
      "siangernlow": 268
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/visit/AddVisitsFromCsvCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.AddFromCsvCommand.MESSAGE_DUPLICATES_NOT_ADDED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.AddFromCsvCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.visit.AddVisitsFromCsvCommand.MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.visit.AddVisitsFromCsvCommand.VISITS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.FIRST_VISIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.SECOND_VISIT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.DataGenerator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.ModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.TypicalVisitParametersContainers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddVisitsFromCsvCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_nullVisits_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVisitsFromCsvCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_visitsAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cVisit\u003e visitsToAdd \u003d TypicalVisits.getTypicalVisits();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e vpcsToAdd \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                TypicalVisitParametersContainers.getVisitsAsVpc(visitsToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded expectedModel \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommandTest.ModelStubThatChecksIndexes actualModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitsFromCsvCommandTest.ModelStubThatChecksIndexes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Visit visit : visitsToAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            expectedModel.addVisit(visit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            actualModel.addPersonInVisit(visit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            actualModel.addLocationInVisit(visit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommand actualCommand \u003d new AddVisitsFromCsvCommand(vpcsToAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new CommandResult(String.format(MESSAGE_SUCCESS, vpcsToAdd.size(), VISITS),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        false, false, CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, actualModel, commandResult, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_emptyVpcsList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded model \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e visitsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommand actualCommand \u003d new AddVisitsFromCsvCommand(visitsToAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_EMPTY_LIST, ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e actualCommand.execute(model));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_duplicatePersons_successWithWarning() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cVisit\u003e visitsToAdd \u003d TypicalVisits.getTypicalVisits();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded expectedModel \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommandTest.ModelStubThatChecksIndexes actualModel \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitsFromCsvCommandTest.ModelStubThatChecksIndexes();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Visit visit : visitsToAdd) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            expectedModel.addVisit(visit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            actualModel.addPersonInVisit(visit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            actualModel.addLocationInVisit(visit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int numOfUniqueAdditions \u003d visitsToAdd.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Duplicate visits"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        visitsToAdd.add(FIRST_VISIT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        visitsToAdd.add(SECOND_VISIT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e vpcsToAdd \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                TypicalVisitParametersContainers.getVisitsAsVpc(visitsToAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommand actualCommand \u003d new AddVisitsFromCsvCommand(vpcsToAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String linesWithDuplicates \u003d String.format(\"%d %d \", vpcsToAdd.size() - 1, vpcsToAdd.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, numOfUniqueAdditions, VISITS)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + String.format(MESSAGE_DUPLICATES_NOT_ADDED, VISITS, linesWithDuplicates);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new CommandResult(expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        false, false, CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(actualCommand, actualModel, commandResult, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        DataGenerator.VisitParametersContainer septemberVisit \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new TypicalVisitParametersContainers.VpcBuilder().withDate(\"2020-09-09\").build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        DataGenerator.VisitParametersContainer octoberVisit \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new TypicalVisitParametersContainers.VpcBuilder().withDate(\"2020-10-10\").build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e visitsAddSept \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        visitsAddSept.add(septemberVisit);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e visitsAddSeptAndOct \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        visitsAddSeptAndOct.add(septemberVisit);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        visitsAddSeptAndOct.add(octoberVisit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommand addSeptVisitCommand \u003d new AddVisitsFromCsvCommand(visitsAddSept);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommand addSeptAndOctVisitsCommand \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddVisitsFromCsvCommand(visitsAddSeptAndOct);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(addSeptVisitCommand, addSeptVisitCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommand addHouseCommandCopy \u003d new AddVisitsFromCsvCommand(visitsAddSept);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(addHouseCommandCopy, addSeptVisitCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addSeptVisitCommand, 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addSeptVisitCommand, null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different visit lists -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertNotEquals(addSeptAndOctVisitsCommand, addSeptVisitCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * A Model stub that always accepts the visit being added."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static class ModelStubAcceptingVisitsAdded extends ModelStub {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private final ArrayList\u003cVisit\u003e visitsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public ArrayList\u003cVisit\u003e getVisitsAdded() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return visitsAdded;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean hasVisit(Visit visit) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return visitsAdded.contains(visit);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void addVisit(Visit visit) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            requireNonNull(visit);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            visitsAdded.add(visit);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (!(obj instanceof AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded other \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    (AddVisitsFromCsvCommandTest.ModelStubAcceptingVisitsAdded) obj;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return visitsAdded.equals(other.getVisitsAdded());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * This class further implements the functionality of retrieving"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Person and Location objects given their indexes."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Requires the person and location lists used in the test case."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static class ModelStubThatChecksIndexes extends ModelStubAcceptingVisitsAdded {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // Used to retrieve the person and location using indexes"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private final List\u003cPerson\u003e personListToCheck;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private final List\u003cLocation\u003e locationListToCheck;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public ModelStubThatChecksIndexes() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            personListToCheck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            locationListToCheck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void addPersonInVisit(Visit visit) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Person p \u003d visit.getPerson();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (!personListToCheck.contains(p)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                personListToCheck.add(p);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void addLocationInVisit(Visit visit) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            Location loc \u003d visit.getLocation();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (!locationListToCheck.contains(loc)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                locationListToCheck.add(loc);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Person getPersonFromId(Id id) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            for (Person person : personListToCheck) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                if (person.getId().equals(id)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    return person;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Location getLocationFromId(Id id) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            for (Location location : locationListToCheck) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                if (location.getId().equals(id)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    return location;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 5,
      "siangernlow": 228
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/visit/DeleteVisitsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.visit.DeleteVisitsCommand.MESSAGE_DELETE_VISIT_FAILED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.visit.DeleteVisitsCommand.MESSAGE_DELETE_VISIT_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * {@code DeleteVisitsCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class DeleteVisitsCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void execute_validDateUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder(MESSAGE_DELETE_VISIT_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        List\u003cVisit\u003e visits \u003d model.getFilteredVisitList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(1).append(\". \").append(visits.get(0)).append(\" \\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(2).append(\". \").append(visits.get(1)).append(\" \\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(3).append(\". \").append(visits.get(2)).append(\" \\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(4).append(\". \").append(visits.get(3)).append(\" \\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DeleteVisitsCommand deleteVisitsCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new DeleteVisitsCommand(LocalDate.parse(\"2020-09-12\", inputFormat));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String expectedResult \u003d expectedMessage.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedResult, false, false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deleteVisitsCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void execute_invalidDateUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DeleteVisitsCommand deleteVisitsCommand \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new DeleteVisitsCommand(LocalDate.parse(\"2020-08-12\", inputFormat));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertCommandFailure(deleteVisitsCommand, model, MESSAGE_DELETE_VISIT_FAILED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void execute_validDateFilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder(MESSAGE_DELETE_VISIT_SUCCESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        List\u003cVisit\u003e visits \u003d model.getFilteredVisitList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(1).append(\". \").append(visits.get(0)).append(\" \\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(2).append(\". \").append(visits.get(1)).append(\" \\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(3).append(\". \").append(visits.get(2)).append(\" \\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedMessage.append(4).append(\". \").append(visits.get(3)).append(\" \\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DeleteVisitsCommand deleteVisitsCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new DeleteVisitsCommand(LocalDate.parse(\"2020-09-12\", inputFormat));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonBook(), model.getLocationBook(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                model.getVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedModel.deleteVisit(visits.get(3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String expectedResult \u003d expectedMessage.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        showNoVisit(expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedResult, false, false,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                CommandResult.SWITCH_TO_VIEW_VISITS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertCommandSuccess(deleteVisitsCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DeleteVisitsCommand deleteFirstVisitCommand \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new DeleteVisitsCommand(LocalDate.parse(\"2020-09-12\", inputFormat));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DeleteVisitsCommand deleteSecondVisitCommand \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new DeleteVisitsCommand(LocalDate.parse(\"2020-09-13\", inputFormat));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertTrue(deleteFirstVisitCommand.equals(deleteFirstVisitCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DeleteVisitsCommand deleteFirstVisitCommandCopy \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new DeleteVisitsCommand(LocalDate.parse(\"2020-09-12\", inputFormat));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertTrue(deleteFirstVisitCommand.equals(deleteFirstVisitCommandCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertFalse(deleteFirstVisitCommand.equals(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertFalse(deleteFirstVisitCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertFalse(deleteFirstVisitCommand.equals(deleteSecondVisitCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private void showNoVisit(Model model) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        model.updateFilteredVisitList(p -\u003e false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertTrue(model.getFilteredVisitList().isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 15,
      "DreamerDragon": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddFromCsvCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.AddFromCsvCommandParser.CSV_FILE_EXTENSION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.AddFromCsvCommandParser.MESSAGE_INVALID_DATA_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.AddFromCsvCommandParser.MESSAGE_INVALID_FILE_EXTENSION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.AddFromCsvCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationsFromCsvCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonsFromCsvCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitsFromCsvCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class AddFromCsvCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String INVALID_FILE_EXTENSION \u003d \"validFileNameButWrongExtension.xlsx\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"AddFromCsvCommandTest\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String EMPTY_CSV_FILE \u003d TEST_DATA_FOLDER.resolve(\"EmptyCsvFile.csv\").toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final AddFromCsvCommandParser parser \u003d new AddFromCsvCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_validArgsPeople_returnsAddPersonsFromCsvCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e dummyPersonsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddPersonsFromCsvCommand expectedAddPersonsFromCsvCommand \u003d new AddPersonsFromCsvCommand(dummyPersonsList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d EMPTY_CSV_FILE + \" \" + PREFIX_LIST + \"people\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedAddPersonsFromCsvCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_validArgsLocations_returnsAddLocationsFromCsvCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e dummyLocationsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddLocationsFromCsvCommand expectedAddLocationsFromCsvCommand \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new AddLocationsFromCsvCommand(dummyLocationsList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d EMPTY_CSV_FILE + \" \" + PREFIX_LIST + \"locations\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedAddLocationsFromCsvCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_validArgsVisits_returnsAddVisitsFromCsvCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e dummyVisitsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        AddVisitsFromCsvCommand expectedAddVisitsFromCsvCommand \u003d new AddVisitsFromCsvCommand(dummyVisitsList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d EMPTY_CSV_FILE + \" \" + PREFIX_LIST + \"visits\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedAddVisitsFromCsvCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_missingPreamble_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d PREFIX_LIST + \"people\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_prefixMissing_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d INVALID_FILE_EXTENSION + \" \" + \"people\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \" people\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_invalidFileExtension_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d INVALID_FILE_EXTENSION + \" \" + PREFIX_LIST + \"people\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_FILE_EXTENSION, CSV_FILE_EXTENSION));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_filePathTooShort_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d \"not\" + \" \" + PREFIX_LIST + \"people\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_FILE_EXTENSION, CSV_FILE_EXTENSION));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_invalidListtype_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d EMPTY_CSV_FILE + \" \" + PREFIX_LIST + \"invalidInput\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                String.format(MESSAGE_INVALID_DATA_TYPE, AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_unavailableListType_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // infected is a valid list type, but not supported by this command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String userInput \u003d EMPTY_CSV_FILE + \" \" + PREFIX_LIST + \"infected\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                String.format(MESSAGE_INVALID_DATA_TYPE, AddFromCsvCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DataGeneratorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_DATA_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.DataGenerator.INVALID_ROW_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.TypicalLocations;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.testutil.TypicalVisitParametersContainers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class DataGeneratorTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"AddFromCsvCommandTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"validFileNameButFileDoesNotExist.csv\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String VALID_PERSONS_CSV_FILE \u003d TEST_DATA_FOLDER.resolve(\"PersonsList.csv\").toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String PERSONS_LIST_INVALID_PHONE_SECOND_ROW \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"PersonsListInvalidPhoneSecondRow.csv\").toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String PERSONS_LIST_MISSING_ADDRESS_FIRST_ROW \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"PersonsListMissingNameFirstRow.csv\").toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String VALID_LOCATIONS_CSV_FILE \u003d TEST_DATA_FOLDER.resolve(\"LocationsList.csv\").toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String LOCATIONS_LIST_INVALID_NAME_SECOND_ROW \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"LocationsListInvalidNameSecondRow.csv\").toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String LOCATIONS_LIST_MISSING_ADDRESS_SECOND_ROW \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"LocationsListMissingAddressSecondRow.csv\").toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String VALID_VISITS_CSV_FILE \u003d TEST_DATA_FOLDER.resolve(\"VisitsList.csv\").toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String VISITS_LIST_INVALID_DATE_SECOND_ROW \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"VisitsListInvalidDateSecondRow.csv\").toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String VISITS_LIST_MISSING_DATE_FIRST_ROW \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"VisitsListMissingDateFirstRow.csv\").toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d Custom equality checks to avoid comparing id \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final BiFunction\u003cPerson, Person, Boolean\u003e personEqualityCheckWithoutId \u003d (person, otherPerson) -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            otherPerson.getName().equals(person.getName())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(person.getPhone())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(person.getEmail())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(person.getAddress())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \u0026\u0026 otherPerson.getQuarantineStatus().equals(person.getQuarantineStatus())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \u0026\u0026 otherPerson.getInfectionStatus().equals(person.getInfectionStatus())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(person.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final BiFunction\u003cLocation, Location, Boolean\u003e locationEqualityCheckWithoutId \u003d ("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            location, otherLocation) -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            otherLocation.getName().equals(location.getName())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            \u0026\u0026 otherLocation.getAddress().equals(location.getAddress());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Generating People Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generatePersonsList_validFilePath_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e actualPersonsList \u003d DataGenerator.generatePersonsList(VALID_PERSONS_CSV_FILE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cPerson\u003e expectedPersonsList \u003d TypicalPersons.getTypicalPersons();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedPersonsList.size(), actualPersonsList.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedPersonsList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertTrue(personEqualityCheckWithoutId.apply(expectedPersonsList.get(i), actualPersonsList.get(i)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generatePersonsList_invalidFilePath_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_FILE_PATH, ()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e DataGenerator.generatePersonsList(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generatePersonsList_invalidRow_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String invalidPhone \u003d \"not a valid phone number\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            ParserUtil.parsePhone(invalidPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            String expectedErrorMessage \u003d String.format(INVALID_ROW_FORMAT, 2, pe.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertThrows(ParseException.class, expectedErrorMessage, ()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                -\u003e DataGenerator.generatePersonsList(PERSONS_LIST_INVALID_PHONE_SECOND_ROW));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generatePersonsList_missingCompulsoryField_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedErrorMessage \u003d String.format(MESSAGE_MISSING_DATA_FORMAT, 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, expectedErrorMessage, ()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e DataGenerator.generatePersonsList(PERSONS_LIST_MISSING_ADDRESS_FIRST_ROW));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Generating Locations Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateLocationsList_validFilePath_success() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e actualLocationsList \u003d DataGenerator.generateLocationsList(VALID_LOCATIONS_CSV_FILE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cLocation\u003e expectedLocationsList \u003d TypicalLocations.getTypicalLocations();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedLocationsList.size(), actualLocationsList.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedLocationsList.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertTrue(locationEqualityCheckWithoutId.apply(expectedLocationsList.get(i), actualLocationsList.get(i)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateLocationsList_invalidFilePath_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_FILE_PATH, ()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e DataGenerator.generateLocationsList(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateLocationsList_invalidRow_throwsParseException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String invalidName \u003d \"M@rina Bay Sands\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            ParserUtil.parseName(invalidName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            String expectedErrorMessage \u003d String.format(INVALID_ROW_FORMAT, 2, pe.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertThrows(ParseException.class, expectedErrorMessage, ()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                -\u003e DataGenerator.generateLocationsList(LOCATIONS_LIST_INVALID_NAME_SECOND_ROW));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateLocationsList_missingCompulsoryField_throwsParseException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedErrorMessage \u003d String.format(MESSAGE_MISSING_DATA_FORMAT, 2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, expectedErrorMessage, ()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e DataGenerator.generateLocationsList(LOCATIONS_LIST_MISSING_ADDRESS_SECOND_ROW));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Generating Visits Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateVisitsList_validFilePath_success() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e actualVisitsParametersContainersList \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                DataGenerator.generateVisitsList(VALID_VISITS_CSV_FILE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e expectedVisitsParametersContainersList \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                TypicalVisitParametersContainers.getTypicalVpc();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedVisitsParametersContainersList, actualVisitsParametersContainersList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateVisitsList_invalidFilePath_throwsParseException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_FILE_PATH, ()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e DataGenerator.generateVisitsList(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateVisitsList_invalidRow_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String invalidDate \u003d \"2020-90-90\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            ParserUtil.parseDate(invalidDate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            String expectedErrorMessage \u003d String.format(INVALID_ROW_FORMAT, 2, pe.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            assertThrows(ParseException.class, expectedErrorMessage, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                -\u003e DataGenerator.generateVisitsList(VISITS_LIST_INVALID_DATE_SECOND_ROW));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void generateVisitsList_missingCompulsoryField_throwsParseException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedErrorMessage \u003d String.format(MESSAGE_MISSING_DATA_FORMAT, 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, expectedErrorMessage, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            -\u003e DataGenerator.generateVisitsList(VISITS_LIST_MISSING_DATE_FIRST_ROW));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GenerateLocationsCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.GenerateLocationsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GenerateLocationsCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private GenerateLocationsCommandParser parser \u003d new GenerateLocationsCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                GenerateLocationsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void parse_indexOutOfBounds_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                GenerateLocationsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void parse_validArgs_returnsGenerateLocationsCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GenerateLocationsCommand expectedGenerateLocationsCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                new GenerateLocationsCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertParseSuccess(parser, \"1\", expectedGenerateLocationsCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "KohHanMing": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GeneratePeopleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.commands.GeneratePeopleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class GeneratePeopleCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private GeneratePeopleCommandParser parser \u003d new GeneratePeopleCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                GeneratePeopleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void parse_indexOutOfBounds_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                GeneratePeopleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void parse_validArgs_returnsGeneratePeopleCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        GeneratePeopleCommand expectedGeneratePeopleCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                new GeneratePeopleCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        assertParseSuccess(parser, \"1\", expectedGeneratePeopleCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "KohHanMing": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType LOCATIONS_LIST \u003d ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType PEOPLE_LIST \u003d ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType VISITS_LIST \u003d ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final ListType INFECTED_LIST \u003d ListType.ALL_INFECTED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType QUARANTINED_LIST \u003d ListType.ALL_QUARANTINED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType STATISTICS_LIST \u003d ListType.STATISTICS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_people() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"people\", expectedListCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_locations() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(LOCATIONS_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"locations\", expectedListCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_visits() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(VISITS_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"visits\", expectedListCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void parseListType_infected() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                new ListCommand(INFECTED_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"infected\", expectedListCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_quarantined() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(QUARANTINED_LIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"quarantined\", expectedListCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_stats() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(STATISTICS_LIST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"stats\", expectedListCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_prefixMissing_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \" people\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_validArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"        people    \", expectedListCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // all upper case"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"PEOPLE\", expectedListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // mixed case"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"PEopLE\", expectedListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 82,
      "hhdqirui": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020/11/11\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_ID \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final String VALID_DATE \u003d \"2020-11-11\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_ID \u003d \"S1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseId((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseId(INVALID_ID));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseId_validValueWithoutWhitespace_returnsId() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id expectedId \u003d new Id(VALID_ID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseId(VALID_ID));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseId_validValueWithWhitespace_returnsTrimmedId() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String idWithWhitespace \u003d WHITESPACE + VALID_ID + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id expectedId \u003d new Id(VALID_ID);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseId(idWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsLocalDate() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        LocalDate expectedDate \u003d LocalDate.parse(VALID_DATE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        LocalDate expectedDate \u003d LocalDate.parse(VALID_DATE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_peopleList_returnsPeopleEnum() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType expectedListType \u003d ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType actualListType \u003d ParserUtil.parseListType(\"people\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedListType, actualListType);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_locationsList_returnsLocationsEnum() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType expectedListType \u003d ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType actualListType \u003d ParserUtil.parseListType(\"locations\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedListType, actualListType);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_visitsList_returnsVisitsEnum() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType expectedListType \u003d ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType actualListType \u003d ParserUtil.parseListType(\"visits\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedListType, actualListType);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_invalidListType_throwsParseException() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseListType(\"invalid keyword\"));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 32,
      "siangernlow": 26,
      "hhdqirui": 26,
      "-": 190
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/VirusTrackerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_DATE_STRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_LOCATION_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_PERSON_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.AddFromCsvCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationsFromCsvCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.DeleteLocationCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand.EditLocationDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonsFromCsvCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.DeletePersonCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.FindPersonCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitsFromCsvCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.DeleteVisitsCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.EditLocationDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class VirusTrackerParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"AddFromCsvCommandTest\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String EMPTY_CSV_FILE \u003d TEST_DATA_FOLDER.resolve(\"EmptyCsvFile.csv\").toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final VirusTrackerParser parser \u003d new VirusTrackerParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new AddPersonCommand(person), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseCommand_addLocation() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand command \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                (AddLocationCommand) parser.parseCommand(LocationUtil.getAddLocationCommand(location));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new AddLocationCommand(location), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void parseCommand_addVisit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String addVisitString \u003d AddVisitCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + DEFAULT_PERSON_INDEX.getOneBased() + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + DEFAULT_LOCATION_INDEX.getOneBased() + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + PREFIX_DATE + DEFAULT_DATE_STRING;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        AddVisitCommand command \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                (AddVisitCommand) parser.parseCommand(addVisitString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new AddVisitCommand(DEFAULT_PERSON_INDEX, DEFAULT_LOCATION_INDEX, DEFAULT_DATE), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new DeletePersonCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseCommand_deleteLocation() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DeleteLocationCommand command \u003d (DeleteLocationCommand) parser.parseCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DeleteLocationCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new DeleteLocationCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void parseCommand_deleteVisits() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DeleteVisitsCommand command \u003d (DeleteVisitsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                DeleteVisitsCommand.COMMAND_WORD + \" \" + \"d/2020-09-12\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertEquals(new DeleteVisitsCommand(LocalDate.parse(\"2020-09-12\", inputFormat)), command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new EditPersonCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseCommand_editLocation() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder(location).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand command \u003d (EditLocationCommand) parser.parseCommand(EditLocationCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + LocationUtil.getEditLocationDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new EditLocationCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FindPersonCommand command \u003d (FindPersonCommand) parser.parseCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                FindPersonCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String commandAndPrefix \u003d ListCommand.COMMAND_WORD + \" \" + PREFIX_LIST;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"people\") instanceof ListCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"locations\") instanceof ListCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"visits\") instanceof ListCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseCommand_addFromCsv() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String commandAndPrefix \u003d AddFromCsvCommand.COMMAND_WORD + \" \" + EMPTY_CSV_FILE + \" \" + PREFIX_LIST;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"people\") instanceof AddPersonsFromCsvCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"locations\") instanceof AddLocationsFromCsvCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"visits\") instanceof AddVisitsFromCsvCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 64,
      "DreamerDragon": 15,
      "siangernlow": 21,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/location/AddLocationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_BOB_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_ID_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BOB_LOCATION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private AddLocationCommandParser parser \u003d new AddLocationCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location expectedLocation \u003d new LocationBuilder(BOB_LOCATION).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ID_DESC_BOB_LOCATION + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommand(expectedLocation));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple ids - last id accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_AMY_LOCATION + ID_DESC_BOB_LOCATION + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommand(expectedLocation));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB_LOCATION + NAME_DESC_AMY + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommand(expectedLocation));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB_LOCATION + NAME_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommand(expectedLocation));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLocationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing id prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_ID_BOB + NAME_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB_LOCATION + VALID_NAME_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB_LOCATION + NAME_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_ID_BOB + VALID_NAME_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid id"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, INVALID_LOCATION_ID_DESC + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB_LOCATION + INVALID_NAME_DESC + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB_LOCATION + NAME_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB_LOCATION + INVALID_NAME_DESC + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ID_DESC_BOB_LOCATION + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/location/DeleteLocationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.DeleteLocationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * outside of the DeleteLocationCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * same path through the DeleteLocationCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeleteLocationCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private DeleteLocationCommandParser parser \u003d new DeleteLocationCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_validIndex_returnsDeleteLocationCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteLocationCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DeleteLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_validId_returnsDeleteLocationCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, \" idl/1\", new DeleteLocationCommand(new Id(\"1\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidId_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"idl/  \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DeleteLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/location/EditLocationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_NUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_VIVOCITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_NUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_VIVOCITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_NUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_VIVOCITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_VIVOCITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand.EditLocationDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.EditLocationDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "class EditLocationCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLocationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private EditLocationCommandParser parser \u003d new EditLocationCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_NUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\", EditLocationCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_NUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_NUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1 X/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid name followed by valid address"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + ADDRESS_DESC_NUS, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // valid address followed by invalid address. The test case for invalid address followed by valid address"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\" + ADDRESS_DESC_VIVOCITY + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_ADDRESS_DESC + VALID_ADDRESS_NUS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_NUS + NAME_DESC_NUS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder().withName(VALID_NAME_NUS)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withAddress(VALID_ADDRESS_NUS).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand expectedCommand \u003d new EditLocationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_NUS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder().withName(VALID_NAME_NUS).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand expectedCommand \u003d new EditLocationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_NUS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor \u003d new EditLocationDescriptorBuilder().withAddress(VALID_ADDRESS_NUS).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditLocationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_NUS + ADDRESS_DESC_NUS + ADDRESS_DESC_VIVOCITY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withAddress(VALID_ADDRESS_VIVOCITY).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand expectedCommand \u003d new EditLocationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_VIVOCITY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationDescriptor descriptor \u003d new EditLocationDescriptorBuilder().withName(VALID_NAME_VIVOCITY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditLocationCommand expectedCommand \u003d new EditLocationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + ADDRESS_DESC_VIVOCITY + NAME_DESC_VIVOCITY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor \u003d new EditLocationDescriptorBuilder().withAddress(VALID_ADDRESS_VIVOCITY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_VIVOCITY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditLocationCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/AddPersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFECTION_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERSON_ID_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUARANTINE_STATUS_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddPersonCommandParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple quarantine statuses - last quarantine status accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_AMY + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INFECTION_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddPersonCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_AMY + INFECTION_DESC_AMY, new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing id prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_ID_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing quarantine status prefix"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + VALID_QUARANTINE_STATUS_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // missing infection status prefix"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + VALID_INFECTION_STATUS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_ID_BOB + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + VALID_QUARANTINE_STATUS_BOB + VALID_INFECTION_STATUS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid id"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, INVALID_PERSON_ID_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + ADDRESS_DESC_BOB + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // invalid infection status"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INVALID_INFECTION_DESC + QUARANTINE_STATUS_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid quarantine status"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INVALID_QUARANTINE_STATUS_DESC + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, QuarantineStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INVALID_ADDRESS_DESC + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + ADDRESS_DESC_BOB + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 100,
      "siangernlow": 8,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/DeletePersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.DeletePersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * same path through the DeletePersonCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DeletePersonCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_validIndex_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_validId_returnsDeletePersonCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, \" idp/1\", new DeletePersonCommand(new Id(\"1\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidId_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"idp/  \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 24,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/EditPersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFECTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUARANTINE_STATUS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditPersonCommandParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"1 X/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUARANTINE_STATUS_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                QuarantineStatus.MESSAGE_CONSTRAINTS); // invalid quarantine status"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // invalid infection status"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFECTION_DESC, InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        + VALID_PHONE_AMY + VALID_INFECTION_STATUS_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + QUARANTINE_STATUS_DESC_AMY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY).withInfectionStatus(VALID_INFECTION_STATUS_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // quarantine status"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // infection status"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withInfectionStatus(VALID_INFECTION_STATUS_AMY).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + TAG_DESC_HUSBAND + INFECTION_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + INFECTION_DESC_BOB;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 59,
      "siangernlow": 16,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/FindPersonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.FindPersonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class FindPersonCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FindPersonCommand expectedFindPersonCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/visit/AddVisitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_LOCATION_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_LOCATION_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_PERSON_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.VisitBuilder.DEFAULT_PERSON_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class AddVisitCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private AddVisitCommandParser parser \u003d new AddVisitCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" idp/S2\" + \" idl/L2\" + \" d/ 2020-09-12\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddVisitCommand(DEFAULT_PERSON_ID, DEFAULT_LOCATION_ID, DEFAULT_DATE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" 2\" + \" 2\" + \" d/ 2020-09-12\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new AddVisitCommand(DEFAULT_PERSON_INDEX, DEFAULT_LOCATION_INDEX, DEFAULT_DATE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_mixOfIdAndIndexes_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \" 2 \" + \" idp/2\" + \" d/ 2020-09-12\", expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \" 2\" + \" idl/2\" + \" d/ 2020-09-12\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // missing location id and date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertParseFailure(parser, \" 1 \", expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // missing date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertParseFailure(parser, \" 1 \" + \" 2 \", expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertParseFailure(parser, \"2 \" + \" 0 \" + \" \","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // invalid locationId and date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertParseFailure(parser, \"2 \" + \" \","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        //To be further implemented"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 12,
      "DreamerDragon": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/visit/DeleteVisitsCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.DeleteVisitsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * outside of the DeleteVisitsCommand code."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class DeleteVisitsCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private DeleteVisitsCommandParser parser \u003d new DeleteVisitsCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void parse_validArgs_returnsDeleteVisitsCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertParseSuccess(parser, \" d/2020-09-12\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                new DeleteVisitsCommand(LocalDate.parse(\"2020-09-12\", inputFormat)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVisitsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "DreamerDragon": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InfoHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.model.InfoHandler.getIdHashSetFromPersonsList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.model.InfoHandler.getLocationIdsFromInfectedVisitList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.model.InfoHandler.getNumberOfHighRiskLocations;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.model.InfoHandler.sortByValues;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocations;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class InfoHandlerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private InfoHandler infoHandler \u003d new InfoHandler(modelManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final List\u003cPerson\u003e typicalPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final List\u003cLocation\u003e typicalLocations;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // Set up test model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public InfoHandlerTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        typicalPersons \u003d getTypicalPersons();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        typicalLocations \u003d getTypicalLocations();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Person person : typicalPersons) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            modelManager.addPerson(person);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Location location: typicalLocations) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            modelManager.addLocation(location);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getPersonList_validList_returnTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(modelManager.getFilteredPersonList(), infoHandler.getPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getLocationList_validList_returnTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(modelManager.getFilteredLocationList(), infoHandler.getLocationList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getVisitList_validList_returnTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(modelManager.getFilteredVisitList(), infoHandler.getVisitList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void updateModelPersonList_dummyPredicate_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        Predicate\u003cPerson\u003e predicateAlwaysTrue \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        modelManager.updateFilteredPersonList(predicateAlwaysTrue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(modelManager.getFilteredPersonList(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                infoHandler.getPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getTotalPeople_sizeIsCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(typicalPersons.size(), infoHandler.getTotalPeople());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getTotalLocations_sizeIsCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(typicalLocations.size(), infoHandler.getTotalLocations());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getTotalInfected_sizeIsCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int numOfInfected \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Person p : typicalPersons) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (p.getInfectionStatus().getStatusAsBoolean()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                numOfInfected++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(numOfInfected, infoHandler.getTotalInfected());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getTotalQuarantined_sizeIsCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int numOfQuarantined \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Person p : typicalPersons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (p.getQuarantineStatus().getStatusAsBoolean()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                numOfQuarantined++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(numOfQuarantined, infoHandler.getTotalQuarantined());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getInfectedOverPeople_correctRatio_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int numOfInfected \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Person p : typicalPersons) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (p.getInfectionStatus().getStatusAsBoolean()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                numOfInfected++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert(typicalPersons.size() \u003e 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals((double) numOfInfected / typicalPersons.size(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                infoHandler.getInfectedOverPeople());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void getQuarantinedOverPeople_correctRatio_returnsTrue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        int numOfQuarantined \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Person p : typicalPersons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            if (p.getQuarantineStatus().getStatusAsBoolean()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                numOfQuarantined++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert(typicalPersons.size() \u003e 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals((double) numOfQuarantined / typicalPersons.size(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                infoHandler.getQuarantinedOverPeople());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void getIdHashSetFromPersonsList_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        List\u003cPerson\u003e typicalPersons \u003d TypicalPersons.getTypicalPersons();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashSet\u003cId\u003e expectedPersonsIds \u003d TypicalPersons.getIdsOfTypicalPersonsAsHashSet();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(expectedPersonsIds, getIdHashSetFromPersonsList(typicalPersons));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void getLocationIdsFromVisitList_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        List\u003cVisit\u003e typicalVisits \u003d TypicalVisits.getVisitsForTest();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cId\u003e expectedLocationIds \u003d TypicalVisits.getLocationsIdsFromVisitsForTest();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(expectedLocationIds, getLocationIdsFromInfectedVisitList(typicalVisits));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void sortByValues_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        List\u003cVisit\u003e visits \u003d TypicalVisits.getVisitsForTest();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashMap\u003cId, Integer\u003e locations \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        for (Visit visit : visits) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Id id \u003d visit.getLocation().getId();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            if (locations.containsKey(id)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                locations.put(id, locations.get(id) + 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                locations.put(id, 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashMap\u003cId, Integer\u003e actualHashMap \u003d sortByValues(locations);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        HashMap\u003cId, Integer\u003e expectedHashMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedHashMap.put(new Id(\"L9\"), 3);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedHashMap.put(new Id(\"L3\"), 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedHashMap.put(new Id(\"L10\"), 1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(expectedHashMap, actualHashMap);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void getNumberOfHighRiskLocations_moreThanSixtyPercent_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(40, getNumberOfHighRiskLocations(89, 100));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals((int) (101 * 0.4), getNumberOfHighRiskLocations(101, 101));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals((int) (29 * 0.4), getNumberOfHighRiskLocations((int) Math.ceil(29 * 0.6), 29));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void getNumberOfHighRiskLocations_lessThanOrEqualToFortyPercent_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(1, getNumberOfHighRiskLocations(1, 100));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(40, getNumberOfHighRiskLocations(40, 100));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(0, getNumberOfHighRiskLocations(0, 4));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "siangernlow": 114,
      "hhdqirui": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.model.ModelPredicate.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BENSON_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.CARL_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.DANIEL_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.testutil.VisitBookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.testutil.VisitBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new PersonBook(), new PersonBook(modelManager.getPersonBook()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new LocationBook(), new LocationBook(modelManager.getLocationBook()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertEquals(new VisitBook(), new VisitBook(modelManager.getVisitBook()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userPrefs.setPersonBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userPrefs.setPersonBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPersonBookFilePath(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        modelManager.setPersonBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(path, modelManager.getPersonBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLocationBookFilePath(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath_validPath_setsLocationBookFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        modelManager.setLocationBookFilePath(path);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(path, modelManager.getLocationBookFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasLocation(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationNotInLocationBook_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.hasLocation(CARL_LOCATION));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        modelManager.addLocation(CARL_LOCATION);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(modelManager.hasLocation(CARL_LOCATION));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void getFilteredLocationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredLocationList().remove(0));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisitBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLocationBookFilePath(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void setVisitBookFilePath_validPath_setsVisitBookFilePath() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        modelManager.setVisitBookFilePath(path);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertEquals(path, modelManager.getVisitBookFilePath());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void hasVisit_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasVisit(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void hasVisit_visitNotInVisitBook_returnsFalse() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit sampleA \u003d new VisitBuilder().withPerson(ALICE)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .withLocation(ALICE_LOCATION).withDate(\"2020-09-09\").build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertFalse(modelManager.hasVisit(sampleA));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void hasVisit_visitInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit sampleA \u003d new VisitBuilder().withPerson(ALICE)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .withLocation(ALICE_LOCATION).withDate(\"2020-02-09\").build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        modelManager.addVisit(sampleA);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertTrue(modelManager.hasVisit(sampleA));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook personBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook differentPersonBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook locationBook \u003d new LocationBookBuilder().withLocation(CARL_LOCATION).withLocation(DANIEL_LOCATION)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook differentLocationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit sampleB \u003d new VisitBuilder().withPerson(ALICE)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                .withLocation(BENSON_LOCATION).withDate(\"2020-02-09\").build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook visitBook \u003d new VisitBookBuilder().withVisit(sampleB).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook differentVisitBook \u003d new VisitBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        modelManager \u003d new ModelManager(personBook, locationBook, visitBook, userPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(personBook, locationBook, visitBook, userPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different personBook -\u003e returns false"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPersonBook, locationBook, visitBook, userPrefs)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different locationBook -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personBook, differentLocationBook, visitBook, userPrefs)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personBook, locationBook, visitBook, userPrefs)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        differentUserPrefs.setPersonBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(personBook, locationBook, visitBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 61,
      "DreamerDragon": 43,
      "siangernlow": 1,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ELLE_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.FIONA_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.GEORGE_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getUnorderedTypicalLocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getLessThanSixtyPercentVisitBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getMoreThanSixtyPercentVisitBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "public class ModelPredicateTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                getTypicalVisitBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void getPredicateForHighRiskLocations() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // Infected Locations(3) are less than 60% of total locations(7)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.setVisitBook(getLessThanSixtyPercentVisitBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Predicate\u003cLocation\u003e actualPredicate \u003d ModelPredicate.getPredicateForHighRiskLocations(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.setLocationBook(getUnorderedTypicalLocationBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.updateFilteredLocationList(actualPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        ObservableList\u003cLocation\u003e actualList \u003d model.getFilteredLocationList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        ObservableList\u003cLocation\u003e expectedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedList.add(FIONA_LOCATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedList.add(GEORGE_LOCATION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(expectedList, actualList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // Infected Locations(6) are more than 60% of total locations(8)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.setVisitBook(getMoreThanSixtyPercentVisitBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        actualPredicate \u003d ModelPredicate.getPredicateForHighRiskLocations(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        model.updateFilteredLocationList(actualPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        actualList \u003d model.getFilteredLocationList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        expectedList.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedList.add(ELLE_LOCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedList.add(FIONA_LOCATION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        expectedList.add(GEORGE_LOCATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertEquals(expectedList, actualList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 8,
      "hhdqirui": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getPersonBookFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setPersonBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyPersonBook getPersonBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setPersonBook(ReadOnlyPersonBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasSameIdPerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasSameIdentityExceptId(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Location Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath(Path locationBookFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBook(ReadOnlyLocationBook locationBook) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addLocation(Location location) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void deleteLocation(Location target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e getUnfilteredLocationList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Visit Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getVisitBookFilePath() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setVisitBookFilePath(Path visitBookFilePath) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyVisitBook getVisitBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void setVisitBook(ReadOnlyVisitBook visitBook) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasVisit(Visit visit) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addVisit(Visit visit) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void deleteVisit(Visit visit) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cVisit\u003e getFilteredVisitList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void updateFilteredVisitList(Predicate\u003cVisit\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Info Handler \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public InfoHandler getInfoHandler() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person getPersonFromId(Id id) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location getLocationFromId(Id id) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person getPersonFromIndex(Index index) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Location getLocationFromIndex(Index index) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 73,
      "DreamerDragon": 1,
      "siangernlow": 157,
      "hhdqirui": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/LocationBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final LocationBook locationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(Collections.emptyList(), locationBook.getLocationList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e locationBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData_withValidReadOnlyLocationBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook newData \u003d getTypicalLocationBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(newData, locationBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData_withDuplicateLocations_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Two locations with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e newLocations \u003d Arrays.asList(ALICE_LOCATION, editedAlice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBookTest.LocationBookStub newData \u003d new LocationBookTest.LocationBookStub(newLocations);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e locationBook.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e locationBook.hasLocation(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationNotInLocationBook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(locationBook.hasLocation(ALICE_LOCATION));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationInLocationBook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(ALICE_LOCATION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(locationBook.hasLocation(ALICE_LOCATION));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationWithSameIdentityFieldsInLocationBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(ALICE_LOCATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(locationBook.hasLocation(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void getLocationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e locationBook.getLocationList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A stub ReadOnlyLocationBook whose locations list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static class LocationBookStub implements ReadOnlyLocationBook {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private final ObservableList\u003cLocation\u003e locations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBookStub(Collection\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.locations.setAll(locations);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ObservableList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return locations;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/LocationNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void test_locationNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(predicate.test(new LocationBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        predicate \u003d new LocationNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(predicate.test(new LocationBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        predicate \u003d new LocationNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(predicate.test(new LocationBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        predicate \u003d new LocationNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(predicate.test(new LocationBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(predicate.test(new LocationBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        predicate \u003d new LocationNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(predicate.test(new LocationBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Keywords match address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        predicate \u003d new LocationNameContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(predicate.test(new LocationBuilder().withName(\"Alice\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BOB_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void isSameLocation() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.isSameLocation(ALICE_LOCATION));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.isSameLocation(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different name, same address -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.isSameLocation(editedAlice));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same name, different address -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.isSameLocation(editedAlice));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void isSameId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.isSameId(ALICE_LOCATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.isSameId(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different id, same name, same address -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.isSameId(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same id, different name, different address -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.isSameId(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location aliceCopy \u003d new LocationBuilder(ALICE_LOCATION).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.equals(ALICE_LOCATION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(BOB_LOCATION));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 81,
      "hhdqirui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/UniqueLocationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.AMY_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BOB_LOCATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotIdentifiableException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class UniqueLocationListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final UniqueLocationList uniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_locationNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(uniqueLocationList.contains(ALICE_LOCATION));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_locationInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(uniqueLocationList.contains(ALICE_LOCATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_locationWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(uniqueLocationList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void containsSameIdLocation_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.containsSameIdLocation(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void containsSameIdLocation_locationNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(uniqueLocationList.containsSameIdLocation(ALICE_LOCATION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void containsSameIdLocation_sameIdInList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(uniqueLocationList.containsSameIdLocation(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void containsSameIdLocation_sameIdentityDifferentId_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(uniqueLocationList.containsSameIdLocation(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void add_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.add(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void add_duplicateLocation_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e uniqueLocationList.add(ALICE_LOCATION));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void add_unidentifiableLocation_throwsLocationNotIdentifiableException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(LocationNotIdentifiableException.class, () -\u003e uniqueLocationList.add(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_nullTargetLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocation(null, ALICE_LOCATION));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_nullEditedLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocation(ALICE_LOCATION, null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_targetLocationNotInList_throwsLocationNotFoundException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(LocationNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.setLocation(ALICE_LOCATION, ALICE_LOCATION));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationIsSameLocation_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocation(ALICE_LOCATION, ALICE_LOCATION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationHasSameIdentity_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(editedAlice);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(editedAlice);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedLocation \u003d new LocationBuilder().withId(\"L1\").build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocation(ALICE_LOCATION, editedLocation);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(editedLocation);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationHasNonUniqueIdentity_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(AMY_LOCATION);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(BOB_LOCATION);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(AMY_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.setLocation(AMY_LOCATION, editedAlice));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.remove(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove_locationDoesNotExist_throwsLocationNotFoundException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(LocationNotFoundException.class, () -\u003e uniqueLocationList.remove(ALICE_LOCATION));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove_existingLocation_removesLocation() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.remove(ALICE_LOCATION);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_nullUniqueLocationList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocations((UniqueLocationList) null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_uniqueLocationList_replacesOwnListWithProvidedUniqueLocationList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(BOB_LOCATION);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocations(expectedUniqueLocationList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocations((List\u003cLocation\u003e) null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e locationList \u003d Collections.singletonList(BOB_LOCATION);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocations(locationList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(BOB_LOCATION);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_listWithDuplicateLocations_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e listWithDuplicateLocations \u003d Arrays.asList(ALICE_LOCATION, ALICE_LOCATION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.setLocations(listWithDuplicateLocations));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_listWithUnidentifiableLocations_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e listWithUnidentifiableLocations \u003d Arrays.asList(ALICE_LOCATION, editedAlice);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(LocationNotIdentifiableException.class, () -\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.setLocations(listWithUnidentifiableLocations));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 219
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/InfectionStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class InfectionStatusTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InfectionStatus(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_invalidInfectionStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String invalidInfectionStatus \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new InfectionStatus(invalidInfectionStatus));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void isValidInfectionStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null infection status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e InfectionStatus.isValidInfectionStatus(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // invalid infection status"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(InfectionStatus.isValidInfectionStatus(\"Nope\")); // true or false only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // valid infection statuses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(InfectionStatus.isValidInfectionStatus(\"true\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(InfectionStatus.isValidInfectionStatus(\"FALSE\")); // Upper case"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(InfectionStatus.isValidInfectionStatus(\"fAlsE\")); // Mixed case"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "siangernlow": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class PersonBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final PersonBook personBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(Collections.emptyList(), personBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(newData, personBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBookStub newData \u003d new PersonBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e personBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(personBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(personBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(personBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e personBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A stub ReadOnlyPersonBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static class PersonBookStub implements ReadOnlyPersonBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 20,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void isSameId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertTrue(ALICE.isSameId(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertFalse(ALICE.isSameId(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // different id -\u003e returns false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertFalse(ALICE.isSameId(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // same id, different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertTrue(ALICE.isSameId(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // same id, different name -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertTrue(ALICE.isSameId(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // different id, same name, same phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // same id, same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        // same id, same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different quarantine status -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different infection status -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "siangernlow": 5,
      "hhdqirui": 42,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/QuarantineStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class QuarantineStatusTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new QuarantineStatus(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor_invalidQuarantineStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String invalidQuarantineStatus \u003d \"quarantined\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuarantineStatus(invalidQuarantineStatus));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void isValidQuarantineStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null quarantine status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e QuarantineStatus.isValidQuarantineStatus(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid quarantine status"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"91\")); // numbers only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"phone\")); // alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"9011p041\")); // mix of alphabets and digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // valid quarantine status"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"true\")); // boolean true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"True\")); // capitalised true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"false\")); // boolean false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"False\")); // capitalised false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"FaLSe\")); // mix of upper and lower cases"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus quarantineStatus \u003d new QuarantineStatus(\"True\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(quarantineStatus.equals(quarantineStatus));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus quarantineStatusCopy \u003d new QuarantineStatus(quarantineStatus.value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(quarantineStatus.equals(quarantineStatusCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(quarantineStatus.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(quarantineStatus.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus differentQuarantineStatus \u003d new QuarantineStatus(\"false\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(quarantineStatus.equals(differentQuarantineStatus));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotIdentifiableException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void containsSameIdPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.containsSameIdPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void containsSameIdPerson_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertFalse(uniquePersonList.containsSameIdPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void containsSameIdPerson_sameIdInList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertTrue(uniquePersonList.containsSameIdPerson(editedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void containsSameIdPerson_differentId_returnsFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertFalse(uniquePersonList.containsSameIdPerson(editedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void containsSameIdPerson_sameIdDifferentIdentity_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertTrue(uniquePersonList.containsSameIdPerson(editedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void add_unidentifiablePerson_throwsPersonNotIdentifiableException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Person unidentifiablePerson \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertThrows(PersonNotIdentifiableException.class, () -\u003e uniquePersonList.add(unidentifiablePerson));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void setPerson_editedPersonIsNotIdentifiable_throwsPersonNotIdentifiableException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(AMY).withId(\"S1\").build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertThrows(PersonNotIdentifiableException.class, () -\u003e uniquePersonList.setPerson(BOB, editedPerson));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void setPersons_listWithUnidentifiablePersons_throwsPersonNotIdentifiableException() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        List\u003cPerson\u003e listWithUnidentifiablePersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertThrows(PersonNotIdentifiableException.class, () -\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                uniquePersonList.setPersons(listWithUnidentifiablePersons));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "hhdqirui": 67,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/visit/VisitBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.VisitBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class VisitBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private final VisitBook visitBook \u003d new VisitBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertEquals(Collections.emptyList(), visitBook.getVisitList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e visitBook.resetData(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void resetData_withValidReadOnlyVisitBook_replacesData() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook newData \u003d getTypicalVisitBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visitBook.resetData(newData);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertEquals(newData, visitBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void hasVisit_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e visitBook.hasVisit(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void hasVisit_visitNotInVisitBook_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit sample \u003d new VisitBuilder().withPerson(ALICE).withLocation(ALICE_LOCATION).withDate(\"2020-09-12\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertFalse(visitBook.hasVisit(sample));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void hasVisit_visitInVisitBook_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit sample \u003d new VisitBuilder().withPerson(ALICE).withLocation(ALICE_LOCATION).withDate(\"2020-09-12\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visitBook.addVisit(sample);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertTrue(visitBook.hasVisit(sample));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void hasVisit_visitWithSameIdentityFieldsInVisitBook_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit sample \u003d new VisitBuilder().withPerson(ALICE).withLocation(ALICE_LOCATION).withDate(\"2020-09-13\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visitBook.addVisit(sample);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Visit editedSample \u003d new VisitBuilder(sample).withPerson(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertTrue(visitBook.hasVisit(editedSample));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void getVisitList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e visitBook.getVisitList().remove(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 8,
      "DreamerDragon": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedLocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLocation.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BENSON_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonAdaptedLocationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_ID \u003d \" 0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON_LOCATION.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON_LOCATION.getAddress().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_ID \u003d BENSON_LOCATION.getId().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_validLocationDetails_returnsLocation() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d new JsonAdaptedLocation(BENSON_LOCATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(BENSON_LOCATION, location.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedLocation(INVALID_NAME, VALID_ADDRESS, VALID_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d new JsonAdaptedLocation(null, VALID_ADDRESS, VALID_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedLocation(VALID_NAME, INVALID_ADDRESS, VALID_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d new JsonAdaptedLocation(VALID_NAME, null, VALID_ID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedLocation(VALID_NAME, VALID_ADDRESS, INVALID_ID);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d Id.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d new JsonAdaptedLocation(VALID_NAME, VALID_ADDRESS, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_QUARANTINE_STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String INVALID_INFECTION_STATUS \u003d \"nope\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final String INVALID_ID \u003d \" 0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_QUARANTINE_STATUS \u003d BENSON.getQuarantineStatus().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String VALID_INFECTION_STATUS \u003d BENSON.getInfectionStatus().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final String VALID_ID \u003d BENSON.getId().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidQuarantineStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        INVALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d QuarantineStatus.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_nullQuarantineStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                null, VALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, QuarantineStatus.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidInfectionStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_QUARANTINE_STATUS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        INVALID_INFECTION_STATUS, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d InfectionStatus.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void toModelType_nullInfectionStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                VALID_QUARANTINE_STATUS, null, VALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, InfectionStatus.class.getSimpleName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID, invalidTags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, INVALID_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d Id.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, null, VALID_TAGS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 42,
      "siangernlow": 13,
      "hhdqirui": 26,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedVisitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.storage.JsonAdaptedVisit.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BENSON_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.FIRST_VISIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class JsonAdaptedVisitTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String INVALID_ID_LOCATION \u003d \" 0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String INVALID_NAME_PERSON \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_NAME_LOCATION \u003d BENSON_LOCATION.getName().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_ADDRESS_LOCATION \u003d BENSON_LOCATION.getAddress().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_ID_LOCATION \u003d BENSON_LOCATION.getId().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_DATE \u003d \"2020-09-12\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_NAME_PERSON \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_ADDRESS_PERSON \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_QUARANTINE_STATUS \u003d BENSON.getQuarantineStatus().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_INFECTION_STATUS \u003d BENSON.getInfectionStatus().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final String VALID_ID_PERSON \u003d BENSON.getId().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_validVisitDetails_returnsVisit() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonAdaptedVisit visit \u003d new JsonAdaptedVisit("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_PERSON, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID_PERSON, VALID_TAGS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_LOCATION, VALID_ADDRESS_LOCATION, VALID_ID_LOCATION, VALID_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertEquals(FIRST_VISIT, visit.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_invalidPersonName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonAdaptedVisit visit \u003d new JsonAdaptedVisit("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                INVALID_NAME_PERSON, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS_PERSON,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID_PERSON, VALID_TAGS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_LOCATION, VALID_ADDRESS_LOCATION, VALID_ID_LOCATION, VALID_DATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, visit::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_invalidLocationId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonAdaptedVisit visit \u003d new JsonAdaptedVisit("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_PERSON, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS_PERSON,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID_PERSON, VALID_TAGS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_LOCATION, VALID_ADDRESS_LOCATION, INVALID_ID_LOCATION, VALID_DATE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d Id.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, visit::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonAdaptedVisit visit \u003d new JsonAdaptedVisit("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_PERSON, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS_PERSON,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID_PERSON, VALID_TAGS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_LOCATION, VALID_ADDRESS_LOCATION, VALID_ID_LOCATION, INVALID_DATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String expectedMessage \u003d \"Please enter the correct date format\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, visit::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonAdaptedVisit visit \u003d new JsonAdaptedVisit("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_PERSON, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS_PERSON,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_ID_PERSON, VALID_TAGS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                VALID_NAME_LOCATION, VALID_ADDRESS_LOCATION, VALID_ID_LOCATION, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, visit::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 8,
      "DreamerDragon": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonLocationBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.HOON_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.IDA_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonLocationBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLocationBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readLocationBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readLocationBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLocationBook\u003e readLocationBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new JsonLocationBookStorage(Paths.get(filePath)).readLocationBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(readLocationBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationBook(\"notJsonFormatLocationBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readLocationBook_invalidLocationLocationBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationBook(\"invalidLocationLocationBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readLocationBook_invalidAndValidLocationLocationBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationBook(\"invalidAndValidLocationLocationBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readAndSaveLocationBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempLocationBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook original \u003d getTypicalLocationBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage jsonLocationBookStorage \u003d new JsonLocationBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonLocationBookStorage.saveLocationBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyLocationBook readBack \u003d jsonLocationBookStorage.readLocationBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        original.addLocation(HOON_LOCATION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        original.removeLocation(ALICE_LOCATION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonLocationBookStorage.saveLocationBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        readBack \u003d jsonLocationBookStorage.readLocationBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        original.addLocation(IDA_LOCATION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonLocationBookStorage.saveLocationBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        readBack \u003d jsonLocationBookStorage.readLocationBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook_nullLocationBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLocationBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Saves {@code locationBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private void saveLocationBook(ReadOnlyLocationBook locationBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new JsonLocationBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    .saveLocationBook(locationBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLocationBook(new LocationBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPersonBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonPersonBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPersonBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPersonBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new JsonPersonBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatPersonBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonPersonBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonPersonBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonPersonBookStorage jsonPersonBookStorage \u003d new JsonPersonBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonPersonBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyPersonBook readBack \u003d jsonPersonBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new PersonBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonPersonBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        readBack \u003d jsonPersonBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new PersonBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonPersonBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        readBack \u003d jsonPersonBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new PersonBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Saves {@code personBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private void saveAddressBook(ReadOnlyPersonBook personBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new JsonPersonBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    .saveAddressBook(personBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new PersonBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 25,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableLocationBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.TypicalLocations;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonSerializableLocationBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableLocationBookTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TYPICAL_LOCATIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalLocationsLocationBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path INVALID_LOCATION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLocationLocationBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path DUPLICATE_LOCATION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateLocationLocationBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_typicalLocationsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializableLocationBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_LOCATIONS_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializableLocationBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook locationBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook typicalLocationsLocationBook \u003d TypicalLocations.getTypicalLocationBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(locationBookFromFile, typicalLocationsLocationBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidLocationFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializableLocationBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_LOCATION_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializableLocationBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_duplicateLocations_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializableLocationBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_LOCATION_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializableLocationBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableLocationBook.MESSAGE_DUPLICATE_LOCATION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePersonBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonSerializablePersonBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePersonBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsPersonBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonPersonBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonPersonBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializablePersonBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializablePersonBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook personBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook typicalPersonsPersonBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(personBookFromFile, typicalPersonsPersonBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializablePersonBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializablePersonBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializablePersonBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializablePersonBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePersonBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 16,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableVisitBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class JsonSerializableVisitBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableVisitBookTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final Path TYPICAL_VISITS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalVisitVisitBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final Path INVALID_VISIT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidVisitVisitBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final Path DUPLICATE_VISIT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateVisitVisitBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_typicalVisitsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonSerializableVisitBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_VISITS_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                JsonSerializableVisitBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook visitBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook typicalVisitVisitBook \u003d TypicalVisits.getTypicalVisitBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertEquals(visitBookFromFile, typicalVisitVisitBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_invalidVisitFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonSerializableVisitBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_VISIT_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                JsonSerializableVisitBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void toModelType_duplicateVisits_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonSerializableVisitBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_VISIT_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                JsonSerializableVisitBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableVisitBook.MESSAGE_DUPLICATE_VISIT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7,
      "DreamerDragon": 37,
      "siangernlow": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userPrefs.setPersonBookFilePath(Paths.get(\"personbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonVisitBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalVisits.getTypicalVisitBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.ReadOnlyVisitBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class JsonVisitBookStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonVisitBookStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void readVisitBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readVisitBook(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private java.util.Optional\u003cReadOnlyVisitBook\u003e readVisitBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return new JsonVisitBookStorage(Paths.get(filePath)).readVisitBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertFalse(readVisitBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readVisitBook(\"notJsonFormatVisitBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void readVisitBook_invalidVisitVisitBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readVisitBook(\"invalidVisitVisitBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void readVisitBook_invalidAndValidVisitVisitBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readVisitBook(\"invalidAndValidVisitVisitBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void readAndSaveVisitBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempVisitBook.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook original \u003d getTypicalVisitBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonVisitBookStorage jsonVisitBookStorage \u003d new JsonVisitBookStorage(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        jsonVisitBookStorage.saveVisitBook(original, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        ReadOnlyVisitBook readBack \u003d jsonVisitBookStorage.readVisitBook(filePath).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void saveVisitBook_nullVisitBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveVisitBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Saves {@code visitBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private void saveVisitBook(ReadOnlyVisitBook visitBook, String filePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            new JsonVisitBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "                    .saveVisitBook(visitBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public void saveVisitBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveVisitBook(new VisitBook(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "DreamerDragon": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.ReadOnlyPersonBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonPersonBookStorage personBookStorage \u003d new JsonPersonBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage locationBookStorage \u003d new JsonLocationBookStorage(getTempFilePath(\"lb\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        JsonVisitBookStorage visitBookStorage \u003d new JsonVisitBookStorage(getTempFilePath(\"vb\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        storageManager \u003d new StorageManager(personBookStorage, locationBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                visitBookStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * {@link JsonPersonBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPersonBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        PersonBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyPersonBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new PersonBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void locationBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * {@link JsonLocationBookStorage} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonLocationBookStorageTest} class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook original \u003d getTypicalLocationBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        storageManager.saveLocationBook(original);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyLocationBook retrieved \u003d storageManager.readLocationBook().get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(retrieved));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void getLocationBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertNotNull(storageManager.getLocationBookFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 32,
      "DreamerDragon": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class to help with building PersonBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " *     {@code PersonBook pb \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private PersonBook personBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddressBookBuilder(PersonBook personBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.personBook \u003d personBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds a new {@code Person} to the {@code PersonBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        personBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public PersonBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return personBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditLocationDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand.EditLocationDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class to help with building EditLocationDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class EditLocationDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private EditLocationDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor \u003d new EditLocationDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationDescriptorBuilder(EditLocationDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.descriptor \u003d new EditLocationDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns an {@code EditLocationDescriptor} with fields containing {@code location}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationDescriptorBuilder(Location location) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor \u003d new EditLocationDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setName(location.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setAddress(location.getAddress());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setId(location.getId());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code Name} of the {@code EditLocationDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code Address} of the {@code EditLocationDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code id} of the {@code EditLocationDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationDescriptorBuilder withId(String id) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setId(new Id(id));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditLocationDescriptor build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setQuarantineStatus(person.getQuarantineStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor.setInfectionStatus(person.getInfectionStatus());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        descriptor.setId(person.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code QuarantineStatus} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditPersonDescriptorBuilder withQuarantineStatus(String quarantineStatus) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setQuarantineStatus(new QuarantineStatus(quarantineStatus));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Sets the {@code InfectionStatus } of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public EditPersonDescriptorBuilder withInfectionStatus(String infectionStatus) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor.setInfectionStatus(new InfectionStatus(infectionStatus));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Sets the {@code id} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditPersonDescriptorBuilder withId(String id) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setId(new Id(id));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 20,
      "siangernlow": 8,
      "hhdqirui": 7,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class to help with building Locationbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " *     {@code LocationBook lb \u003d new LocationBookBuilder().withName(\"Vivocity\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private LocationBook locationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBookBuilder(LocationBook locationBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBook \u003d locationBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds a new {@code Location} to the {@code LocationBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBookBuilder withLocation(Location location) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(location);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class to help with building Location objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Vivocity\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"L1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates a {@code LocationBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        id \u003d new Id(DEFAULT_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Initializes the LocationBuilder with the data of {@code locationToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder(Location locationToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        name \u003d locationToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        address \u003d locationToCopy.getAddress();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        id \u003d locationToCopy.getId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code Name} of the {@code Location} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code Address} of the {@code Location} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the Id of the {@code Location} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder withId(String id) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.id \u003d new Id(id);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Location(id, name, address);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.AddLocationCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.location.EditLocationCommand.EditLocationDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class for Location."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns an add location command string for adding the {@code location}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static String getAddLocationCommand(Location location) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return AddLocationCommand.COMMAND_WORD + \" \" + getLocationDetails(location);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the part of command string for the given {@code location}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static String getLocationDetails(Location location) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_LOCATION_ID + location.getId().value + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_NAME + location.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_ADDRESS + location.getAddress().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the part of command string for the given {@code EditLocationDescriptor}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static String getEditLocationDescriptorDetails(EditLocationDescriptor descriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.InfectionStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.QuarantineStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_QUARANTINE_STATUS \u003d \"false\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String DEFAULT_INFECTION_STATUS \u003d \"false\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"S1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private QuarantineStatus quarantineStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private InfectionStatus infectionStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus \u003d new QuarantineStatus(DEFAULT_QUARANTINE_STATUS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus \u003d new InfectionStatus(DEFAULT_INFECTION_STATUS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        id \u003d new Id(DEFAULT_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus \u003d personToCopy.getQuarantineStatus();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus \u003d personToCopy.getInfectionStatus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        id \u003d personToCopy.getId();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code QuarantineStatus} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public PersonBuilder withQuarantineStatus(String quarantineStatus) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.quarantineStatus \u003d new QuarantineStatus(quarantineStatus);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Sets the {@code InfectionStatus} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param infectionStatus The new infection status."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return The updated PersonBuilder."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public PersonBuilder withInfectionStatus(String infectionStatus) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.infectionStatus \u003d new InfectionStatus(infectionStatus);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Sets the {@code id} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public PersonBuilder withId(String id) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.id \u003d new Id(id);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Person(id, name, phone, email, address, quarantineStatus, infectionStatus, tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 26,
      "siangernlow": 15,
      "hhdqirui": 5,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.AddPersonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.person.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_PERSON_ID + person.getId().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_QUARANTINE_STATUS + person.getQuarantineStatus().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        sb.append(PREFIX_INFECTION + person.getInfectionStatus().getStatusAsString() + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.getQuarantineStatus().ifPresent(quarantineStatus -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                sb.append(PREFIX_QUARANTINE_STATUS).append(quarantineStatus.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor.getInfectionStatus().ifPresent(infectionStatus -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                sb.append(PREFIX_INFECTION).append(infectionStatus.getStatusAsString()).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "siangernlow": 4,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_FOURTH \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_FIFTH \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_SIXTH \u003d Index.fromOneBased(6);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_SEVENTH \u003d Index.fromOneBased(7);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_EIGHTH \u003d Index.fromOneBased(8);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_NINTH \u003d Index.fromOneBased(9);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index INDEX_TENTH \u003d Index.fromOneBased(10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLocations.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.LocationBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class containing a list of {@code Location} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class TypicalLocations {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location ALICE_LOCATION \u003d new LocationBuilder().withName(\"Alice Pauline House\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withId(\"L1\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location BENSON_LOCATION \u003d new LocationBuilder().withName(\"Benson Meier House\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withId(\"L2\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location CARL_LOCATION \u003d new LocationBuilder().withName(\"Carl Kurz House\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"wall street\").withId(\"L3\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location DANIEL_LOCATION \u003d new LocationBuilder().withName(\"Daniel Meier House\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"10th street\").withId(\"L4\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location ELLE_LOCATION \u003d new LocationBuilder().withName(\"Elle Meyer House\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"michegan ave\").withId(\"L5\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location FIONA_LOCATION \u003d new LocationBuilder().withName(\"Fiona Kunz House\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"little tokyo\").withId(\"L6\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location GEORGE_LOCATION \u003d new LocationBuilder().withName(\"George Best House\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"4th street\").withId(\"L7\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location HOON_LOCATION \u003d new LocationBuilder().withName(\"Hoon Meier House\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"little india\").withId(\"L8\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location IDA_LOCATION \u003d new LocationBuilder().withName(\"Ida Mueller House\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"chicago ave\").withId(\"L9\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Manually added - Location\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location AMY_LOCATION \u003d new LocationBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withId(VALID_ID_AMY_LOCATION).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location BOB_LOCATION \u003d new LocationBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withId(VALID_ID_BOB_LOCATION).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Id ID_NOT_IN_TYPICAL_LOCATIONS \u003d new Id(\"L1111\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private TypicalLocations() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns a {@code LocationBook} with all the typical locations."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static LocationBook getTypicalLocationBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook lb \u003d new LocationBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Location location : getTypicalLocations()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            lb.addLocation(location);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return lb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static LocationBook getUnorderedTypicalLocationBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        LocationBook lb \u003d new LocationBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        for (Location location : getUnorderedTypicalLocations()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            lb.addLocation(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return lb;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static List\u003cLocation\u003e getTypicalLocations() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_LOCATION, BENSON_LOCATION, CARL_LOCATION, DANIEL_LOCATION,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ELLE_LOCATION, FIONA_LOCATION, GEORGE_LOCATION));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static List\u003cLocation\u003e getUnorderedTypicalLocations() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(IDA_LOCATION, BENSON_LOCATION, CARL_LOCATION, DANIEL_LOCATION,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                ELLE_LOCATION, FIONA_LOCATION, GEORGE_LOCATION));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 68,
      "hhdqirui": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.PersonBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withPhone(\"94351253\").withQuarantineStatus(\"true\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withInfectionStatus(\"false\").withTags(\"friends\").withId(\"S1\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withQuarantineStatus(\"true\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withInfectionStatus(\"true\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withId(\"S2\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withInfectionStatus(\"false\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withQuarantineStatus(\"false\").withId(\"S3\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withQuarantineStatus(\"false\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withInfectionStatus(\"true\").withId(\"S4\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withQuarantineStatus(\"false\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withInfectionStatus(\"true\").withId(\"S5\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withQuarantineStatus(\"false\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withInfectionStatus(\"true\").withId(\"S6\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withQuarantineStatus(\"false\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withInfectionStatus(\"true\").withId(\"S7\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withInfectionStatus(\"false\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withId(\"S8\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withInfectionStatus(\"true\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withId(\"S9\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            .withInfectionStatus(VALID_INFECTION_STATUS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withId(VALID_ID_AMY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withInfectionStatus(VALID_INFECTION_STATUS_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // HashSet of Indexes corresponding to typical persons (ALICE to GEORGE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final List\u003cId\u003e ID_LIST_OF_TYPICAL_PERSONS \u003d Arrays.asList(new Id(\"S1\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Id(\"S2\"), new Id(\"S3\"), new Id(\"S4\"), new Id(\"S5\"), new Id(\"S6\"), new Id(\"S7\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final HashSet\u003cId\u003e ID_HASHSET_OF_TYPICAL_PERSONS \u003d new HashSet\u003c\u003e(ID_LIST_OF_TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    // Persons with specific properties"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Person INFECTED_PERSON \u003d DANIEL;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Person QUARANTINED_PERSON \u003d ALICE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Person INFECTED_AND_QUARANTINED_PERSON \u003d BENSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Id ID_NOT_IN_TYPICAL_PERSON \u003d new Id(\"S1111\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns an {@code PersonBook} with all the typical persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static PersonBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        PersonBook pb \u003d new PersonBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            pb.addPerson(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return pb;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static HashSet\u003cId\u003e getIdsOfTypicalPersonsAsHashSet() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return ID_HASHSET_OF_TYPICAL_PERSONS;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 28,
      "siangernlow": 25,
      "hhdqirui": 3,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVisitParametersContainers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.DataGenerator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * A utility class containing a list of {@code VisitParametersContainer} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class TypicalVisitParametersContainers {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer FIRST_VPC \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S1\")).withLocationIndex(new Id(\"L1\")).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer SECOND_VPC \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S2\")).withLocationIndex(new Id(\"L2\")).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer THIRD_VPC \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S3\")).withLocationIndex(new Id(\"L3\")).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer FOURTH_VPC \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S4\")).withLocationIndex(new Id(\"L4\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer FIFTH_VPC \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S5\")).withLocationIndex(new Id(\"L5\")).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer SIXTH_VPC \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S6\")).withLocationIndex(new Id(\"L6\")).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer SEVENTH_VPC \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S7\")).withLocationIndex(new Id(\"L7\")).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer EIGHTH_VPC \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S8\")).withLocationIndex(new Id(\"L8\")).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final DataGenerator.VisitParametersContainer NINTH_VPC \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new VpcBuilder().withPersonIndex(new Id(\"S9\")).withLocationIndex(new Id(\"L9\")).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private TypicalVisitParametersContainers() {} // prevents instantiation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cDataGenerator.VisitParametersContainer\u003e getTypicalVpc() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FIRST_VPC, SECOND_VPC, THIRD_VPC, FOURTH_VPC, FIFTH_VPC, SIXTH_VPC,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                SEVENTH_VPC, EIGHTH_VPC, NINTH_VPC));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cDataGenerator.VisitParametersContainer\u003e getVisitsAsVpc(List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assert visits.size() \u003e 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        List\u003cDataGenerator.VisitParametersContainer\u003e visitParametersContainerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Visit visit : visits) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            visitParametersContainerList.add(getVisitAsVpc(visit));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return visitParametersContainerList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static DataGenerator.VisitParametersContainer getVisitAsVpc(Visit visit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id personId \u003d visit.getPerson().getId();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Id locationId \u003d visit.getLocation().getId();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        LocalDate date \u003d visit.getDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new DataGenerator.VisitParametersContainer(personId, locationId, date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static class VpcBuilder {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public static final Id DEFAULT_PERSON_INDEX \u003d new Id(\"S1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public static final Id DEFAULT_LOCATION_INDEX \u003d new Id(\"L1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private static final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public static final LocalDate DEFAULT_DATE \u003d LocalDate.parse(\"2020-10-12\", inputFormat);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private Id personIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private Id locationIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * Creates a default VpcBuilder using the default values."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public VpcBuilder() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.personIndex \u003d DEFAULT_PERSON_INDEX;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.locationIndex \u003d DEFAULT_LOCATION_INDEX;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.date \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        * Sets the {@code personIndex} of the {@code VpcBuilder} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        * @param personIndex The updated index."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        * @return The new {@code VpcBuilder}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public VpcBuilder withPersonIndex(Id personIndex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * Sets the {@code locationIndex} of the {@code VpcBuilder} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * @param locationIndex The updated index."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * @return The new {@code VpcBuilder}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public VpcBuilder withLocationIndex(Id locationIndex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.locationIndex \u003d locationIndex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * Sets the {@code date} of the {@code VpcBuilder} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * @param date The updated date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         * @return The new {@code VpcBuilder}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public VpcBuilder withDate(String date) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.date \u003d LocalDate.parse(date, inputFormat);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public DataGenerator.VisitParametersContainer build() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new DataGenerator.VisitParametersContainer(personIndex, locationIndex, date);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 19,
      "siangernlow": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVisits.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.AMY_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BENSON_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BOB_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.CARL_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.DANIEL_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ELLE_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.FIONA_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.GEORGE_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * A utility class containing a list of {@code Visit} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class TypicalVisits {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit FIRST_VISIT \u003d new VisitBuilder().withPerson(BENSON)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(BENSON_LOCATION).withDate(\"2020-09-12\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit SECOND_VISIT \u003d new VisitBuilder().withPerson(AMY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(AMY_LOCATION).withDate(\"2020-09-12\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit THIRD_VISIT \u003d new VisitBuilder().withPerson(ALICE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(AMY_LOCATION).withDate(\"2020-09-12\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit FOURTH_VISIT \u003d new VisitBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(BOB_LOCATION).withDate(\"2020-09-12\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit FIFTH_VISIT \u003d new VisitBuilder().withPerson(CARL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(CARL_LOCATION).withDate(\"2020-09-13\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit SIXTH_VISIT \u003d new VisitBuilder().withPerson(DANIEL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(DANIEL_LOCATION).withDate(\"2020-09-13\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit SEVENTH_VISIT \u003d new VisitBuilder().withPerson(ELLE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(ELLE_LOCATION).withDate(\"2020-09-13\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit EIGHTH_VISIT \u003d new VisitBuilder().withPerson(FIONA)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(FIONA_LOCATION).withDate(\"2020-09-13\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Visit NINTH_VISIT \u003d new VisitBuilder().withPerson(GEORGE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withLocation(GEORGE_LOCATION).withDate(\"2020-09-14\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private TypicalVisits() {} // prevents instantiation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns a {@code VisitBook} with all the typical visits."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static VisitBook getTypicalVisitBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        VisitBook vb \u003d new VisitBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        for (Visit visit : getTypicalVisits()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "            vb.addVisit(visit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return vb;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns a {@code VisitBook} with all the all visits."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static VisitBook getWholeVisitBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        VisitBook vb \u003d new VisitBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Visit visit : getAllVisits()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            vb.addVisit(visit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return vb;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns a {@code VisitBook} with less than 60% visits are infected visits."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static VisitBook getLessThanSixtyPercentVisitBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        VisitBook vb \u003d new VisitBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Visit visit : getLessThanSixtyPercentInfectedVisits()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            vb.addVisit(visit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return vb;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns a {@code VisitBook} with more than 60% visits are infected visits."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static VisitBook getMoreThanSixtyPercentVisitBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        VisitBook vb \u003d new VisitBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        for (Visit visit : getMoreThanSixtyPercentInfectedVisits()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            vb.addVisit(visit);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return vb;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static List\u003cVisit\u003e getTypicalVisits() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FIRST_VISIT, SECOND_VISIT, THIRD_VISIT, FOURTH_VISIT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                FIFTH_VISIT, SIXTH_VISIT, SEVENTH_VISIT, EIGHTH_VISIT, NINTH_VISIT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cVisit\u003e getAllVisits() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FIRST_VISIT, SECOND_VISIT, THIRD_VISIT, FOURTH_VISIT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                FIFTH_VISIT, SIXTH_VISIT, SEVENTH_VISIT, EIGHTH_VISIT, NINTH_VISIT));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns a list of {@code Visit} with 3 visits to location with id 1, 1 visit to location with id 5,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * 1 visit to location with id 2."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cVisit\u003e getVisitsForTest() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SECOND_VISIT, SECOND_VISIT, FOURTH_VISIT, FIFTH_VISIT, THIRD_VISIT));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns a list of unique {@code LocationId} in the list of {@code Visit} provided"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * by {@code getVisitsForTest}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static List\u003cId\u003e getLocationsIdsFromVisitsForTest() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(new Id(\"L9\"), new Id(\"L3\"), new Id(\"L10\")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns a list of {@code Visit} where less than 60% of the Visits in this list consist of Person"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * that is infected"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cVisit\u003e getLessThanSixtyPercentInfectedVisits() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // SECOND_VISIT and THIRD_VISIT are non-infected Visits. The remaining Visits are"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // infected Visits. The below list is fifty percent infected."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SECOND_VISIT, THIRD_VISIT, EIGHTH_VISIT, NINTH_VISIT));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns a list of {@code Visit} where more than 60% of the Visits in this list consist of Person"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * that is infected"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static List\u003cVisit\u003e getMoreThanSixtyPercentInfectedVisits() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // SECOND_VISIT is a non-infected Visit. The remaining Visits are infected Visits."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SECOND_VISIT, THIRD_VISIT, NINTH_VISIT,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                FOURTH_VISIT, SEVENTH_VISIT, EIGHTH_VISIT));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 5,
      "DreamerDragon": 27,
      "siangernlow": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VisitBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.VisitBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * A utility class to help with building Visitbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " *     {@code VisitBook lb \u003d new VisitBookBuilder().withPersonId(\"1\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class VisitBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private VisitBook visitBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visitBook \u003d new VisitBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBookBuilder(VisitBook visitBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.visitBook \u003d visitBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Adds a new {@code Visit} to the {@code VisitBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBookBuilder withVisit(Visit visit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        visitBook.addVisit(visit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return visitBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "DreamerDragon": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VisitBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BENSON_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.attribute.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * A utility class to help with building Location objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class VisitBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final String DEFAULT_DATE_STRING \u003d \"2020-09-12\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final Person DEFAULT_PERSON \u003d BENSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static final Location DEFAULT_LOCATION \u003d BENSON_LOCATION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final LocalDate DEFAULT_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Id DEFAULT_PERSON_ID \u003d DEFAULT_PERSON.getId();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index DEFAULT_PERSON_INDEX \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Id DEFAULT_LOCATION_ID \u003d DEFAULT_LOCATION.getId();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Index DEFAULT_LOCATION_INDEX \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        DEFAULT_DATE \u003d LocalDate.parse(DEFAULT_DATE_STRING, inputFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    private LocalDate dateOfVisit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Creates a {@code VisitBuilder} with the default details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        person \u003d DEFAULT_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        location \u003d DEFAULT_LOCATION;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        dateOfVisit \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Initializes the VisitBuilder with the data of {@code visitToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBuilder(Visit visitToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        person \u003d visitToCopy.getPerson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        location \u003d visitToCopy.getLocation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        dateOfVisit \u003d visitToCopy.getDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Sets the {@code person} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Sets the {@code location} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBuilder withLocation(Location location) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Sets the {@code date} of the {@code Visit} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public VisitBuilder withDate(String date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        this.dateOfVisit \u003d LocalDate.parse(date, inputFormat);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public Visit build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return new Visit(person, location, dateOfVisit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 15,
      "DreamerDragon": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VisitUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.visit.AddVisitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " * A utility class for Visit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "public class VisitUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns an add visit command string for adding the {@code visit}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static String getAddVisitCommand(Visit visit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return AddVisitCommand.COMMAND_WORD + \" \" + getVisitDetails(visit);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     * Returns the part of command string for the given {@code visit}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    public static String getVisitDetails(Visit visit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_PERSON_ID + visit.getPerson().getId().value + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_LOCATION_ID + visit.getLocation().getId().value + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        sb.append(PREFIX_DATE + visit.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 8,
      "DreamerDragon": 25
    }
  }
]
