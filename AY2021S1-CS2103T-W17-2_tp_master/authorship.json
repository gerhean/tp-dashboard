[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "# Calo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "**UI image coming soon**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Tired of noting down your workouts?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Meet Calo, your friendly workout app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Track your workouts"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Track your calories burnt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Generate portable data"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Customised for the CLI lover and fast typer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Try it now!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## License"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "MIT"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "leeweiminsg": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "run {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    archiveName \u003d \u0027calo.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0027Main\u0027: \u0027tp.src.main.java.Main\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        )"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "leeweiminsg": 9,
      "Nahoyhp": 3,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "We are a group of students taking CS2103T: Software Engineering in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|  | Name | Role | Project |"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|---|---|---|---|"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"https://avatars3.githubusercontent.com/u/40591060?s\u003d400\u0026u\u003d4b5102975b010a42d7115cdb111d622c85ef729c\u0026v\u003d4\" width\u003d\"200px\"\u003e| Eugene Tan| Advisor | [github](https://github.com/eugenetyc) |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/leeweiminsg.png\" width\u003d\"200px\"\u003e|Lee Wei Min| Developer | [github](https://github.com/leeweiminsg) |"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/liu-2001.png\" width\u003d\"200px\"\u003e|Liu Xinyi| Developer | [github](https://github.com/Liu-2001) |"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/nauman-s.png\" width\u003d\"200px\"\u003e|Nauman Sajid| Developer | [github](https://github.com/Nauman-S) |"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/nahoyhp.png\" width\u003d\"200px\"\u003e|Phyo Han| Developer | [github](https://github.com/Nahoyhp/) |"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "|\u003cimg src\u003d\"images/royxuzeng.png\" width\u003d\"200px\"\u003e|Xu Zeng| Developer | [github](https://github.com/Royxuzeng) |"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 9,
      "-": 9
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ExerciseListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "1. `Logic` uses the `ExerciseBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding an exercise)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExercise\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Exercise` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Exercise` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* can save the exercise book data in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "### Aspect: How to archive Data"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "* **Current Choice:** Using Archive Command."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  * Implementation: Have a separate Archive Command to let the User specify the file location."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  * Pros: The user can specify the location where users want to save the data."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  * Cons: Error prone. The user need to enter the file location specification which may be difficult for users who are not used to command prompt."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* has a need to manage their workouts"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "**Value proposition**: manage workouts faster than a typical mouse/GUI driven desktop/mobile app"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | user                                       | add an exercise                | keep track of calories burnt through the day                           |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | user                                       | have a system that tolerate invalid/incomplete command      |                                                                        |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | data conscious user                        | list down all the exercises for the day       | monitor the calories burned accurately                                   |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* * *`  | user                                       | delete an exercise in case I key in wrongly          |  |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* *`    | user                                       | update an exercise             |                 |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "| `* *`    | user                                       | save my data in a file         | import the saved data into the new computer                                                 |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "(For all use cases below, the **System** is the `Calo` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  #### **Use case: add an exercise**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  *MSS*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "1.  User requests to add an exercise"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo adds the exercise"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "#### **Use case: Find exercises with a keyword**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "1.  User requests to find exercises with a keyword"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo shows a list of exercises which contain the keyword"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    The list is empty \u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that no such exercise exists.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "#### **Use case: Update an exercise**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "1.  User requests to update a specific exercise in the list"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo updates the exercise"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    1a. The index is invalid\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that no such exercise exists.\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "#### **Use case: Delete an exercise**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "1.  User requests to delete a specific exercise in the list."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "2.  Calo deletes the exercise"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    1a. The index is invalid\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that no such exercise exists.\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  #### **Use case: Archive data**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  *MSS*"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  1.  User requests to archive data to a different file location"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  2.  Calo archives data to the specified location"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    1a. User does not have permission to create file at specified location \u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      1a1. Calo shows a message indicating that file cannot be created at specified file.\u003cbr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  #### **Use case: List exercises**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  *MSS*\u003cbr\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  1.  User requests to list exercises"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  2.  Calo shows a list of exercises"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "2.  Should be able to hold up to 1000 exercise items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "* **Exercise**: an exercise record entered by the user, consisting of exercise name, description, and date (optionally calories)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "### Deleting an exercise"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "1. Deleting an exercise while all exercises are being shown"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "   1. Prerequisites: List all exercises using the `list` command. Multiple exercises in the list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      Expected: No exercise is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 7,
      "Liu-2001": 27,
      "leeweiminsg": 9,
      "Nahoyhp": 44,
      "Nauman-S": 1,
      "-": 304
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "# 1. Welcome"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Calo is a desktop app that is **designed for keeping track of calories burnt throughout the day**. It is optimized for use via a **Command Line Interface (CLI)** while still having Graphical User Interface (GUI). If you are a skilled typer, you can carry out various tasks such as adding new exercises and checking records for previous days much faster than the traditional GUI apps."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- [1. Welcome](#1-welcome)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- [2. Quick start](#2-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.1. Viewing help : `help`](#31-viewing-help--help)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.2. Add exercises : `add`](#32-add-exercises--add)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.3. Update exercises : `update`](#33-update-exercises--update)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    - [Before](#before)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    - [Command](#command)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    - [After](#after)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.4. Delete : `delete`](#34-delete--delete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.5. List: `list`](#35-list-list)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.6. Find exercises: `find`](#36-find-exercises-find)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.7. Clearing all entries : `clear`](#37-clearing-all-entries--clear)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.8. Exiting the program : `exit`](#38-exiting-the-program--exit)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.9. Save](#39-save)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  - [3.10. Archive : `archive`](#310-archive--archive)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "  - [3.11. Recall : `recall`](#311-recall--recall)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "  - [3.12. Add templates : `create`](#312-add-templates--create)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "  - [3.13. Add an exercise using template : `addt`](#313-add-an-exercise-using-template--addt)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  - [4. FAQ](#4-faq)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  - [5. Command summary](#5-command-summary)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "# 2. Quick start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "2. Download the latest `Calo.jar` from [here](https://github.com/AY2021S1-CS2103T-W17-2/tp/releases)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your Calo."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "   Note how the app contains some sample data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ![Sample UI With Explanation](images/SampleUi.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. For the details of each command, refer to the Features below."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "---"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "# 3. Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cb\u003e:information_source: Notes about the command format:\u003c/b\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    - Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    e.g. in `add e/EXERCISE c/CALORIES`, `EXERCISE` is a parameter which can be used as `add e/Push Up c/1000`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    - Items in square brackets are optional."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    e.g `e/EXERCISE c/CALORIES [at/DATE]` can be used as `e/Push Up c/1000 at/29-09-2020` or as `e/Push Up c/1000`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    - Items with `…`​ after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/gym`, `t/school t/house` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    - Parameters can be in any order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    e.g. if the command specifies `e/EXERCISE c/CALORIES`, `c/CALORIES e/EXERCISE` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.1. Viewing help : `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Shows a message that explans how to access the help page."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.2. Add exercises : `add`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "Adds an exercise to the application, with date, calories burnt, muscles worked and tags as optional."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![add command message](images/addCommandMessage.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Format: `add n/EXERCISE d/DESCRIPTION [at/DATE] [c/CALORIES] [m/MUSCLE]... [t/TAG]...`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- The format for the DATE should be in the form of DD-MM-YYYY."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- If DATE is not provided, the default date will be the current day."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- Exercises are uniquely identified by names, descriptions, dates, and tags. Duplicate exercises cannot be added to Calo. You may consider including additional information in description (e.g. 2nd time) if you want to do the same exercise more than once a day."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- `add n/running d/10 mins at/31-12-2020 c/100 m/chest m/arm t/home t/gym`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.3. Update exercises : `update`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "Updates an existing exercise."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "### Before"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![before update](images/exerciseBeforeUpdate.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "### Command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![update command](images/updateCommand.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "### After"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![after update](images/exerciseAfterUpdate.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Format: `update INDEX [n/EXERCISE] [d/DESCRIPTION] [at/DATE] [c/CALORIES] [m/MUSCLE]... [t/TAG]...`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- Edits the workout at the specified `INDEX`. The index refers to the index number shown in the displayed workout list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- Existing values of the exercise will be updated to the input values."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- When editing tags/muscles, the existing tags/muscles of the exercise will be removed i.e adding of tags/muscles is not cumulative."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- You can remove all the exercise/muscle\u0027s tags by typing t/ or m/ respectively (without specifying any tags after it)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "- `update 1 n/Push up d/30 at/09-07-2020 c/260 m/chest m/arm t/home t/gym` Updates the exercise, the description, the date, calories burnt, muscles worked, and tags of the 1st exercise to be `push up`, `30`,  `09-07-2020`, `260`, `[chest, arm]`, and `[home, gym]` respectively."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.4. Delete : `delete`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Deletes an exercise that a user has previously added."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![delete command message](images/deleteCommandMessage.png)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- Deletes an exercise at the specified `INDEX`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- The index refers to the index number shown in the displayed workout list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- The index must be a positive integer: 1, 2, 3, …​"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- `delete 2` Deletes the second exercise in the displayed list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.5. List: `list`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Lists out all the exercises that the user has keyed in."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![list command message](images/listCommandMessage.png)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.6. Find exercises: `find`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "Finds exercises that match all the input fields."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![find command message](images/findCommandMessage.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "Format: `find [n/EXERCISE] [d/DESCRIPTION] [at/DATE] [c/CALORIES] [k/KEYWORD...]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- For name, description, date, and calories, only exercises that exactly match the inputs will be listed. These fields are case-insensitive. e.g. `Run` will match `run`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- For keywords, exercises whose names or descriptions contain any of the keywords will be listed. Only full words will be matched e.g. `run` will not match `running`. Keyword is case-insensitive. e.g `Squats` will match `squats`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- If both name/description and keywords are provided, only exercises that match both inputs will be listed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- in v1.4, find command does not support muscles and tags."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- find n/running"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.7. Clearing all entries : `clear`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Clears all entries from the Exercise book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "![clear command message](images/clearCommandMessage.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.8. Exiting the program : `exit`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.9. Save"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "The application will save the data automatically to the default file path after any command that changes the data. There is no need to save the data manually."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## 3.10. Archive : `archive`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Archive the data into a different file location."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Format: `archive f/FILE_LOCATION\\FILE_NAME.json`  "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "The format of the file location accept both Absolute and Relative Path."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "The file name must ends with the extension `.json`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "- `archive f/data\\file_name.json`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "- `archive f/C:\\Users\\user_name\\Desktop\\FILE_NAME.json`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cb\u003e Absolute Path \u003c/b\u003e: Path that contains root element, e.g. C:\\Users\\user_name\\Desktop\\FILE_NAME.json\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cb\u003e Relative Path \u003c/b\u003e: Path will take reference from the file that contains \u003cb\u003eCalo.jar\u003c/b\u003e For example, if Calo is inside"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    the \u003cmark\u003eC:\\Users\\UserName\\App\u003c/mark\u003e and the user entered \u003cmark\u003edata\\archived_file.json\u003c/mark\u003e as the destination, the archived file will be"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    at \u003cmark\u003eC:\\Users\\UserName\\App\\data\\archived_file.json\u003c/mark\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "## 3.11. Recall : `recall`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Recalls the most recent exercise with the specified name."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "![recall command message](images/recallCommandMessage.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "Format: `recall EXERCISE`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- the name of exercise is case-insensitive. e.g. `push up` will match `PUSH UP`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- Only exercises that are on or before the current day will be listed. Exercises with future dates will not be recalled."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "- `recall run` finds the most recent exercise with the name `run`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "## 3.12. Add templates : `create`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Adds an exercise template."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Format: `create n/NAME d/DESCRIPTION c/CALORIES`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Examples:\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- `create n/pushup c/100` Creates the exercise template with the name push up, description half an hour and calories 100."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "## 3.13. Add an exercise using template : `addt`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Adds an exercise using template."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Format: `addt temp/NAME d/DESCRIPTION at/DATE [c/CALORIES]`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- The format for the DATE should be in the form of DD-MM-YYYY.  "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Format: `addt n/NAME at/DATE [c/CALORIES]`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "- The format for the DATE should be in the form of DD-MM-YYYY"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- The user can input calorie value to overwrite the default calorie value defined by the template. If the user inputs no calories, then the exercise will have the default calorie value in the template."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Examples:\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- `addt temp/pushup d/half an hour at/09-07-2020 c/260` Creates the exercise using the template called pushup with the date 09-07-2020, description half an hour and calories 260."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "- `addt temp/pushup d/half an hour at/09-06-2020` Creates the exercise using the template called pushup with the date 09-06-2020, description half an hour and default calories 100."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "---"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Q*: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*A*: Transfer the file “data” that is contained in the same file as your .jar file from your old computer to your new computer."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*Q*: How to load my archived file?\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "*A*: For now, you can delete the `testing.json` file in the `data` folder and rename the archived file of your choices to `testing.json`. In subsequent updates, we will introduce a command to load archived files via Command Line Interface."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "---"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "## 5. Command summary"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "| Action     | Format, Examples                                                                                                                                                      |"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "| ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "| *Add*    | `add n/EXERCISE d/DESCRIPTION at/DATE [c/CALORIES] [m/MUSCLES_WORKED] [t/TAG]..` \u003cbr\u003e e.g., `add n/running d/10 mins at/31-12-2020 c/100 m/chest,arm t/home t/gym` |"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Clear* | `clear`|"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Delete* | `delete INDEX`\u003cbr\u003e e.g., `delete 2`     |                                                                                                                              |"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "| *Update*   | `update INDEX [n/EXERCISE] [d/DESCRIPTION] [at/DATE] [c/CALORIES]​ [m/MUSCLES_WORKED] [t/TAG]..`\u003cbr\u003e e.g., `update 1 n/Push up d/30 at/09-07-2020 c/260 m/chest,arm t/home t/gym`                                           |"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "| *Find*  | `find [n/EXERCISE] [d/DESCRIPTION] [at/DATE] [c/CALORIES] [k/KEYWORD...]`\u003cbr\u003e e.g., `find n/running`                                                                                                            |"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *List*   | `list`     |                                                                                                                                                           |"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Archive*   | `archive f/FILE_LOCATION`    \u003cbr\u003e e.g.,`archive data\\file_name.txt`                                                                                                                                                                    |"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Help* | `help`|"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "| *Exit* | `exit`|"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "| *Recall*   | `recall EXERCISE` \u003cbr\u003e e.g.,`recall running`  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "| *Create*   | `create n/EXERCISE c/CALORIES` \u003cbr\u003e e.g., `create n/pushup c/100`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "| *Addt*     | `addt temp/EXERCISE at/DATE [c/CALORIES]` \u003cbr\u003e e.g., `addt temp/pushup d/half an hour at/09-07-2020 c/260`"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 27,
      "Liu-2001": 24,
      "leeweiminsg": 65,
      "Nahoyhp": 44,
      "Nauman-S": 2,
      "-": 82
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteExercise(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveExerciseBook(exerciseBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBook *-right-\u003e \"1\" UniqueExerciseList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBook *-right-\u003e \"1\" UniqueExerciseTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBook *-right-\u003e \"1\" UniqueMuscleTagList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "UniqueExerciseTagList -[hidden]down- UniqueExerciseList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "UniqueMuscleTagList -[hidden]down- UniqueExerciseList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "UniqueExerciseTagList *-right-\u003e \"*\" ExerciseTag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "UniqueMuscleTagList *-right-\u003e \"*\"MuscleTag"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "UniqueExerciseList o-right-\u003e Exercise"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise o-up-\u003e \"*\" ExerciseTag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise o-up-\u003e \"*\" MuscleTag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Calories"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 14,
      "-": 10
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "participant \":ExerciseBookParser\" as ExerciseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "LogicManager -\u003e ExerciseBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "activate ExerciseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "DeleteCommandParser --\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "DeleteCommandParser --\u003e ExerciseBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "deactivate ExerciseBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "DeleteCommand -\u003e Model : deleteExercise(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class ExerciseBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "LogicManager --\u003e\"1\" ExerciseBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Interface ReadOnlyExerciseBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class ExerciseBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class ReadOnlyExerciseBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Package Exercise {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class Calories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class UniqueExerciseList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Package ExerciseTag {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class ExerciseTag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Package MuscleTag {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class MuscleTag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBook .up.|\u003e ReadOnlyExerciseBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ModelManager o--\u003e \"1\" ExerciseBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseBook *--\u003e \"1\" UniqueExerciseList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "UniqueExerciseList o--\u003e \"*\" Exercise"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e Calories"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e \"*\" ExerciseTag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Exercise *--\u003e \"*\" MuscleTag"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Name -[hidden]right-\u003e Name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Date -[hidden]right-\u003e Date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Description -[hidden]right-\u003e Description"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Calories -[hidden]right-\u003e Calories"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ModelManager --\u003e\"1\" Exercise : filtered list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 30,
      "-": 30
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Interface ExerciseBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class JsonExerciseBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "StorageManager o--\u003e ExerciseBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "JsonExerciseBookStorage .left.|\u003e ExerciseBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "JsonExerciseBookStorage .down.\u003e JsonSerializableExerciseBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "JsonSerializableExerciseBookStorage .right.\u003e JsonSerializableExercise"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "JsonSerializableExercise .right.\u003e JsonAdaptedExerciseTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "JsonSerializableExercise .right.\u003e JsonAdaptedMuscleTag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 8,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Interface StorageForExercise \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Interface ExerciseBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Class StorageManagerForExercise"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "Class ExerciseBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "StorageManagerForExercise .left.|\u003e StorageForExercise"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "StorageManagerForExercise o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "StorageManagerForExercise o--\u003e ExerciseBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonExerciseBookStorage .left.|\u003e ExerciseBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonExerciseBookStorage .down.\u003e JsonSerializableExerciseBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonSerializableExerciseBookStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 24
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class ExerciseListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Class ExerciseCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Class CaloriesGraph"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "MainWindow *-down-\u003e ExerciseListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "MainWindow *-down-\u003e CaloriesGraph"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseListPanel -down-\u003e ExerciseCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "CaloriesGraph ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseCard ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "ExerciseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 8,
      "Nahoyhp": 4,
      "-": 52
    }
  },
  {
    "path": "docs/team/leeweiminsg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ExerciseMainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicForExercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicManagerForExercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.GoalBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.ExerciseBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.storage.GoalBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.storage.JsonGoalBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageForExercise;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.storage.StorageForGoal;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageManagerForExercise;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.storage.StorageManagerForGoal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.ui.ExerciseUiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseMainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExerciseMainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected LogicForExercise logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected StorageForExercise storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    protected StorageForGoal goalStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected ExerciseModel model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ExerciseBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBookStorage exerciseBookStorage \u003d new JsonExerciseBookStorage(userPrefs.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        storage \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        GoalBookStorage goalBookStorage \u003d new JsonGoalBookStorage(userPrefs.getGoalBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalStorage \u003d new StorageManagerForGoal(goalBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model \u003d initModelManager(storage, goalStorage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logic \u003d new LogicManagerForExercise(model, storage, goalStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ui \u003d new ExerciseUiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        TemplateList.load();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s exercise book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The data from the sample exercise book will be used instead if {@code storage}\u0027s exercise book is not found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * or an empty exercise book will be used instead if errors occur when reading {@code storage}\u0027s exercise book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel initModelManager(StorageForExercise storage,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                                           StorageForGoal goalStorage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Optional\u003cReadOnlyExerciseBook\u003e exerciseBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ReadOnlyExerciseBook initialData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBookOptional \u003d storage.readExerciseBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (!exerciseBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExerciseBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initialData \u003d exerciseBookOptional.orElseGet(SampleDataUtil::getSampleExerciseBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExerciseBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initialData \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExerciseBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            initialData \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Optional\u003cReadOnlyGoalBook\u003e goalBookOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ReadOnlyGoalBook initialGoalData;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goalBookOptional \u003d goalStorage.readGoalBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (!goalBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample GoalBook\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            initialGoalData \u003d goalBookOptional.orElseGet(SampleDataUtil::getSampleGoalBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty GoalBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            initialGoalData \u003d new GoalBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GoalBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            initialGoalData \u003d new GoalBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new ExerciseModelManager(initialData, initialGoalData, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExerciseBook\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        logger.info(\"Starting ExerciseBook \" + ExerciseMainApp.VERSION);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logger.info(\"Starting GoalBook \" + ExerciseMainApp.VERSION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Exercise Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Goal Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goalStorage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 3,
      "leeweiminsg": 2,
      "Nahoyhp": 40,
      "Nauman-S": 33,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Application.launch(ExerciseMainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "Nahoyhp": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_EXERCISES_LISTED_OVERVIEW \u003d \"%1$d exercises listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Calo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The exercise index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "Nauman-S": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.ExerciseMainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Image(ExerciseMainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface LogicForExercise {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyExerciseBook getExerciseBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public ObservableList\u003cTemplate\u003e getFilteredTemplateList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Liu-2001": 3,
      "Nahoyhp": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManagerForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.ExerciseBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageForExercise;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.storage.StorageForGoal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class LogicManagerForExercise implements LogicForExercise {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManagerForExercise.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseModel model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final StorageForExercise storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final StorageForGoal goalStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseBookParser exerciseBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public LogicManagerForExercise(ExerciseModel model, StorageForExercise storage, StorageForGoal goalStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goalStorage \u003d goalStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBookParser \u003d new ExerciseBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        CommandForExercise command \u003d exerciseBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (command instanceof ArchiveCommand) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            ArchiveCommand cmd \u003d (ArchiveCommand) command;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            cmd.setStorage(storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            storage.saveExerciseBook(model.getExerciseBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goalStorage.saveGoalBook(model.getGoalBook());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getExerciseBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getCaloriesByDay();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public ObservableList\u003cTemplate\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getExerciseBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 6,
      "leeweiminsg": 1,
      "Nahoyhp": 93,
      "Nauman-S": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Adds an exercise to Calo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class AddCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise to Calo. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_MUSCLE + \"MUSCLE]... \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_NAME + \"running \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DESCRIPTION + \"10 mins \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DATE + \"31-12-2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_CALORIES + \"100 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_MUSCLE + \"chest \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_MUSCLE + \"arm \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"home \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"gym\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_WEIGHT \u003d \"You have burnt %.5s kg\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_GOAL \u003d \"Congratulations! Now you only have %s more calories to burn on %s!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the exercise book\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final Weight burntWeight;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public AddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        toAdd \u003d exercise;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.burntWeight \u003d new Weight(toAdd.getCalories());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (model.hasExercise(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Optional\u003cGoal\u003e optionalGoal \u003d model.addExercise(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (optionalGoal.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            Goal goal \u003d optionalGoal.get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    + String.format(MESSAGE_WEIGHT, burntWeight.getWeight())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    + String.format(MESSAGE_GOAL, goal.getCalories(), goal.getDate()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                + String.format(MESSAGE_WEIGHT, burntWeight.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 27,
      "leeweiminsg": 8,
      "Nahoyhp": 3,
      "Nauman-S": 11,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExerciseFromTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Weight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddExerciseFromTemplate extends CommandForExercise {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise to Calo using template. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_TEMP + \"TEMPLATE NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_TEMP + \"PUSH_UP \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"half an hour \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_DATE + \"31-12-2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_CALORIES + \"100\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_WEIGHT \u003d \"You have burnt %.5s kg\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_GOAL \u003d \"Congratulations! Now you only have %s more calories to burn on %s!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the exercise book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final Weight burntWeight;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Adds exercise from template"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param toAdd the exercise to be added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddExerciseFromTemplate(Exercise toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.burntWeight \u003d new Weight(toAdd.getCalories());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (model.hasExercise(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Optional\u003cGoal\u003e optionalGoal \u003d model.addExercise(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (optionalGoal.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            Goal goal \u003d optionalGoal.get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    + String.format(MESSAGE_WEIGHT, burntWeight.getWeight())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    + String.format(MESSAGE_GOAL, goal.getCalories(), goal.getDate()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                + String.format(MESSAGE_WEIGHT, burntWeight.toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 41,
      "Liu-2001": 20,
      "Nauman-S": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTemplateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddTemplateCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an exercise template. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_CALORIES + \"CALORIES\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_NAME + \"running \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + PREFIX_CALORIES + \"100\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New template created: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private final Template toCreate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddTemplateCommand(Template toCreate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.toCreate \u003d toCreate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (TemplateList.checkEqual(toCreate)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new CommandException(\"The template already exists.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        model.addTemplate(toCreate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template.writeToFile(TemplateList.getList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toCreate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.logic.LogicManagerForExercise.FILE_OPS_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.storage.StorageForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ArchiveCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": To archive current Progress to a separate file.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + PREFIX_PATH + \"File Location\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + PREFIX_PATH + \"data\\\\archive\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File has been archived to the specified location\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Path specifiedLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StorageForExercise storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ArchiveCommand(Path fileLocation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(fileLocation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.specifiedLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Set the storage which contains the content of the apps."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param storage The storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setStorage(StorageForExercise storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.storage.saveExerciseBook(model.getExerciseBook(), specifiedLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 specifiedLocation.equals(((ArchiveCommand) other).specifiedLocation));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ClearCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exercise book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        model.resetAll();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 3,
      "Nahoyhp": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public abstract class CommandForExercise {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public abstract CommandResult execute(ExerciseModel model) throws CommandException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Nahoyhp": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 6,
      "leeweiminsg": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": " * Deletes an exercise identified using it\u0027s displayed index from the Calo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class DeleteCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            + \": Deletes the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Exercise exerciseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 11,
      "Nahoyhp": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExitCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Exercise Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class FindCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all exercises whose details are matched to the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"given ones (case-sensitive) and whose names contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Parameters: \" + \"[\" + PREFIX_NAME + \"EXERCISE] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"[\" + PREFIX_KEYWORD + \"KEYWORDS...]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_NAME + \"Push Up \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DESCRIPTION + \"30 times \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_DATE + \"10-10-2020 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + PREFIX_CALORIES + \"100 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final PropertiesMatchPredicateForExercise predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public FindCommand(PropertiesMatchPredicateForExercise predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                String.format(Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 21,
      "Nauman-S": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class GoalCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a goal to Calo. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + PREFIX_CALORIES + \"CALORIES \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + PREFIX_CALORIES + \"100 \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + PREFIX_DATE + \"31-12-2020 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New goal added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GOAL \u003d \"This goal already exists in the Exercise Book\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final Goal goal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Creates goal command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public GoalCommand(Goal goal) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * executes the model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (model.hasGoal(goal)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GOAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model.addGoal(goal);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, goal));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                || (other instanceof GoalCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 goal.equals(((GoalCommand) other).goal)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class HelpCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.model.ExerciseModel.PREDICATE_SHOW_ALL_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class ListCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all exercises\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecallCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.TheMostRecentDatePredicateForExercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class RecallCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recall\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the most recent exercise \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"with the specified name (exercises with future dates will not be listed)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Parameters: NAME\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" push up\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$d most recent exercise found\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ObservableList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates an RecallCommand to recall exercise with the specified name {@code Name}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public RecallCommand(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public CommandResult execute(ExerciseModel model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        java.util.Date currentDay \u003d new java.util.Date();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        filteredExercises \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        for (Exercise exercise : filteredExercises) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            if (name.fullName.equalsIgnoreCase(exercise.getName().fullName)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 (!currentDay.before(exercise.getDate().getActualDate()))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    date \u003d exercise.getDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    date \u003d date.isBefore(exercise.getDate()) ? exercise.getDate() : date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        model.updateFilteredExerciseList(new TheMostRecentDatePredicateForExercise(name, date));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof RecallCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 name.equals(((RecallCommand) other).name)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.model.ExerciseModel.PREDICATE_SHOW_ALL_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Edits the details of an existing exercise in the exercise book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class UpdateCommand extends CommandForExercise {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"EXERCISE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_MUSCLE + \"MUSCLE]... \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_NAME + \"Push up \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_DESCRIPTION + \"30 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_DATE + \"09-07-2020 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_CALORIES + \"260 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_MUSCLE + \"chest \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_MUSCLE + \"arm \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"home \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            + PREFIX_TAG + \"gym\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the exercise book.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param index                  of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param editExerciseDescriptor details to edit the exercise with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public UpdateCommand(Index index, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.editExerciseDescriptor \u003d new UpdateCommand.EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public CommandResult execute(ExerciseModel model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!exerciseToEdit.isSameExercise(editedExercise) \u0026\u0026 model.hasExercise(editedExercise)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static Exercise createEditedExercise(Exercise exerciseToEdit,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                 UpdateCommand.EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Name updatedName \u003d editExerciseDescriptor.getName().orElse(exerciseToEdit.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Description updatedDescription \u003d editExerciseDescriptor.getDescription()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .orElse(exerciseToEdit.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Date updatedDate \u003d editExerciseDescriptor.getDate().orElse(exerciseToEdit.getDate());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Calories updatedCalories \u003d editExerciseDescriptor.getCalories().orElse(exerciseToEdit.getCalories());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cMuscleTag\u003e updatedMuscleTags \u003d editExerciseDescriptor.getMuscleTags()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .orElse(exerciseToEdit.getMuscleTags());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e updatedTags \u003d editExerciseDescriptor.getTags().orElse(exerciseToEdit.getExerciseTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Exercise(updatedName, updatedDescription, updatedDate,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                            updatedCalories, updatedMuscleTags, updatedTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Stores the details to edit the exercise with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * corresponding field value of the exercise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // identity field"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // data field"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // Functional dependencies: see Exercise class"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Set\u003cMuscleTag\u003e muscleTags;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private Set\u003cExerciseTag\u003e tags;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        public EditExerciseDescriptor() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public EditExerciseDescriptor(UpdateCommand.EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setMuscleTags(toCopy.muscleTags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, date, description, calories, muscleTags, tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Sets {@code muscleTags} to this object\u0027s {@code muscleTags}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * A defensive copy of {@code muscleTags} is used internally."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setMuscleTags(Set\u003cMuscleTag\u003e muscleTags) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.muscleTags \u003d (muscleTags !\u003d null) ? new HashSet\u003c\u003e(muscleTags) : null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns an unmodifiable muscleTag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code muscleTags} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cSet\u003cMuscleTag\u003e\u003e getMuscleTags() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return (muscleTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(muscleTags)) : Optional.empty();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void setTags(Set\u003cExerciseTag\u003e tags) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public Optional\u003cSet\u003cExerciseTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (!(other instanceof UpdateCommand.EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            UpdateCommand.EditExerciseDescriptor e \u003d (UpdateCommand.EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getCalories().equals(e.getCalories())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    \u0026\u0026 getMuscleTags().equals(e.getMuscleTags());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "leeweiminsg": 263,
      "Nahoyhp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Represents an error which occurs during execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddCommandParser implements ExerciseParser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                PREFIX_DATE, PREFIX_CALORIES, PREFIX_MUSCLE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElse(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).orElse(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cMuscleTag\u003e muscleTagList \u003d ParserUtil.parseMuscleTags(argMultimap.getAllValues(PREFIX_MUSCLE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagList \u003d ParserUtil.parseExerciseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, description, date, calories, muscleTagList, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new AddCommand(exercise);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Liu-2001": 11,
      "leeweiminsg": 12,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExerciseFromTemplateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddExerciseFromTemplateParser implements ExerciseParser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExerciseFromTemplateCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * and returns an AddExerciseFromTemplateCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TEMP, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_CALORIES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TEMP, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                PREFIX_DATE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                    seedu.address.logic.commands.AddExerciseFromTemplate.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name templateName \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_TEMP).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template template \u003d TemplateList.getTemp(templateName.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (template \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(\"The template does not exist.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(template.getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .orElse(template.getCalories().toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cMuscleTag\u003e muscleTagList \u003d ParserUtil.parseMuscleTags(argMultimap.getAllValues(PREFIX_MUSCLE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagList \u003d ParserUtil.parseExerciseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, description, date, calories, muscleTagList, tagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new AddCommand(exercise);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 65,
      "Liu-2001": 2,
      "leeweiminsg": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTemplateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.AddTemplateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class AddTemplateCommandParser implements ExerciseParser\u003cAddTemplateCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTemplateCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * and returns an AddTemplateCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public AddTemplateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CALORIES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CALORIES)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                    AddTemplateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template template \u003d new Template(name.fullName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                        parseInt(calories.value));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return new AddTemplateCommand(template);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTemplateCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * and returns an template object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public Template parseTemp(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CALORIES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CALORIES)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                    AddTemplateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Name name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template template \u003d new Template(name.fullName, parseInt(calories.value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return template;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 71,
      "Liu-2001": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ArchiveCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * and returns an ArchiveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PATH).isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String stringPath \u003d argMultimap.getValue(PREFIX_PATH).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!stringPath.endsWith(\"json\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new ParseException(\"Specified location should ends with \u0027.json\u0027.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"Example: parentDirectory/filename.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Path path \u003d ParserUtil.parsePath(stringPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new ArchiveCommand(path);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Nahoyhp": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final Prefix PREFIX_KEYWORD \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static final Prefix PREFIX_TEMP \u003d new Prefix(\"temp/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Prefix PREFIX_MUSCLE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 4,
      "leeweiminsg": 1,
      "Nahoyhp": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class DeleteCommandParser implements ExerciseParser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.commands.AddTemplateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.commands.RecallCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public CommandForExercise parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        case seedu.address.logic.commands.AddExerciseFromTemplate.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            return new AddExerciseFromTemplateParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        case AddTemplateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            return new AddTemplateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return new UpdateExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        case RecallCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return new RecallCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 5,
      "Liu-2001": 4,
      "leeweiminsg": 7,
      "Nahoyhp": 7,
      "Nauman-S": 12,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * T should extends Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public interface ExerciseParser\u003cT extends CommandForExercise\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "leeweiminsg": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class FindCommandParser implements ExerciseParser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Calories calories \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String[] keywords \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_CALORIES, PREFIX_KEYWORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (argMultimap.getValue(PREFIX_KEYWORD).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            keywords \u003d argMultimap.getValue(PREFIX_KEYWORD).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new FindCommand(new PropertiesMatchPredicateForExercise(name, description, date, calories,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                keywords \u003d\u003d null ? null : Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 42,
      "Nauman-S": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoalCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class GoalCommandParser implements ExerciseParser\u003cGoalCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoalCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * and returns an GoalCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public GoalCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALORIES, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALORIES, PREFIX_DATE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Goal goal \u003d new Goal(calories, date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new GoalCommand(goal);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "Nauman-S": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static seedu.address.model.exercise.Name parseExerciseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!seedu.address.model.exercise.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(seedu.address.model.exercise.Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new seedu.address.model.exercise.Name(trimmedName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String description} into a {@code description}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code Description} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code Date} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return new Date(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Parses a {@code String calories} into a {@code Calories}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws ParseException if the given {@code Calories} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return new Calories(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedCalories \u003d calories.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!Calories.isValidCalories(trimmedCalories)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new Calories(trimmedCalories);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses a {@code String muscleTag} into a {@code MuscleTag}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws ParseException if the given {@code muscleTag} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static MuscleTag parseMuscleTag(String muscleTag) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(muscleTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String trimmedTag \u003d muscleTag.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!MuscleTag.isValidMuscleTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(MuscleTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new MuscleTag(trimmedTag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e muscleTags} into a {@code Set\u003cMuscleTag\u003e}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Set\u003cMuscleTag\u003e parseMuscleTags(Collection\u003cString\u003e muscleTags) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(muscleTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Set\u003cMuscleTag\u003e muscleTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (String muscleTagName : muscleTags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            muscleTagSet.add(parseMuscleTag(muscleTagName));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return muscleTagSet;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses a {@code String tag} into a {@code ExerciseTag}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static ExerciseTag parseExerciseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!ExerciseTag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new ExerciseTag(trimmedTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cExerciseTag\u003e}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Set\u003cExerciseTag\u003e parseExerciseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Set\u003cExerciseTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            tagSet.add(parseExerciseTag(tagName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Parse a {@code String pathLocation} into a {@code Path}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws ParseException if the given {@code pathLocation} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static Path parsePath(String pathLocation) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(pathLocation);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String trimPathDirectory \u003d pathLocation.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (hasFileWithSameName(trimPathDirectory)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new ParseException(\"A file with same name exists. Please key in a different name\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!hasRightToCreate(trimPathDirectory)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException(\"You don\u0027t have right to create at the specified location\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return Paths.get(trimPathDirectory);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static boolean hasFileWithSameName(String filePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        File targetLocation \u003d new File(filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return targetLocation.exists();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static boolean hasRightToCreate(String filePath) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //return new File(filePath).canWrite();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Liu-2001": 37,
      "leeweiminsg": 39,
      "Nahoyhp": 32,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecallCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.commands.RecallCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class RecallCommandParser implements ExerciseParser\u003cRecallCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public RecallCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecallCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new RecallCommand(args.substring(1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Parses input arguments and creates a new UpdateExerciseCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class UpdateExerciseCommandParser implements ExerciseParser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateExerciseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * and returns an UpdateExerciseCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        PREFIX_DATE, PREFIX_CALORIES, PREFIX_MUSCLE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        EditExerciseDescriptor editExerciseDescriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UpdateCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setName(ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setDescription("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            editExerciseDescriptor.setCalories(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        parseMuscleTagsForEdit(argMultimap.getAllValues(PREFIX_MUSCLE))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .ifPresent(editExerciseDescriptor::setMuscleTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExerciseDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new UpdateCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cExerciseTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * {@code Set\u003cExerciseTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Optional\u003cSet\u003cExerciseTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Optional.of(ParserUtil.parseExerciseTags(tagSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e muscleTags} into a {@code Set\u003cMuscleTag\u003e} if {@code muscleTags} is non-empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * If {@code muscleTags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * {@code Set\u003cMuscleTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Optional\u003cSet\u003cMuscleTag\u003e\u003e parseMuscleTagsForEdit(Collection\u003cString\u003e muscleTags) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assert muscleTags !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (muscleTags.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Collection\u003cString\u003e muscleTagSet \u003d muscleTags.size() \u003d\u003d 1 \u0026\u0026 muscleTags.contains(\"\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                ? Collections.emptySet() : muscleTags;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Optional.of(ParserUtil.parseMuscleTags(muscleTagSet));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "leeweiminsg": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExerciseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Duplicates are not allowed (by .isSameexercise comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBook implements ReadOnlyExerciseBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected final UniqueExerciseList exercises;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public ExerciseBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates an ExerciseBook using the Exercises in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBook(ReadOnlyExerciseBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces the contents of the exercise list with {@code exercise}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code exercise} must not contain duplicate exercise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exercises.setExercises(exercises);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Resets the existing data of this {@code ExerciseBook} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData(ReadOnlyExerciseBook newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        setExercises(newData.getExerciseList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Reset all the data inside ExerciseBook."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetAllData() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises.resetAll();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        TemplateList.reset();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        //@@author Royxuzeng"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template.writeToFile(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        //@@author Royxuzeng"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    // exercise-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns true if an Exercise with the same identity as {@code Exercise} exists in the exercise book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return exercises.contains(exercise);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Adds a exercise to the exercise book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * The exercise must not already exist in the exercise book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void addExercise(Exercise p) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        exercises.add(p);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Replaces the given exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * {@code target} must exist in the exercise book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in the exercise"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        requireNonNull(editedExercise);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        exercises.updateExercise(target, editedExercise);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Removes {@code key} from this {@code ExerciseBook}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * {@code key} must exist in the exercise book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void removeExercise(Exercise key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        exercises.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return exercises.asUnmodifiableObservableList().size() + \" exercises\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return exercises.getCaloriesByDay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return exercises.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public ObservableList\u003cTemplate\u003e getTemplateList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return TemplateList.getObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                || (other instanceof ExerciseBook // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                \u0026\u0026 exercises.equals(((ExerciseBook) other).exercises));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return exercises.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 81,
      "Liu-2001": 2,
      "Nahoyhp": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExerciseModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface ExerciseModel {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the user prefs\u0027 exercise book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Path getGoalBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    HashMap\u003cString, Integer\u003e getCaloriesByDay();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the user prefs\u0027 exercise book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setExerciseBookFilePath(Path exerciseBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces exercise book data with the data in {@code exerciseBook}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Sets the user prefs\u0027 goal book file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void setGoalBookFilePath(Path goalBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Replaces goal book data with the data in {@code goalBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 73964788116bf5a1204853ef6458f89a192c3eae"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setExerciseBook(ReadOnlyExerciseBook exerciseBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Replaces goal book data with the data in {@code goalBook}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void setGoalBook(ReadOnlyGoalBook goalBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      * Returns the ExerciseBook."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ReadOnlyExerciseBook getExerciseBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the GoalBook."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    ReadOnlyGoalBook getGoalBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns true if a Exercise with the same identity as {@code Exercise} exists in the exercise book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    boolean hasExercise(Exercise exercise);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns true if a goal with the same identity as {@code goal} exists in the goal book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    boolean hasGoal(Goal goal);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Deletes the given exercise."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The exercise must exist in the exercise book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void deleteExercise(Exercise target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Deletes the given goal."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * The goal must exist in the exercise book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void deleteGoal(Goal target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Adds the given exercise."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code exercise} must not already exist in the exercise book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Optional\u003cGoal\u003e addExercise(Exercise exercise);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Adds the given template."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code template} must not already exist in the exericse book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    void addTemplate(Template template);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void resetAll() throws IOException;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Adds the given goal."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * {@code exercise} must not already exist in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void addGoal(Goal goal);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces the given Exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code target} must exist in the exercise book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The Exercise identity of {@code editedExercise} must not be the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * same as another existing Exercise in the exercise book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void setExercise(Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Returns an unmodifiable view of the filtered Exercise list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Replaces the given Exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * The Exercise identity of {@code editedExercise} must not be the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * same as another existing Exercise in the exercise book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void setGoal(Goal target, Goal editedGoal);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Updates the filter of the filtered Exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns the filtered Template list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    ObservableList\u003cTemplate\u003e getFilteredTemplateList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Save to the specified File"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void archive(Path path);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 12,
      "Liu-2001": 5,
      "Nahoyhp": 104,
      "Nauman-S": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExerciseModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Represents the in-memory model of the exercise book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseModelManager implements ExerciseModel {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExerciseModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseBook exerciseBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final FilteredList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final GoalBook goalBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final FilteredList\u003cTemplate\u003e filteredTemplates;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Initializes a ExerciseModelManager with the given exerciseBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public ExerciseModelManager(ReadOnlyExerciseBook exerciseBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                                ReadOnlyGoalBook goalBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireAllNonNull(exerciseBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logger.fine(\"Initializing with exercise book: \" + exerciseBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook \u003d new ExerciseBook(exerciseBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.filteredExercises \u003d new FilteredList\u003c\u003e(this.exerciseBook.getExerciseList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goalBook \u003d new GoalBook(goalBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.filteredTemplates \u003d new FilteredList\u003c\u003e(this.exerciseBook.getTemplateList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseModelManager(ReadOnlyExerciseBook exerciseBook) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this(exerciseBook, new GoalBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this(new ExerciseBook(), new GoalBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return userPrefs.getExerciseBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Path getGoalBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return userPrefs.getGoalBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(exerciseBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userPrefs.setExerciseBookFilePath(exerciseBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoalBookFilePath(Path goalBookFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(goalBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        userPrefs.setGoalBookFilePath(goalBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBook(ReadOnlyExerciseBook exerciseBook) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook.resetData(exerciseBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook.hasExercise(exercise);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook.removeExercise(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Optional\u003cGoal\u003e addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(exercise);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (goalBook.hasGoal(new Goal(exercise.getDate()))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            Goal goal \u003d goalBook.getGoal(exercise.getDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goalBook.removeGoal(goal);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goal \u003d goal.updateGoal(exercise.getCalories());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goalBook.addGoal(goal);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return Optional.of(goal);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void addTemplate(Template template) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        TemplateList.addTemplate(template);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void archive(Path path) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        System.out.println(\"Archived\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GoalBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoalBook(ReadOnlyGoalBook goalBook) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goalBook.resetData(goalBook);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void addGoal(Goal goal) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalBook.addGoal(goal);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean hasGoal (Goal goal) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalBook.hasGoal(goal);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public ReadOnlyGoalBook getGoalBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalBook;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void deleteGoal(Goal target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goalBook.removeGoal(target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoal(Goal target, Goal editedGoal) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireAllNonNull(target, editedGoal);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalBook.setGoal(target, editedGoal);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code versionedExerciseBook}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return filteredExercises;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public ObservableList\u003cTemplate\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return TemplateList.getObservableList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook.getCaloriesByDay();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        filteredExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetAll() throws IOException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.resetAllData();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        goalBook.resetData(new GoalBook());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!(obj instanceof ExerciseModelManager)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseModelManager other \u003d (ExerciseModelManager) obj;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook.equals(other.exerciseBook)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 filteredExercises.equals(other.filteredExercises);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 7,
      "Liu-2001": 10,
      "leeweiminsg": 2,
      "Nahoyhp": 172,
      "Nauman-S": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/GoalBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.UniqueGoalMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class GoalBook implements ReadOnlyGoalBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final UniqueGoalMap goalMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalMap \u003d new UniqueGoalMap();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public GoalBook() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Creates an GoalBook using the Goals in the {@code toBeCopied}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public GoalBook(ReadOnlyGoalBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (toBeCopied !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    //// map overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Replaces the contents of the goal list with {@code goals}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * {@code goals} must not contain duplicate goals."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoals(Map\u003cDate, Goal\u003e goals) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goalMap.setGoals(goals);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Resets the existing data of this {@code ExerciseBook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void resetData(ReadOnlyGoalBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        setGoals(newData.getGoalMap());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    //// goal-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns true if a goal with the same identity as {@code goal} exists in the goal book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean hasGoal(Goal goal) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalMap.contains(goal);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Goal getGoal (Date date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalMap.getGoal(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Adds a goal to the exercise book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * The goal must not already exist in the goal book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void addGoal(Goal goal) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalMap.add(goal);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Replaces the given goal {@code target} in the list with {@code editedGoal}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * {@code target} must exist in the exercise book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * The goal identity of {@code editedGoal} must not be the same as another existing goal in the goal book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoal(Goal target, Goal editedGoal) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(editedGoal);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalMap.setGoal(target, editedGoal);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Removes {@code key} from this {@code GoalBook}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * {@code key} must exist in the goal book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void removeGoal(Goal key) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalMap.remove(key);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalMap.asUnmodifiableObservableMap().size() + \" goals\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public ObservableMap\u003cDate, Goal\u003e getGoalMap() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalMap.asUnmodifiableObservableMap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                || (other instanceof GoalBook // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 goalMap.equals(((GoalBook) other).goalMap));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalMap.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 4,
      "Nauman-S": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExerciseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface ReadOnlyExerciseBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    ObservableList\u003cExercise\u003e getExerciseList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    ObservableList\u003cTemplate\u003e getTemplateList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    HashMap\u003cString, Integer\u003e getCaloriesByDay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 3,
      "Nahoyhp": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyGoalBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public interface ReadOnlyGoalBook {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    ObservableMap\u003cDate, Goal\u003e getGoalMap();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Path getGoalBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Path exerciseBookFilePath \u003d Paths.get(\"data\", \"testing.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private Path goalBookFilePath \u003d Paths.get(\"data\", \"goalbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        setGoalBookFilePath(newUserPrefs.getGoalBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Path getGoalBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.exerciseBookFilePath \u003d exerciseBookFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoalBookFilePath(Path goalBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(goalBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goalBookFilePath \u003d goalBookFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Nahoyhp": 9,
      "Nauman-S": 12,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Calories.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            \"Calories should be at least 1 digit long, or must be an integer\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Constructs a {@code Calories}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param calories A valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Calories(String calories) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            value \u003d \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            checkArgument(isValidCalories(calories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            value \u003d calories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if a given string is a valid input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static boolean isValidCalories(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.Calories // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 value.equals(((Calories) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Subtracts a {@code Calories}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param calories A valid input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Calories subtract(Calories calories) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Integer currentCalories \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Integer removedCalories \u003d Integer.parseInt(calories.value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Integer newCalorie \u003d currentCalories - removedCalories;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (newCalorie \u003c 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            newCalorie \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new Calories(String.valueOf(newCalorie));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 42,
      "leeweiminsg": 5,
      "Nahoyhp": 10,
      "Nauman-S": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \"Dates should be a valid date in calendar and should be in the format of DD-MM-YYYY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // name collision with Date class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private java.util.Date actualDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param date A valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            actualDate \u003d new java.util.Date();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            value \u003d dateFormat.format(actualDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                actualDate \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                // actually ParseException will never be thrown because we already check if the input is valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                actualDate \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            value \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String dateFormatForValidation \u003d \"dd-MM-uuuu\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(dateFormatForValidation)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            timeFormatter.parse(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return actualDate.before(other.actualDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public java.util.Date getActualDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return actualDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.Date // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 61,
      "leeweiminsg": 14,
      "Nahoyhp": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param description A valid name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return !test.equals(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.Description // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 34,
      "leeweiminsg": 3,
      "Nahoyhp": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/DescriptionContainsKeywordsPredicateForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DescriptionContainsKeywordsPredicateForExercise implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public DescriptionContainsKeywordsPredicateForExercise(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(exercise.getDescription().value, keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicateForExercise // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicateForExercise) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents an exercise in the exercise book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Functional dependencies:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Name -\u003e calories (hence left out in equality checks)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final Set\u003cMuscleTag\u003e muscleTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final Set\u003cExerciseTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Every field except for calories must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Exercise(Name name, Description description, Date date,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    Calories calories, Set\u003cMuscleTag\u003e muscleTags, Set\u003cExerciseTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireAllNonNull(name, description, muscleTags, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.muscleTags.addAll(muscleTags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an immutable muscleTag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Set\u003cMuscleTag\u003e getMuscleTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Collections.unmodifiableSet(muscleTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Set\u003cExerciseTag\u003e getExerciseTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Objects.hash(name, description, date, muscleTags, tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(getCalories())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(\" Muscles worked:\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        getMuscleTags().forEach(builder::append);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        getExerciseTags().forEach(builder::append);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //exercises are uniquely identified by names, descriptions, dates, and tags."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return otherExercise.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 otherExercise.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 otherExercise.getDate().equals(getDate())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 otherExercise.getExerciseTags().equals(getExerciseTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if both exercises are identified to be same."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return equals(otherExercise);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 32,
      "leeweiminsg": 53,
      "Nahoyhp": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents a Tag in the exercise book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExerciseTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseTag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                || (other instanceof ExerciseTag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 tagName.equals(((ExerciseTag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 6,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/MuscleTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents a MuscleTag in the exercise book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidMuscleTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class MuscleTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Muscle tag names should only contain alphabets\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alpha}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public final String muscleTagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Constructs a {@code MuscleTag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @param muscleTagName A valid muscle tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public MuscleTag(String muscleTagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireNonNull(muscleTagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        checkArgument(isValidMuscleTagName(muscleTagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.muscleTagName \u003d muscleTagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns true if a given string is a valid muscle tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static boolean isValidMuscleTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                || (other instanceof MuscleTag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \u0026\u0026 muscleTagName.equals(((MuscleTag) other).muscleTagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return muscleTagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return \u0027[\u0027 + muscleTagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Represents the Exercise\u0027s name in the exercise book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 1,
      "Nahoyhp": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/NameContainsKeywordsPredicateForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class NameContainsKeywordsPredicateForExercise implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public NameContainsKeywordsPredicateForExercise(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(exercise.getName().fullName, keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicateForExercise // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicateForExercise) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 7,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/PropertiesMatchPredicateForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class PropertiesMatchPredicateForExercise implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates a predicate to find exercises with matched properties."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public PropertiesMatchPredicateForExercise(Name name, Description description,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                               Date date, Calories calories, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (name !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d name.fullName.equalsIgnoreCase(exercise.getName().fullName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 (description.value.equalsIgnoreCase(exercise.getDescription().value));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 (date.equals(exercise.getDate()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (calories !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 (calories.equals(exercise.getCalories()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (keywords !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            result \u003d result \u0026\u0026 (new NameContainsKeywordsPredicateForExercise(keywords).test(exercise)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                || new DescriptionContainsKeywordsPredicateForExercise(keywords).test(exercise));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } else if (other instanceof PropertiesMatchPredicateForExercise) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            PropertiesMatchPredicateForExercise predicate \u003d (PropertiesMatchPredicateForExercise) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return (name \u003d\u003d predicate.name || name.equals(predicate.name)) // name is null or names are equal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (description \u003d\u003d predicate.description || description.equals(predicate.description))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (date \u003d\u003d predicate.date || date.equals(predicate.date))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (calories \u003d\u003d predicate.calories || calories.equals(predicate.calories))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u0026\u0026 (keywords \u003d\u003d predicate.keywords || keywords.equals(predicate.keywords));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Template.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class Template {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String filePath \u003d \"data/template.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private Integer calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Set\u003cMuscleTag\u003e muscleTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Set\u003cExerciseTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Template constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * All fields must be non-null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param name        name of the template"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param calories    calories of the template"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public Template(String name, Integer calories) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        requireAllNonNull(name, calories);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public Integer getCalories() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public Set\u003cExerciseTag\u003e getTags() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void setCalories(Integer calories) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * toString method of the template class"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @return the string representation of the template"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return \"Template{\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + \"name:\u0027\" + name + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + \u0027\\\u0027\u0027 + \", calories:\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                + calories + \u0027}\u0027;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public String parseToArgument() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return \"n/\" + getName() + \" c/\" + getCalories();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Write the template list to the file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param lists template list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void writeToFile(List\u003cTemplate\u003e lists) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String textToAdd \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        for (int i \u003d 0; i \u003c lists.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            Template template \u003d lists.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            textToAdd \u003d textToAdd + template.parseToArgument() + System.lineSeparator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static String getFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public boolean equals(Object toCreate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Template template \u003d (Template) toCreate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return this.getName().equals(template.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 78,
      "leeweiminsg": 18,
      "Nahoyhp": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/TemplateList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.AddTemplateCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class TemplateList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private static ArrayList\u003cTemplate\u003e list \u003d new ArrayList\u003cTemplate\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private static ObservableList\u003cTemplate\u003e observableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static List\u003cTemplate\u003e getList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static ObservableList\u003cTemplate\u003e getObservableList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return observableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static Template getTemp(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            if (list.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                return list.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Adds a template to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void addTemplate(Template template) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        list.add(template);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        observableList.add(template);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Load the template list from the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void load() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String filePath \u003d \"data/template.txt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                readTask(f);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Read from the template file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param f file to be read from"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static void readTask(File f) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        AddTemplateCommandParser parser \u003d new AddTemplateCommandParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                String string \u003d s.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                list.add(parser.parseTemp(\" \" + string));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                observableList.add(parser.parseTemp(\" \" + string));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Check whether the given template is equal to any of the template in the list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @param template template to check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @return true if the template is equal to some template in the list, false otherwise"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public static boolean checkEqual(Template template) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            if (template.equals(list.get(i))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Empty the content of TemplateList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static void reset() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        observableList.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 83,
      "Liu-2001": 12,
      "Nahoyhp": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/TheMostRecentDatePredicateForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class TheMostRecentDatePredicateForExercise implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates a predicate to look for exercises with specified name and date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public TheMostRecentDatePredicateForExercise(Name name, Date date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (name \u003d\u003d null || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return name.fullName.equalsIgnoreCase(exercise.getName().fullName) \u0026\u0026 date.equals(exercise.getDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * An exercise is considered unique by comparing using"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * {@code Exercise#isSameExercise(Exercise)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * exercises uses Exercise#isSameExercise(Exercise) for equality so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * as to ensure that the exercise being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * unique in terms of identity in the UniqueExerciseList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * However, the removal of an exercise uses Exercise#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * as to ensure that the exercise with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * @see Exercise#isSameExercise(Exercise)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private HashMap\u003cString, Integer\u003e caloriesByDay \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the HashMap that contains the amount of calories burnt per day."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return caloriesByDay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Adds an exercise to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * The exercise must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        addCaloriesForDay(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void updateExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        minusCaloriesForDay(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        addCaloriesForDay(editedExercise);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        minusCaloriesForDay(toRemove);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay \u003d replacement.getCaloriesByDay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        calculateExercise(exercises);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void calculateExercise(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        HashMap\u003cString, Integer\u003e newCaloriesByDay \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (Exercise e: exercises) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            addCaloriesForDay(e, newCaloriesByDay);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay \u003d newCaloriesByDay;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void addCaloriesForDay(Exercise newEntry) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        addCaloriesForDay(newEntry, caloriesByDay);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void addCaloriesForDay(Exercise newEntry, HashMap\u003cString, Integer\u003e currentCaloriesByDay) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String stringDate \u003d newEntry.getDate().value;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        int intCalories \u003d Integer.parseInt(newEntry.getCalories().toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (currentCaloriesByDay.containsKey(stringDate)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Integer newCalories \u003d currentCaloriesByDay.get(stringDate) + intCalories;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            currentCaloriesByDay.put(stringDate, newCalories);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            currentCaloriesByDay.put(stringDate, intCalories);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void minusCaloriesForDay(Exercise oldEntry) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String stringDate \u003d oldEntry.getDate().value;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        int intCalories \u003d Integer.parseInt(oldEntry.getCalories().toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assert caloriesByDay.containsKey(stringDate) : \"Input for minusCaloriesForDay() is wrong\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Integer newCalories \u003d caloriesByDay.get(stringDate) - intCalories;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay.put(stringDate, newCalories);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setCaloriesByDay(HashMap\u003cString, Integer\u003e newEntry) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay.clear();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay.putAll(newEntry);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Reset the exercise book so that everything is empty."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetAll() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesByDay.clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 22,
      "leeweiminsg": 44,
      "Nahoyhp": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueGoalMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateGoalException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.exceptions.GoalNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class UniqueGoalMap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final ObservableMap\u003cDate, Goal\u003e internalMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final ObservableMap\u003cDate, Goal\u003e internalUnmodifiableMap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            FXCollections.unmodifiableObservableMap(internalMap);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns true if the map contains an equivalent goal as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean contains(Goal toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return internalMap.containsKey(toCheck.date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns the goal based on date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      * @param date the date for the goal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return Goal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Goal getGoal (Date date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return internalMap.get(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Adds a goal to the map."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * There should not exist another goal with the same date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void add(Goal toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        internalMap.put(toAdd.date, toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Replaces the goal {@code target} in the map with {@code editedGoal}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * {@code target} must exist in the map."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoal(Goal target, Goal editedGoal) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireAllNonNull(target, editedGoal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!internalMap.containsKey(target.date)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new GoalNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!target.isSameGoal(editedGoal) \u0026\u0026 contains(editedGoal)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new DuplicateGoalException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        internalMap.put(editedGoal.getDate(), editedGoal);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Removes the equivalent goal from the map."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * The goal must exist in the map."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void remove(Goal toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            internalMap.remove(toRemove.getDate());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new GoalNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoals(UniqueGoalMap replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (Map.Entry\u003cDate, Goal\u003e entry : replacement.internalMap.entrySet()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            internalMap.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Replaces the contents of this list with {@code goals}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * {@code goals} must not contain duplicate goals."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setGoals(Map\u003cDate, Goal\u003e goals) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireAllNonNull(goals);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (Map.Entry\u003cDate, Goal\u003e entry : goals.entrySet()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            internalMap.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns the backing map as an unmodifiable {@code ObservableMap}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public ObservableMap\u003cDate, Goal\u003e asUnmodifiableObservableMap() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return internalUnmodifiableMap;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                || (other instanceof UniqueGoalMap // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 internalMap.equals(((UniqueGoalMap) other).internalMap));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return internalMap.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 4,
      "Nauman-S": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Weight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final Double CALORIE_PER_KG \u003d 7000.0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public final Double weight;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Constructs a {@code Weight}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param calories A valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Weight(Calories calories) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        weight \u003d convertCalorieToWeight(calories);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return String.valueOf(weight);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Double getWeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private Double convertCalorieToWeight (Calories calories) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return Double.valueOf(calories.toString()) / CALORIE_PER_KG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                || (other instanceof seedu.address.model.exercise.Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 weight.equals(((Weight) other).weight)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return weight.hashCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 4,
      "Nauman-S": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Signals that the operation will result in duplicate Exercises"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * (Exercises are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateGoalException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Signals that the operation will result in duplicate Goals"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * (Exercises are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class DuplicateGoalException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public DuplicateGoalException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        super(\"Operation would result in duplicate goals\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Liu-2001": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/GoalNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Signals that the operation is unable to find the specified goal."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class GoalNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/goal/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Creates a goal in the exercise Book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final Calories DEFAULT_CALORIES \u003d new Calories(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public final Calories goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Constructs a {@code Goal}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param goal A Calorie goal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Goal(Calories goal, Date date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Creates a default goal with 0 calories at a particular date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Goal(Date date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goal \u003d DEFAULT_CALORIES;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Goal updateGoal (Calories calorie) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new Goal(goal.subtract(calorie), this.date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goal.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                || (other instanceof seedu.address.model.goal.Goal // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 goal.equals(((Goal) other).goal)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 date.equals(((Goal) other).date)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns true if both goals have the same date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean isSameGoal(Goal otherGoal) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (otherGoal \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return otherGoal !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \u0026\u0026 (otherGoal.getDate().equals(getDate()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goal.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.GoalBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Contains utility methods for populating {@code ExerciseBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Set\u003cExerciseTag\u003e getExerciseTagSet(String... strings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .map(ExerciseTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns a muscleTag set containing the list of strings given."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Set\u003cMuscleTag\u003e getMuscleTagSet(String... strings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .map(MuscleTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static Exercise[] getSampleExercises() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new Exercise[]{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"Push Up\"), new Description(\"Did 52 within 60 seconds\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"01-10-2020\"), new Calories(\"100\"), getMuscleTagSet(\"chest\"), getExerciseTagSet(\"gym\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"Sit Up\"), new Description(\"Did 50\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"01-10-2020\"), new Calories(\"120\"), getMuscleTagSet(\"chest\"), getExerciseTagSet(\"gym\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"2 4km\"), new Description(\"11:30\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Date(\"04-10-2020\"), new Calories(\"100\"), getMuscleTagSet(\"chest\"), getExerciseTagSet(\"gym\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Exercise(new seedu.address.model.exercise.Name(\"Pull Up\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Description(\"20 with Added Weight: 5 kg \"), new Date(\"05-10-2020\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    new Calories(\"100\"), getMuscleTagSet(\"chest\"), getExerciseTagSet(\"gym\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static ReadOnlyExerciseBook getSampleExerciseBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook eb \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (Exercise e : getSampleExercises()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            eb.addExercise(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static ReadOnlyGoalBook getSampleGoalBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        GoalBook gb \u003d new GoalBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (Map.Entry\u003cDate, Goal\u003e entry: gb.getGoalMap().entrySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            gb.addGoal(entry.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return gb;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 18,
      "Nahoyhp": 22,
      "Nauman-S": 12,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExerciseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ExerciseBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface ExerciseBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns ExerciseBook data as a {@link ReadOnlyExerciseBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @see #getExerciseBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Saves the given {@link ReadOnlyExerciseBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param exerciseBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @see #saveExerciseBook(ReadOnlyExerciseBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveExerciseBook(ReadOnlyExerciseBook exerciseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Nahoyhp": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GoalBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Represents a storage for {@link seedu.address.model.GoalBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public interface GoalBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Path getGoalBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns GoalBook data as a {@link ReadOnlyGoalBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Optional\u003cReadOnlyGoalBook\u003e readGoalBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @see #getGoalBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Optional\u003cReadOnlyGoalBook\u003e readGoalBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Saves the given {@link ReadOnlyGoalBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param goalBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void saveGoalBook(ReadOnlyGoalBook goalBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @see #saveGoalBook(ReadOnlyGoalBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void saveGoalBook(ReadOnlyGoalBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class JsonAdaptedExercise {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final List\u003cJsonAdaptedMuscleTag\u003e musclesTagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final List\u003cJsonAdaptedExerciseTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given exercise details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"name\") String name, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                               @JsonProperty(\"date\") String date, @JsonProperty(\"calories\") String calories,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                               @JsonProperty(\"muscleTags\") List\u003cJsonAdaptedMuscleTag\u003e musclesTagged,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                               @JsonProperty(\"tags\") List\u003cJsonAdaptedExerciseTag\u003e tagged) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (musclesTagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.musclesTagged.addAll(musclesTagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Converts a given {@code JsonAdaptedExercise} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        calories \u003d source.getCalories().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        musclesTagged.addAll(source.getMuscleTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .map(JsonAdaptedMuscleTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        tagged.addAll(source.getExerciseTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .map(JsonAdaptedExerciseTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s {@code Exercise} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final List\u003cExerciseTag\u003e exerciseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final List\u003cMuscleTag\u003e muscleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (JsonAdaptedExerciseTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            exerciseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        for (JsonAdaptedMuscleTag tag : musclesTagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            muscleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Calories modelCalories;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            modelCalories \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Set\u003cMuscleTag\u003e musclesWorkedTags \u003d new HashSet\u003c\u003e(muscleTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final Set\u003cExerciseTag\u003e modelTags \u003d new HashSet\u003c\u003e(exerciseTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Exercise(modelName, modelDescription, modelDate, modelCalories, musclesWorkedTags, modelTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 57,
      "Nahoyhp": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExerciseTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Jackson-friendly version of {@link ExerciseTag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "class JsonAdaptedExerciseTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public JsonAdaptedExerciseTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public JsonAdaptedExerciseTag(ExerciseTag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ExerciseTag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseTag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!ExerciseTag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new ExerciseTag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 10,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Jackson-friendly version of {@link Goal}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class JsonAdaptedGoal {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Constructs a {@code JsonAdaptedGoal} with the given goal details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public JsonAdaptedGoal(@JsonProperty(\"date\") String date, @JsonProperty(\"calories\") String calories) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Converts a given {@code JsonAdaptedGoal} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public JsonAdaptedGoal(Goal source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        calories \u003d source.getCalories().value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Goal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new IllegalValueException(\"Goal Date field is missing!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new IllegalValueException(\"Invalid Date\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new IllegalValueException(\"Person\u0027s Calories field is missing!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new IllegalValueException(\"Invalid Calories\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new Goal(modelCalories, modelDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMuscleTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Jackson-friendly version of {@link MuscleTag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "class JsonAdaptedMuscleTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private final String muscleTagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Constructs a {@code JsonAdaptedMuscleTag} with the given {@code muscleTagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public JsonAdaptedMuscleTag(String muscleTagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.muscleTagName \u003d muscleTagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Converts a given {@code MuscleTag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public JsonAdaptedMuscleTag(MuscleTag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        muscleTagName \u003d source.muscleTagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public String getMuscleTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return muscleTagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Converts this Jackson-friendly adapted muscleTag object into the model\u0027s {@code MuscleTag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted muscleTag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public MuscleTag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (!MuscleTag.isValidMuscleTagName(muscleTagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            throw new IllegalValueException(MuscleTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new MuscleTag(muscleTagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonExerciseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A class to access ExerciseBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class JsonExerciseBookStorage implements ExerciseBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExerciseBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonExerciseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return readExerciseBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Similar to {@link #readExerciseBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Optional\u003cJsonSerializableExerciseBook\u003e jsonExerciseBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                filePath, JsonSerializableExerciseBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!jsonExerciseBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return Optional.of(jsonExerciseBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        saveExerciseBook(exerciseBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Similar to {@link #saveExerciseBook(ReadOnlyExerciseBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook exerciseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(exerciseBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExerciseBook(exerciseBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonGoalBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class JsonGoalBookStorage implements GoalBookStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExerciseBookStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public JsonGoalBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Path getGoalBookFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Optional\u003cReadOnlyGoalBook\u003e readGoalBook() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return readGoalBook(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Similar to {@link #readGoalBook()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Optional\u003cReadOnlyGoalBook\u003e readGoalBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Optional\u003cJsonSerializableGoalBook\u003e jsonGoalBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                filePath, JsonSerializableGoalBook.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!jsonGoalBook.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return Optional.of(jsonGoalBook.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void saveGoalBook(ReadOnlyGoalBook goalBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        saveGoalBook(goalBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Similar to {@link #saveGoalBook(ReadOnlyGoalBook)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void saveGoalBook(ReadOnlyGoalBook goalBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        requireNonNull(goalBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGoalBook(goalBook), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 19,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableExerciseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * An Immutable ExerciseBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "@JsonRootName(value \u003d \"exercisebook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class JsonSerializableExerciseBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"Exercise list contains duplicate exercise(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Constructs a {@code JsonSerializableExerciseBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonSerializableExerciseBook(@JsonProperty(\"exercises\") List\u003cJsonAdaptedExercise\u003e exercises) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exercises.addAll(exercises);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Converts a given {@code ReadOnlyExerciseBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExerciseBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public JsonSerializableExerciseBook(ReadOnlyExerciseBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exercises.addAll(source.getExerciseList().stream().map(JsonAdaptedExercise::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Converts this Exercise book into the model\u0027s {@code ExerciseBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook exerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (JsonAdaptedExercise jsonAdaptedExercise : exercises) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Exercise exercise \u003d jsonAdaptedExercise.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (exerciseBook.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            exerciseBook.addExercise(exercise);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "Nahoyhp": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableGoalBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.GoalBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * An Immutable GoalBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "@JsonRootName(value \u003d \"goalbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class JsonSerializableGoalBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GOAL \u003d \"Goals list contains duplicate goal(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private final List\u003cJsonAdaptedGoal\u003e goals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Constructs a {@code JsonSerializableGoalBook} with the given goals."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public JsonSerializableGoalBook(@JsonProperty(\"goals\") List\u003cJsonAdaptedGoal\u003e goals) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goals.addAll(goals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Converts a given {@code ReadOnlyGoalBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableGoalBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public JsonSerializableGoalBook(ReadOnlyGoalBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (Map.Entry\u003cDate, Goal\u003e entry :source.getGoalMap().entrySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goals.add(new JsonAdaptedGoal(entry.getValue()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Converts this Goal book into the model\u0027s {@code GoalBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public GoalBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        GoalBook goalBook \u003d new GoalBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (JsonAdaptedGoal jsonAdaptedGoal : goals) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            Goal goal \u003d jsonAdaptedGoal.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (goalBook.hasGoal(goal)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GOAL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            goalBook.addGoal(goal);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public interface StorageForExercise extends ExerciseBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageForGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public interface StorageForGoal extends GoalBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Path getGoalBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    Optional\u003cReadOnlyGoalBook\u003e readGoalBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    void saveGoalBook(ReadOnlyGoalBook goalBook) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManagerForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class StorageManagerForExercise implements StorageForExercise {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManagerForExercise.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseBookStorage exerciseBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public StorageManagerForExercise(ExerciseBookStorage exerciseBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.exerciseBookStorage \u003d exerciseBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBookStorage.getExerciseBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return readExerciseBook(exerciseBookStorage.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBookStorage.readExerciseBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook exerciseBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        saveExerciseBook(exerciseBook, exerciseBookStorage.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void saveExerciseBook(ReadOnlyExerciseBook exerciseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        exerciseBookStorage.saveExerciseBook(exerciseBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 5,
      "Nahoyhp": 12,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManagerForGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class StorageManagerForGoal implements StorageForGoal {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManagerForGoal.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private GoalBookStorage goalBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Constructor for StorageManagerForGoal"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param goalBookStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param userPrefsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public StorageManagerForGoal(GoalBookStorage goalBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.goalBookStorage \u003d goalBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GoalBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Path getGoalBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalBookStorage.getGoalBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Optional\u003cReadOnlyGoalBook\u003e readGoalBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return readGoalBook(goalBookStorage.getGoalBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Optional\u003cReadOnlyGoalBook\u003e readGoalBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return goalBookStorage.readGoalBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void saveGoalBook(ReadOnlyGoalBook goalBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        saveGoalBook(goalBook, goalBookStorage.getGoalBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void saveGoalBook(ReadOnlyGoalBook goalBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logger.fine(\"Attempting to write goal to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        goalBookStorage.saveGoalBook(goalBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CaloriesGraph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.XYChart.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.chart.XYChart.Series;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class CaloriesGraph extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final int DAY_TO_DISPLAY \u003d 7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"CaloriesGraph.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private HashMap\u003cString, Integer\u003e dayCalories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Pane pane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code CaloriesGraph} with the given {@code HashMap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public CaloriesGraph(HashMap\u003cString, Integer\u003e dayCalories) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.dayCalories \u003d dayCalories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        generateGraph();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Generates the graph based on this HashMap that is assigned during initialisation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void generateGraph() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        LineChart\u003cString, Number\u003e lineChart \u003d new LineChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Series\u003cString, Number\u003e series \u003d new Series\u003cString, Number\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] dates \u003d generateDisplayDates();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Integer calories;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c DAY_TO_DISPLAY; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //Get X,Y co ordinates for a point which corresponds to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //the date, and the amount of calories burnt on that date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            date \u003d dates[i];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            calories \u003d dayCalories.get(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (Objects.isNull(calories)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                calories \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            series.getData().add(new Data\u003cString, Number\u003e(date, calories));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        lineChart.getData().add(series);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        pane.getChildren().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        pane.getChildren().add(lineChart);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private String[] generateDisplayDates() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] dates \u003d new String[DAY_TO_DISPLAY];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c DAY_TO_DISPLAY; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //the dates should be in the order of earlies to latest"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            dates[i] \u003d today.minus(Period.ofDays(DAY_TO_DISPLAY - 1 - i)).format(formatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public final Exercise exercise;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private FlowPane muscleTags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code ExerciseCode} with the given {@code Exercise} and index to display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseCard(Exercise exercise, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name.setText(exercise.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date.setText(exercise.getDate().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description.setText(exercise.getDescription().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        calories.setText(exercise.getCalories().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        exercise.getMuscleTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.muscleTagName))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .forEach(tag -\u003e muscleTags.getChildren().add(new Label(tag.muscleTagName)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        exercise.getExerciseTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!(other instanceof ExerciseCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseCard card \u003d (ExerciseCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u0026\u0026 exercise.equals(card.exercise);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 14,
      "Nahoyhp": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Panel containing the list of exercises."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ListView\u003cExercise\u003e exerciseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code ExerciseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Exercise} using a {@code ExerciseCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    class ExerciseListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "Nahoyhp": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseUiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.ExerciseMainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicForExercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseUiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExerciseUiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/Calo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private LogicForExercise logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private MainWindowForExercise mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates a {@code ExerciseUiManager} with the given {@code LogicForExercise}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseUiManager(LogicForExercise logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            mainWindow \u003d new MainWindowForExercise(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Image(ExerciseMainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "Nahoyhp": 9,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \"https://ay2021s1-cs2103t-w17-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *                                       if this method is called on a thread other than the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *                                       JavaFX Application Thread."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called on the primary stage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 4,
      "leeweiminsg": 1,
      "Nahoyhp": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindowForExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.LogicForExercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class MainWindowForExercise extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String FXML \u003d \"MainWindowForExercise.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private LogicForExercise logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseListPanel exerciseListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private TemplateListPanel templateListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private CaloriesGraph caloriesGraph;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private StackPane templateListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane exerciseListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StackPane caloriesGraphPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public MainWindowForExercise(Stage primaryStage, LogicForExercise logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        templateListPanel \u003d new TemplateListPanel(logic.getFilteredTemplateList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        templateListPanelPlaceholder.getChildren().add(templateListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesGraph \u003d new CaloriesGraph(logic.getCaloriesByDay());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        caloriesGraphPlaceholder.getChildren().add(caloriesGraph.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseListPanel getExerciseListPanel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseListPanel;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            caloriesGraph.generateGraph();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Liu-2001": 6,
      "Nahoyhp": 23,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TemplateCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * An UI component that displays information of a {@code Template}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class TemplateCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private static final String FXML \u003d \"TemplateListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public final Template template;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates a {@code ExerciseCode} with the given {@code Exercise} and index to display."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public TemplateCard(Template template, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.template \u003d template;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        name.setText(template.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        calories.setText((template.getCalories()).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (!(other instanceof TemplateCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        TemplateCard card \u003d (TemplateCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u0026\u0026 template.equals(card.template);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TemplateListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Panel containing the list of templates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class TemplateListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private static final String FXML \u003d \"TemplateListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ListView\u003cTemplate\u003e templateListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates a {@code TemplateListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public TemplateListPanel(ObservableList\u003cTemplate\u003e templateList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        templateListView.setItems(templateList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        templateListView.setCellFactory(listView -\u003e new TemplateListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Template} using a {@code TemplateCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    class TemplateListViewCell extends ListCell\u003cTemplate\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        protected void updateItem(Template template, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            super.updateItem(template, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            if (empty || template \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                setGraphic(new TemplateCard(template, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.ExerciseMainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        URL fxmlFileUrl \u003d ExerciseMainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 6,
      "leeweiminsg": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/CaloriesGraph.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cVBox fx:id\u003d\"pane\" prefHeight\u003d\"188.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \u003cPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 10
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ".cell_description {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    -fx-background-color: #df5527"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "#muscleTags {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "#muscleTags .label {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-background-color: #008000;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 14,
      "Nahoyhp": 6,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003cLabel fx:id\u003d\"calories\" alignment\u003d\"CENTER_RIGHT\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cLabel fx:id\u003d\"id11\" styleClass\u003d\"cell_small_label\" text\u003d\"kcal\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                     \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dates\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cInsets bottom\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_description\" text\u003d\"\\$description\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cInsets bottom\u003d\"3.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"muscleTags\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 66
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cListView fx:id\u003d\"exerciseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 10
    }
  },
  {
    "path": "src/main/resources/view/ExerciseMainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cVBox fx:id\u003d\"exerciseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"exerciseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 59
    }
  },
  {
    "path": "src/main/resources/view/MainWindowForExercise.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Calo\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cImage url\u003d\"@/images/Calo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003cStackPane fx:id\u003d\"caloriesGraphPlaceholder\" prefHeight\u003d\"30.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003cHBox fx:id\u003d\"lists\" minWidth\u003d\"450\" prefWidth\u003d\"450\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003cVBox fx:id\u003d\"exerciseList\" minWidth\u003d\"220\" prefWidth\u003d\"220\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"exerciseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003cVBox fx:id\u003d\"templateList\" minWidth\u003d\"220\" prefWidth\u003d\"220\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"templateListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 11,
      "Nahoyhp": 62
    }
  },
  {
    "path": "src/main/resources/view/TemplateListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003cLabel fx:id\u003d\"calories\" alignment\u003d\"CENTER_RIGHT\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id11\" styleClass\u003d\"cell_big_label\" text\u003d\"kcal\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 45
    }
  },
  {
    "path": "src/main/resources/view/TemplateListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    \u003cListView fx:id\u003d\"templateListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/notJsonFormatAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "hello everyone {}"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "trying to mess out this file."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 5
    }
  },
  {
    "path": "src/test/data/JsonExerciseBookStorageTest/invalidAndValidExerciseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  \"exercises\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"name\": \"Push Up\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"description\": \"Valid Exercise\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"date\": \"10-10-20\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"calories\": \"100\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"name\": \"Invalid Description\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"description\": \"Inv@lid DEScr1pTI0N\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"date\": \"10-10-20\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"calories\": \"100\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 17
    }
  },
  {
    "path": "src/test/data/JsonExerciseBookStorageTest/invalidExerciseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  \"exercises\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"name\": \"Inv@L!D N@M3\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"description\": \"Test 1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"date\": \"10-10-20\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "      \"calories\": \"100\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 11
    }
  },
  {
    "path": "src/test/data/JsonExerciseBookStorageTest/notJsonFormatExerciseBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "not json format!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.ExerciseTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d ExerciseTestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.PUSH_UP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.storage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.storage.JsonGoalBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.storage.StorageManagerForExercise;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.storage.StorageManagerForGoal;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private LogicForExercise logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        JsonExerciseBookStorage exerciseBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonExerciseBookStorage(temporaryFolder.resolve(\"exerciseBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        JsonGoalBookStorage goalBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                new JsonGoalBookStorage(temporaryFolder.resolve(\"goalbook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        StorageManagerForExercise storage \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        StorageManagerForGoal goalStorage \u003d new StorageManagerForGoal(goalBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logic \u003d new LogicManagerForExercise(model, storage, goalStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonExerciseBookStorage exerciseBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonExerciseBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionExerciseBook.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        StorageManagerForExercise storage \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        logic \u003d new LogicManagerForExercise(model, storage, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                  + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                  + CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(PUSH_UP).withTags().withMuscleTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseModelManager expectedModel \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.addExercise(expectedExercise);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d LogicManagerForExercise.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public void getFilteredExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            ExerciseModel expectedModel) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ExerciseModel)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "     * @see #assertCommandSuccess(String, String, ExerciseModel)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            String expectedMessage, ExerciseModel expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static class JsonExerciseBookIoExceptionThrowingStub extends JsonExerciseBookStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        private JsonExerciseBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        public void saveExerciseBook(ReadOnlyExerciseBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 11,
      "leeweiminsg": 30,
      "Nauman-S": 9,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ExerciseModel model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model \u003d new ExerciseModelManager(getTypicalExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void execute_newExercise_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        expectedModel.addExercise(validExercise);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExercise), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validExercise), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 11,
      "Nauman-S": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ReadOnlyGoalBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Template;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void execute_exerciseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ModelStubAcceptingExerciseAdded modelStub \u003d new ModelStubAcceptingExerciseAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExercise).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        //assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExercise), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(Arrays.asList(validExercise), modelStub.exercisesAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise running \u003d new ExerciseBuilder().withName(\"running\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise jumping \u003d new ExerciseBuilder().withName(\"jumping\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AddCommand addRunningCommand \u003d new AddCommand(running);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AddCommand addJumpingCommand \u003d new AddCommand(jumping);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(addRunningCommand.equals(addRunningCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(addRunningCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(addRunningCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(addRunningCommand.equals(addJumpingCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private class ModelStub implements ExerciseModel {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public Path getGoalBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public void setGoalBookFilePath(Path goalBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public Optional\u003cGoal\u003e addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        public void addTemplate(Template template) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public void addGoal(Goal goal) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void setExerciseBook(ReadOnlyExerciseBook newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public void setGoalBook(ReadOnlyGoalBook goalBook) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public ReadOnlyGoalBook getGoalBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public boolean hasGoal(Goal goal) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public void deleteGoal(Goal target) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void setExercise(Exercise target, Exercise editExercise) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public void setGoal(Goal target, Goal editedGoal) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public ObservableList\u003cTemplate\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new AssertionError(\"this method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public void archive(Path path) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public void resetAll() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * A Model stub that always accept the exercise being added."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private class ModelStubAcceptingExerciseAdded extends ModelStub {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        final ArrayList\u003cExercise\u003e exercisesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        final HashMap\u003cString, Integer\u003e caloriesByDay \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return exercisesAdded.stream().anyMatch(exercise::isSameExercise);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        public Optional\u003cGoal\u003e addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            addCaloriesForDay(exercise);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            exercisesAdded.add(exercise);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return Optional.of(new Goal(exercise.getDate()));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        private void addCaloriesForDay(Exercise newEntry) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String stringDate \u003d newEntry.getDate().value;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            int intCalories \u003d Integer.parseInt(newEntry.getCalories().toString());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (caloriesByDay.containsKey(stringDate)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                Integer newCalories \u003d caloriesByDay.get(stringDate) + intCalories;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                caloriesByDay.put(stringDate, newCalories);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                caloriesByDay.put(stringDate, intCalories);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public HashMap\u003cString, Integer\u003e getCaloriesByDay() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return caloriesByDay;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        public ReadOnlyExerciseBook getExerciseBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            return new ExerciseBook();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Liu-2001": 42,
      "leeweiminsg": 1,
      "Nahoyhp": 29,
      "Nauman-S": 37,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.TemplateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_emptyExerciseBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseModel model \u003d new ExerciseModelManager(new ExerciseBookNoWritingStubs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_nonEmptyExerciseBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBookNoWritingStubs exerciseBook \u003d new ExerciseBookNoWritingStubs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.resetData(getTypicalExerciseBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseModel model \u003d new ExerciseModelManager(exerciseBook, null,  new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //Since the methods mutable the exercise book parsed into it"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBookNoWritingStubs exerciseBook2 \u003d new ExerciseBookNoWritingStubs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook2.resetData(getTypicalExerciseBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(exerciseBook2, null, new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.setExerciseBook(new ExerciseBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class ExerciseBookNoWritingStubs extends ExerciseBook {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetAllData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super.exercises.resetAll();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        TemplateList.reset();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 8,
      "Nahoyhp": 21,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.exercise.NameContainsKeywordsPredicateForExercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_NAME_PUSH_UP \u003d \"Push Up\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DESCRIPTION_PUSH_UP \u003d \"Push Up Description\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DATE_PUSH_UP \u003d \"10-10-2020\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_CALORIES_PUSH_UP \u003d \"100\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_MUSCLE_CHEST \u003d \"chest\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_TAG_GYM \u003d \"gym\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_TAG_HOUSE \u003d \"house\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_NAME_SIT_UP \u003d \"Sit Up\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DESCRIPTION_SIT_UP \u003d \"Sit Up Description\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_DATE_SIT_UP \u003d \"10-10-2020\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_CALORIES_SIT_UP \u003d \"100\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String VALID_MUSCLE_ARM \u003d \"ab\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String NAME_DESC_PUSH_UP \u003d \" \" + PREFIX_NAME + VALID_NAME_PUSH_UP;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DESCRIPTION_DESC_PUSH_UP \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PUSH_UP;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DATE_DESC_PUSH_UP \u003d \" \" + PREFIX_DATE + VALID_DATE_PUSH_UP;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String CALORIES_DESC_PUSH_UP \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_PUSH_UP;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MUSCLE_DESC_CHEST \u003d \" \" + PREFIX_MUSCLE + VALID_MUSCLE_CHEST;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String TAG_DESC_GYM \u003d \" \" + PREFIX_TAG + VALID_TAG_GYM;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String TAG_DESC_HOUSE \u003d \" \" + PREFIX_TAG + VALID_TAG_HOUSE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String NAME_DESC_SIT_UP \u003d \" \" + PREFIX_NAME + VALID_NAME_SIT_UP;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DESCRIPTION_DESC_SIT_UP \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_SIT_UP;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DATE_DESC_SIT_UP \u003d \" \" + PREFIX_DATE + VALID_DATE_SIT_UP;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String CALORIES_DESC_SIT_UP \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_SIT_UP;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String MUSCLE_DESC_ARM \u003d \" \" + PREFIX_MUSCLE + VALID_MUSCLE_ARM;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"run\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION; // description should not be empty"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2020-10-10\"; // date of incorrect format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"abc\"; // calories should be numbers"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String INVALID_MUSCLE_DESC \u003d \" \" + PREFIX_MUSCLE + \"chest*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"gym*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final UpdateCommand.EditExerciseDescriptor DESC_PUSH_UP;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final UpdateCommand.EditExerciseDescriptor DESC_SIT_UP;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // Calo"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        DESC_PUSH_UP \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PUSH_UP).withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withCalories(VALID_CALORIES_PUSH_UP).withTags(VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        DESC_SIT_UP \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_SIT_UP)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_SIT_UP).withDate(VALID_DATE_SIT_UP)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withCalories(VALID_CALORIES_SIT_UP).withTags(VALID_TAG_GYM, VALID_TAG_HOUSE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static void assertCommandSuccess(CommandForExercise command, ExerciseModel actualModel,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                            CommandResult expectedCommandResult, ExerciseModel expectedModel) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        } catch (CommandException | IOException ce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Convenience wrapper that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static void assertCommandSuccess(CommandForExercise command, ExerciseModel actualModel,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                            String expectedMessage, ExerciseModel expectedModel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static void assertCommandFailure(CommandForExercise command,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                            ExerciseModel actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseBook expectedExerciseBook \u003d new ExerciseBook(actualModel.getExerciseBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cExercise\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedExerciseBook, actualModel.getExerciseBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void showExerciseAtIndex(ExerciseModel model, Index targetIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Exercise exercise \u003d model.getFilteredExerciseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        final String[] splitName \u003d exercise.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model.updateFilteredExerciseList(new NameContainsKeywordsPredicateForExercise(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertEquals(1, model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 3,
      "Liu-2001": 7,
      "leeweiminsg": 55,
      "Nauman-S": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager(getTypicalExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModelManager expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showNoExercise(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExerciseBook().getExerciseList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private void showNoExercise(ExerciseModel model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        model.updateFilteredExerciseList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertTrue(model.getFilteredExerciseList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 28,
      "leeweiminsg": 1,
      "Nahoyhp": 2,
      "Nauman-S": 3,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private ExerciseModel expectedModel \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 4,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager(getTypicalExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel expectedModel \u003d new ExerciseModelManager(getTypicalExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d new Name(\"Push Up\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d new Description(\"test\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Date date \u003d new Date(\"10-10-2020\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Calories calories \u003d new Calories(\"224\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PropertiesMatchPredicateForExercise firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new PropertiesMatchPredicateForExercise(name, description, date,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        calories, Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PropertiesMatchPredicateForExercise secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new PropertiesMatchPredicateForExercise(name, description, date,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        calories, Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void execute_zeroKeywords_noExerciseFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXERCISES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(input.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PropertiesMatchPredicateForExercise predicate \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new PropertiesMatchPredicateForExercise(null, null, null, null, keywords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    public void execute_multipleKeywords_multipleExercisesFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        String expectedMessage \u003d String.format(MESSAGE_EXERCISES_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        String input \u003d \"up sQuat\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        List\u003cString\u003e keywords \u003d Arrays.asList(input.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        PropertiesMatchPredicateForExercise predicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //                new PropertiesMatchPredicateForExercise(null, null, null, null, keywords);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //        assertEquals(Arrays.asList(PULL_UP, PUSH_UP, SIT_UP, SQUAT), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 20,
      "leeweiminsg": 12,
      "Nauman-S": 10,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private ExerciseModel expectedModel \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 4,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        model \u003d new ExerciseModelManager(getTypicalExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        expectedModel \u003d new ExerciseModelManager(model.getExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "Nauman-S": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PUSH_UP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SIT_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_SIT_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SIT_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_SIT_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSH_UP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SIT_UP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GYM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * and unit tests for UpdateExerciseCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "class UpdateCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private ExerciseModel model \u003d new ExerciseModelManager(getTypicalExerciseBook(), null, new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder(editedExercise).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand updateExerciseCommand \u003d new UpdateCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()), null,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index indexLastExercise \u003d Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise lastExercise \u003d model.getFilteredExerciseList().get(indexLastExercise.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseBuilder exerciseInList \u003d new ExerciseBuilder(lastExercise);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise editedExercise \u003d exerciseInList.withName(VALID_NAME_SIT_UP).withDescription(VALID_DESCRIPTION_SIT_UP)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .withDate(VALID_DATE_SIT_UP).withCalories(VALID_CALORIES_SIT_UP).withTags(VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .withName(VALID_NAME_SIT_UP)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_SIT_UP)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                .withDate(VALID_DATE_SIT_UP).withCalories(VALID_CALORIES_SIT_UP).withTags(VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand updateExerciseCommand \u003d new UpdateCommand(indexLastExercise, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()), null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.setExercise(lastExercise, editedExercise);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand updateExerciseCommand \u003d new UpdateCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UpdateCommand.EditExerciseDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()), null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exerciseInFilteredList \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder(exerciseInFilteredList).withName(VALID_NAME_PUSH_UP).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand updateExerciseCommand \u003d new UpdateCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        ExerciseModel expectedModel \u003d new ExerciseModelManager(new ExerciseBook(model.getExerciseBook()), null,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandSuccess(updateExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_duplicateExerciseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise firstExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                      new EditExerciseDescriptorBuilder(firstExercise).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand updateExerciseCommand \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "              new UpdateCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandFailure(updateExerciseCommand, model, UpdateCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // edit exercise in filtered list into a duplicate in exercise book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exerciseInList \u003d model.getExerciseBook()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        .getExerciseList().get(INDEX_SECOND_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand updateExerciseCommand \u003d new UpdateCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                          new EditExerciseDescriptorBuilder(exerciseInList)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                          .build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandFailure(updateExerciseCommand, model, UpdateCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * but smaller than size of exercise book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void execute_invalidExerciseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of exercise book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExerciseBook().getExerciseList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand updateExerciseCommand \u003d new UpdateCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertCommandFailure(updateExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_EXERCISE, DESC_PUSH_UP);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new UpdateCommand.EditExerciseDescriptor(DESC_PUSH_UP);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_EXERCISE, copyDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_EXERCISE, DESC_PUSH_UP)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_EXERCISE, DESC_SIT_UP)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 9,
      "leeweiminsg": 167,
      "Nauman-S": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_SIT_UP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_SIT_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_SIT_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MUSCLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_ARM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_CHEST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SIT_UP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GYM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_ARM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_CHEST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GYM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOUSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.TYPICAL_EXERCISE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(TYPICAL_EXERCISE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_SIT_UP + NAME_DESC_PUSH_UP"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_SIT_UP"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_SIT_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //multiple calories"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_SIT_UP"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new AddCommand(expectedExercise));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // multiple muscle tags - all accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise expectedExerciseMultipleMuscleTags \u003d new ExerciseBuilder(TYPICAL_EXERCISE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withMuscleTags(VALID_MUSCLE_CHEST, VALID_MUSCLE_ARM)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + DATE_DESC_PUSH_UP + CALORIES_DESC_SIT_UP"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + MUSCLE_DESC_CHEST + MUSCLE_DESC_ARM"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + TAG_DESC_GYM, new AddCommand(expectedExerciseMultipleMuscleTags));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise expectedExerciseMultipleTags \u003d new ExerciseBuilder(TYPICAL_EXERCISE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withTags(VALID_TAG_GYM, VALID_TAG_HOUSE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + DATE_DESC_PUSH_UP + CALORIES_DESC_SIT_UP"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + MUSCLE_DESC_CHEST + TAG_DESC_GYM + TAG_DESC_HOUSE, new AddCommand(expectedExerciseMultipleTags));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //missing name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_ARM + TAG_DESC_HOUSE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //missing description"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_ARM + TAG_DESC_HOUSE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid name"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                INVALID_NAME_DESC + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid description"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + INVALID_DATE_DESC + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //invalid calories"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + INVALID_CALORIES_DESC + MUSCLE_DESC_CHEST + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        //invalid muscle tags"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + INVALID_MUSCLE_DESC + TAG_DESC_GYM,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                MuscleTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        //invalid tags"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 55,
      "leeweiminsg": 55,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import seedu.address.logic.commands.CommandForExercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void assertParseSuccess(ExerciseParser parser, String userInput, CommandForExercise expectedCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            CommandForExercise command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static void assertParseSuccess(AddCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                          CommandForExercise expectedCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            CommandForExercise command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void assertParseFailure(ExerciseParser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 3,
      "Nauman-S": 14,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_SIT_UP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_SIT_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_SIT_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MUSCLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_ARM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_CHEST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SIT_UP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GYM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_PUSH_UP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_SIT_UP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PUSH_UP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SIT_UP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUSH_UP;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_SIT_UP;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_ARM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_CHEST;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSH_UP;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SIT_UP;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GYM;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOUSE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String MUSCLE_EMPTY \u003d \" \" + PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private UpdateExerciseCommandParser parser \u003d new UpdateExerciseCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_PUSH_UP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_NAME_PUSH_UP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_NAME_PUSH_UP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CALORIES_DESC, Calories.MESSAGE_CONSTRAINTS); // invalid calories"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MUSCLE_DESC, MuscleTag.MESSAGE_CONSTRAINTS); // invalid muscle tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, ExerciseTag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // invalid name followed by valid description"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + DESCRIPTION_DESC_PUSH_UP, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // valid name followed by invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_PUSH_UP + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Exercise} being edited,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GYM + TAG_DESC_HOUSE + TAG_EMPTY, ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GYM + TAG_EMPTY + TAG_DESC_HOUSE, ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_GYM + TAG_DESC_HOUSE, ExerciseTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \"1\" + MUSCLE_DESC_CHEST + MUSCLE_DESC_ARM + MUSCLE_EMPTY, MuscleTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \"1\" + MUSCLE_DESC_CHEST + MUSCLE_EMPTY + MUSCLE_DESC_ARM, MuscleTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                \"1\" + MUSCLE_EMPTY + MUSCLE_DESC_CHEST + MUSCLE_DESC_ARM, MuscleTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        + VALID_DATE_PUSH_UP + VALID_CALORIES_PUSH_UP,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP + TAG_DESC_GYM"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + DATE_DESC_PUSH_UP + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + MUSCLE_DESC_ARM + TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withDescription(VALID_DESCRIPTION_PUSH_UP)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withCalories(VALID_CALORIES_PUSH_UP)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withMuscleTags(VALID_MUSCLE_CHEST, VALID_MUSCLE_ARM)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .withTags(VALID_TAG_GYM, VALID_TAG_HOUSE)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                    .build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_PUSH_UP).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withDescription(VALID_DESCRIPTION_PUSH_UP).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withDate(VALID_DATE_PUSH_UP).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // calories"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CALORIES_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withCalories(VALID_CALORIES_PUSH_UP).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // muscles worked"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MUSCLE_DESC_CHEST;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withMuscleTags(VALID_MUSCLE_CHEST).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withTags(VALID_TAG_HOUSE).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_HOUSE"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + NAME_DESC_PUSH_UP + DESCRIPTION_DESC_PUSH_UP + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + CALORIES_DESC_PUSH_UP + MUSCLE_DESC_CHEST + TAG_DESC_HOUSE"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + NAME_DESC_SIT_UP + DESCRIPTION_DESC_SIT_UP + DATE_DESC_SIT_UP"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + CALORIES_DESC_SIT_UP + MUSCLE_DESC_ARM + TAG_DESC_GYM;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_SIT_UP)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_SIT_UP)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withDate(VALID_DATE_SIT_UP)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withCalories(VALID_CALORIES_SIT_UP)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withMuscleTags(VALID_MUSCLE_CHEST, VALID_MUSCLE_ARM)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withTags(VALID_TAG_HOUSE, VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_PUSH_UP;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_NAME_PUSH_UP).build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_PUSH_UP + INVALID_NAME_DESC + DATE_DESC_PUSH_UP"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + CALORIES_DESC_PUSH_UP + NAME_DESC_PUSH_UP"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + MUSCLE_DESC_CHEST + TAG_DESC_HOUSE;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_PUSH_UP)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withCalories(VALID_CALORIES_PUSH_UP).withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .withMuscleTags(VALID_MUSCLE_CHEST).withTags(VALID_TAG_HOUSE)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parse_resetMuscleTags_success() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MUSCLE_EMPTY;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withMuscleTags().build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new EditExerciseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "leeweiminsg": 162,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExerciseBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.ExerciseUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class ExerciseBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private final ExerciseBookParser parser \u003d new ExerciseBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ExerciseUtil.getAddCommand(exercise));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        AddCommand newCommand \u003d new AddCommand(exercise);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(newCommand, command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXERCISE.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXERCISE), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCommand_archive() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Path path \u003d Paths.get(\"testing.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ArchiveCommand command \u003d (ArchiveCommand) parser.parseCommand(ArchiveCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + \" f/testing.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(new ArchiveCommand(path), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(exercise).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + INDEX_FIRST_EXERCISE.getOneBased() + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                + ExerciseUtil.getEditExerciseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_EXERCISE, descriptor), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Name name \u003d new Name(\"Push Up\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Description description \u003d new Description(\"test\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Date date \u003d new Date(\"10-10-2020\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Calories calories \u003d new Calories(\"224\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        + \"n/Push Up d/test at/10-10-2020 c/224 k/foo bar baz\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(new FindCommand(new PropertiesMatchPredicateForExercise(name,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                description, date, calories, keywords)), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 17,
      "leeweiminsg": 29,
      "Nahoyhp": 3,
      "Nauman-S": 1,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import seedu.address.model.exercise.PropertiesMatchPredicateForExercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new FindCommand(new PropertiesMatchPredicateForExercise(null, null, null,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        null, Arrays.asList(\"Push\", \"Walk\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser, \" k/Push Walk\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertParseSuccess(parser, \" k/\\n Push \\n \\t Walk  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_NAME \u003d \"run\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \"; // description should not be empty"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-10-10\"; // date of incorrect format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"abc\"; // calories should be numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_MUSCLE \u003d \"#chest\"; //no symbol allowed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#gym\"; //no symbol allowed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_NAME \u003d \"Push Up\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Push Up Description\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_DATE \u003d \"10-10-2020\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_CALORIES \u003d \"100\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_MUSCLE_1 \u003d \"chest\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_MUSCLE_2 \u003d \"arm\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"gym\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"house\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExerciseName((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExerciseName(INVALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseExerciseName(VALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseExerciseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCalories_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalories(INVALID_CALORIES));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCalories_validValueWithoutWhitespace_returnsCalories() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Calories expectedCalories \u003d new Calories(VALID_CALORIES);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(VALID_CALORIES));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseCalories_validValueWithWhitespace_returnsTrimmedCalories() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String caloriesWithWhitespace \u003d WHITESPACE + VALID_CALORIES + WHITESPACE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Calories expectedCalories \u003d new Calories(VALID_CALORIES);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(caloriesWithWhitespace));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMuscleTag(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMuscleTag(INVALID_MUSCLE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTag_validValueWithoutWhitespace_returnsMuscleTag() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        MuscleTag expectedTag \u003d new MuscleTag(VALID_MUSCLE_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseMuscleTag(VALID_MUSCLE_1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTag_validValueWithWhitespace_returnsTrimmedMuscleTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_MUSCLE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        MuscleTag expectedTag \u003d new MuscleTag(VALID_MUSCLE_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseMuscleTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMuscleTags(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTags_collectionWithInvalidMuscleTags_throwsParseException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMuscleTags("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                Arrays.asList(VALID_MUSCLE_1, INVALID_MUSCLE)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(ParserUtil.parseExerciseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void parseMuscleTags_collectionWithValidMuscleTags_returnsMuscleTagSet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cMuscleTag\u003e actualMuscleTagSet \u003d ParserUtil.parseMuscleTags(Arrays.asList(VALID_MUSCLE_1, VALID_MUSCLE_2));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cMuscleTag\u003e expectedMuscleTagSet \u003d new HashSet\u003cMuscleTag\u003e("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                Arrays.asList(new MuscleTag(VALID_MUSCLE_1), new MuscleTag(VALID_MUSCLE_2)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedMuscleTagSet, actualMuscleTagSet);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExerciseTag(null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExerciseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseTag expectedTag \u003d new ExerciseTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseExerciseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseTag expectedTag \u003d new ExerciseTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseExerciseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExerciseTags(null));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExerciseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(ParserUtil.parseExerciseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e actualTagSet \u003d ParserUtil.parseExerciseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e expectedTagSet \u003d new HashSet\u003cExerciseTag\u003e("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                Arrays.asList(new ExerciseTag(VALID_TAG_1), new ExerciseTag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 108,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExerciseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExerciseModelManager.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final ExerciseBook exerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(Collections.emptyList(), exerciseBook.getExerciseList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseBook.resetData(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*ExerciseBook is using stubs Exercise and its componenet. So unable to assert equals"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        getTypicalExerciseBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook newData \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.resetData(newData);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(newData, exerciseBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void resetData_withDuplicateExercises_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        AddressBookTest.AddressBookStub newData \u003d new AddressBookTest.AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseBook.hasExercise(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Omitted due to the use of Stubs in Exercise\u0027s property"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(exerciseBook.hasExercise(SIT_UP));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasExercise_exerciseInExerciseBook_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(SIT_UP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(exerciseBook.hasExercise(SIT_UP));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(SIT_UP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exerciseBook.getExerciseList().remove(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 1,
      "Nahoyhp": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExerciseModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class ExerciseModelManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseModelManager modelManager \u003d new ExerciseModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(new ExerciseBook(), new ExerciseBook(modelManager.getExerciseBook()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExerciseBookFilePath(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Not available because UserPrefs still take in AddressBook instead of ExerciseBook"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExerciseBookFilePath_validPath_setsExerciseBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.setExerciseBookFilePath(path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(path, modelManager.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void hasPerson_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExercise(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Omitted due to the use of Stubs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.hasExercise(PUSH_UP));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager.addExercise(PUSH_UP);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(modelManager.hasExercise(PUSH_UP));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Omitted due to the use of Stubs"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook exerciseBook \u003d new ExerciseBookBuilder().withExercise(PUSH_UP).withExercise(SIT_UP).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook differentExerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        modelManager \u003d new ExerciseModelManager(exerciseBook, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseModelManager modelManagerCopy \u003d new ExerciseModelManager(exerciseBook, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(modelManager.equals(new ExerciseModelManager(differentExerciseBook, userPrefs)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 28,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/CaloriesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class CaloriesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_invalidCalories_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String invalidCalories \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Calories(invalidCalories));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidCalories() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null calories"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Calories.isValidCalories(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid calories"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid calories"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"9\")); // exactly 1 number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"93121534\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"124293842033123\")); // long number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.exercise.Date(invalidDate));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.exercise.Date.isValidDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Date.isValidDate(\"09-30-2020\")); // mm-dd-yyyy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Date.isValidDate(\"2020-09-30\")); // yyyy-mm-dd"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Date.isValidDate(\"30-09-2020\")); //dd-mm-yyyy"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.exercise.Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"finished today\")); // alphabets only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"2 times\")); // alphanumeric characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Description.isValidDescription(\"2 Times\")); // with capital letters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExerciseTagTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseTag(null));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseTag(invalidTagName));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseTag.isValidTagName(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 5,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/MuscleTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class MuscleTagTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MuscleTag(null));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void constructor_invalidMuscleTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MuscleTag(invalidTagName));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void isValidMuscleTagName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MuscleTag.isValidMuscleTagName(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.exercise.Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.exercise.Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.exercise.Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertFalse(seedu.address.model.exercise.Name.isValidName(\"run*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"pull up\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"2nd pull up\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertTrue(seedu.address.model.exercise.Name.isValidName(\"Run\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertTrue(Name.isValidName(\"pull up 2 times\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 32,
      "leeweiminsg": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/UniqueExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUSH_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOUSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.PUSH_UP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.SIT_UP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void contains_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void contains_exerciseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(PUSH_UP));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void contains_exerciseInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(PUSH_UP));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void add_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void add_duplicateExercise_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.add(PUSH_UP));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_nullTargetExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.updateExercise(null, PUSH_UP));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_nullEditedExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.updateExercise(PUSH_UP, null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_targetExerciseNotInList_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.updateExercise(PUSH_UP, PUSH_UP));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void setExercise_editedExerciseIsSameExercise_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        uniqueExerciseList.setExercise(PUSH_UP, PUSH_UP);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedUniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void setExercise_editedExerciseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Exercise editedPushUp \u003d new ExerciseBuilder(PUSH_UP).withDescription(VALID_DESCRIPTION_PUSH_UP)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .withTags(VALID_TAG_HOUSE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        uniqueExerciseList.setExercise(PUSH_UP, editedPushUp);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedUniqueExerciseList.add(editedPushUp);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_editedExerciseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.updateExercise(PUSH_UP, SIT_UP);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        expectedUniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_editedExerciseHasNonUniqueIdentity_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.updateExercise(PUSH_UP, SIT_UP));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove_exerciseDoesNotExist_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.remove(PUSH_UP));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void remove_existingExercise_removesExercise() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.remove(PUSH_UP);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void setExercises_nullUniqueExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((UniqueExerciseList) null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_uniqueExerciseList_replacesOwnListWithProvideduniqueExerciseList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        expectedUniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.setExercises(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(SIT_UP);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.setExercises(exerciseList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        expectedUniqueExerciseList.add(SIT_UP);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercises_listWithDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        List\u003cExercise\u003e duplicateExerciseList \u003d Arrays.asList(PUSH_UP, PUSH_UP);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setExercises(duplicateExerciseList));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Executable supplier \u003d () -\u003e uniqueExerciseList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, supplier);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void checkCaloriesForDay_emptyList_returnFalse() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void addExercise_checkCaloriesByDay() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(uniqueExerciseList.getCaloriesByDay().get(PUSH_UP.getDate().value),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                Integer.parseInt(PUSH_UP.getCalories().toString()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setExercise_checkCaloriesByDay() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.add(PUSH_UP);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        uniqueExerciseList.updateExercise(PUSH_UP, SIT_UP);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.getCaloriesByDay().containsKey(PUSH_UP.getDate().value));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(uniqueExerciseList.getCaloriesByDay().get(PUSH_UP.getDate().value),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                Integer.parseInt(SIT_UP.getCalories().toString()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertTrue(uniqueExerciseList.getCaloriesByDay().containsKey(SIT_UP.getDate().value));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(uniqueExerciseList.getCaloriesByDay().get(SIT_UP.getDate().value),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                Integer.parseInt(SIT_UP.getCalories().toString()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 24,
      "Nahoyhp": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/WeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static final Calories CALORIES_1000 \u003d new Calories(\"1000\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Weight(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/ExerciseStorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseStorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private StorageManagerForExercise storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonExerciseBookStorage exerciseBookStorage \u003d new JsonExerciseBookStorage(getTempFilePath(\"eb\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        storageManager \u003d new StorageManagerForExercise(exerciseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void exerciseBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * {@link JsonExerciseBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonExerciseBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseBook original \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        storageManager.saveExerciseBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ReadOnlyExerciseBook retrieved \u003d storageManager.readExerciseBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(original, new ExerciseBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertNotNull(storageManager.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 11,
      "Nahoyhp": 5,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExercise.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.TypicalExercise.PUSH_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Test for invalid input are commented out due to the use of stubs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class JsonAdaptedExerciseTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String INVALID_NAME \u003d \"P@ss Fail\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"@@@@@\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_MUSCLE \u003d \"#abs\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String VALID_NAME \u003d PUSH_UP.getName().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d PUSH_UP.getDescription().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String VALID_DATE \u003d PUSH_UP.getDate().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    // Always valid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final String VALID_CALORIES \u003d PUSH_UP.getCalories().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final List\u003cJsonAdaptedMuscleTag\u003e VALID_MUSCLES \u003d PUSH_UP.getMuscleTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .map(JsonAdaptedMuscleTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private static final List\u003cJsonAdaptedExerciseTag\u003e VALID_TAGS \u003d PUSH_UP.getExerciseTags().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .map(JsonAdaptedExerciseTag::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void toModelType_validExerciseDetails_returnsExercise() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(PUSH_UP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertEquals(PUSH_UP, exercise.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(INVALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                VALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                VALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, INVALID_DESCRIPTION, VALID_DATE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, null,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                                VALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        INVALID_DATE, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        null, VALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                                        VALID_DATE, INVALID_CALORIES, VALID_MUSCLES, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void toModelType_invalidMuscleTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cJsonAdaptedMuscleTag\u003e invalidMuscleTags \u003d new ArrayList\u003c\u003e(VALID_MUSCLES);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        invalidMuscleTags.add(new JsonAdaptedMuscleTag(INVALID_MUSCLE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        VALID_DATE, VALID_CALORIES, invalidMuscleTags, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, exercise::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        List\u003cJsonAdaptedExerciseTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        invalidTags.add(new JsonAdaptedExerciseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                        VALID_DATE, VALID_CALORIES, VALID_MUSCLES, invalidTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        assertThrows(IllegalValueException.class, exercise::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "leeweiminsg": 69,
      "Nahoyhp": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonExerciseBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ReadOnlyExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class JsonExerciseBookStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \"data\", \"JsonExerciseBookStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExerciseBook(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private java.util.Optional\u003cReadOnlyExerciseBook\u003e readExerciseBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new JsonExerciseBookStorage(Paths.get(filePath)).readExerciseBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertFalse(readExerciseBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"notJsonFormatExerciseBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"invalidExerciseBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /* Unable to test due to the use of stubs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"invalidAndValidExerciseAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExerciseBook.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ExerciseBook original \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        JsonExerciseBookStorage jsonExerciseBookStorage \u003d new JsonExerciseBookStorage(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        jsonExerciseBookStorage.saveExerciseBook(original, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ReadOnlyExerciseBook readBack \u003d jsonExerciseBookStorage.readExerciseBook(filePath).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(original, new ExerciseBook(readBack));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        original.addExercise(SQUAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        original.removeExercise(PUSH_UP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        jsonExerciseBookStorage.saveExerciseBook(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        readBack \u003d jsonExerciseBookStorage.readExerciseBook(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(original, new ExerciseBook(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        original.addExercise(SQUAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        jsonExerciseBookStorage.saveExerciseBook(original); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        readBack \u003d jsonExerciseBookStorage.readExerciseBook().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(original, new ExerciseBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveExerciseBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void saveExerciseBook(ReadOnlyExerciseBook exerciseBook, String filePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new JsonExerciseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    .saveExerciseBook(exerciseBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseBook(new ExerciseBook(), null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "// TO implement"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExerciseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class EditExerciseDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private EditExerciseDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder(EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.descriptor \u003d new EditExerciseDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an {@code EditExerciseDescriptorBuilder} with fields containing {@code exercise}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder(Exercise exercise) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setName(exercise.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDate(exercise.getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDescription(exercise.getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setCalories(exercise.getCalories());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setMuscleTags(exercise.getMuscleTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setTags(exercise.getExerciseTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Calories} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setCalories(new Calories(calories));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the {@code muscleTags} into a {@code Set\u003cMuscleTag\u003e} and set it to the {@code EditExerciseDescriptor}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withMuscleTags(String... muscleTags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cMuscleTag\u003e tagSet \u003d Stream.of(muscleTags).map(MuscleTag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setMuscleTags(tagSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cExerciseTag\u003e} and set it to the {@code EditExerciseDescriptor}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        Set\u003cExerciseTag\u003e tagSet \u003d Stream.of(tags).map(ExerciseTag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public EditExerciseDescriptor build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A utility class to help with building Exercisebook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * {@code ExerciseBook ab \u003d new ExerciseBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ExerciseBook exerciseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBookBuilder(ExerciseBook exerciseBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.exerciseBook \u003d exerciseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Adds a new {@code Person} to the {@code ExerciseBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBookBuilder withExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        exerciseBook.addExercise(exercise);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Calories;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * A utility class to help with building Exercise objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Push up\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Testing 2254\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"09-10-2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final String DEFAULT_CALORIES \u003d \"224\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final String DEFAULT_MUSCLES \u003d \"chest\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Set\u003cMuscleTag\u003e muscleTags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    private Set\u003cExerciseTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Creates a {@code ExerciseBuilder} with the default details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        muscleTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code ExerciseToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        name \u003d exerciseToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        description \u003d exerciseToCopy.getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        date \u003d exerciseToCopy.getDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        calories \u003d exerciseToCopy.getCalories();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        muscleTags \u003d new HashSet\u003c\u003e(exerciseToCopy.getMuscleTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(exerciseToCopy.getExerciseTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the {@code Name} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Sets the {@code Description} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Date} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Sets the {@code Calories} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ExerciseBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the {@code muscleTags} into a {@code Set\u003cMuscleTag\u003e}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * and set it to the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseBuilder withMuscleTags(String ... muscleTags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.muscleTags \u003d SampleDataUtil.getMuscleTagSet(muscleTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cExerciseTag\u003e} and set it to the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public ExerciseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        this.tags \u003d SampleDataUtil.getExerciseTagSet(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new Exercise(name, description, date, calories, muscleTags, tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 38,
      "Nahoyhp": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.ExerciseModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExerciseTestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns the middle index of the exercise in the {@code model}\u0027s exercise list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Index getMidIndex(ExerciseModel model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns the last index of the exercise in the {@code model}\u0027s exercise list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Index getLastIndex(ExerciseModel model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns the exercise in the {@code model}\u0027s exercise list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static Exercise getExercise(ExerciseModel model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return model.getFilteredExerciseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 12,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.ExerciseTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.model.exercise.MuscleTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " * A utility class for Exercise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "public class ExerciseUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static String getAddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExerciseDetails(exercise);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns the part of command string for the given {@code exercise}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static String getExerciseDetails(Exercise exercise) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_NAME + exercise.getName().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + exercise.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_DATE + exercise.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        sb.append(PREFIX_CALORIES + exercise.getCalories().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        exercise.getMuscleTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            s -\u003e sb.append(PREFIX_MUSCLE + s.muscleTagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        exercise.getExerciseTags().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static String getEditExerciseDescriptorDetails(UpdateCommand.EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(description.toString()).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        descriptor.getCalories().ifPresent(calories -\u003e sb.append(PREFIX_CALORIES)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                .append(calories.toString()).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (descriptor.getMuscleTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            Set\u003cMuscleTag\u003e muscleTags \u003d descriptor.getMuscleTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (muscleTags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                sb.append(PREFIX_MUSCLE).append(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                muscleTags.forEach(s -\u003e sb.append(PREFIX_MUSCLE).append(s.muscleTagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            Set\u003cExerciseTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExercise.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_PUSH_UP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_SIT_UP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PUSH_UP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SIT_UP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUSH_UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_SIT_UP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_ARM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_CHEST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PUSH_UP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SIT_UP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GYM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.ExerciseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A utility class containing a list of {@code Exercise} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class TypicalExercise {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Exercise TYPICAL_EXERCISE \u003d new ExerciseBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_PUSH_UP).withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withCalories(VALID_CALORIES_PUSH_UP).withMuscleTags(VALID_MUSCLE_CHEST).withTags(VALID_TAG_GYM).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Exercise PUSH_UP \u003d new ExerciseBuilder().withName(VALID_NAME_PUSH_UP)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_PUSH_UP).withDate(VALID_DATE_PUSH_UP)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withCalories(VALID_CALORIES_PUSH_UP).withTags(VALID_TAG_GYM).withMuscleTags(VALID_MUSCLE_CHEST).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Exercise SIT_UP \u003d new ExerciseBuilder().withName(VALID_NAME_SIT_UP)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_SIT_UP).withDate(VALID_DATE_SIT_UP)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withCalories(VALID_CALORIES_SIT_UP).withMuscleTags(VALID_MUSCLE_ARM).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise RUN \u003d new ExerciseBuilder().withName(\"Run\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 3\").withDate(\"17-10-2020\").withCalories(\"12348\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMuscleTags(\"leg\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise WALK \u003d new ExerciseBuilder().withName(\"Walk\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 4\").withDate(\"24-10-2020\").withCalories(\"12349\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMuscleTags(\"leg\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise PULL_UP \u003d new ExerciseBuilder().withName(\"Pull up\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 5\").withDate(\"31-10-2020\").withCalories(\"123400\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMuscleTags(\"arm\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static final Exercise SQUAT \u003d new ExerciseBuilder().withName(\"Squat\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withDescription(\"Test 6\").withDate(\"07-11-2020\").withCalories(\"255491\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            .withMuscleTags(\"leg\").build();;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    private TypicalExercise() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "     * Returns an {@code ExerciseBook} with all the typical Exercises."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static ExerciseBook getTypicalExerciseBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        ExerciseBook eb \u003d new ExerciseBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (Exercise exercise : getTypicalExercises()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "            eb.addExercise(exercise);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static List\u003cExercise\u003e getTypicalExercises() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PUSH_UP, PULL_UP, SIT_UP, RUN, WALK, SQUAT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "Liu-2001": 1,
      "leeweiminsg": 34,
      "Nahoyhp": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "    public static final Index INDEX_THIRD_EXERCISE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "import seedu.address.ExerciseMainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeweiminsg"
        },
        "content": "        URL testFileUrl \u003d ExerciseMainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeweiminsg": 2,
      "-": 112
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Royxuzeng"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Royxuzeng": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/src/test/data/sandbox/serialize.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "  \"name\" : \"This is a test class\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "  \"listOfLocalDateTimes\" : [ \"-999999999-01-01T00:00:00\", \"+999999999-12-31T23:59:59.999999999\", \"0001-01-01T01:01:00\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "  \"mapOfIntegerToString\" : {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    \"1\" : \"One\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    \"2\" : \"Two\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    \"3\" : \"Three\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 9
    }
  },
  {
    "path": "testingForExercise.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World1\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 2\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World2\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 3\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-30\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World3\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 4\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-40\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"World4\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 5\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-50\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 2\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello2\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 3\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-30\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello3\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 4\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-40\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello4\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 5\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-50\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 1\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello1\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 2\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-20\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello2\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 3\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-30\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello3\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 4\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-40\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"name\" : \"Hello4\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"description\" : \"Test 5\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"date\" : \"10-10-50\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \"calories\" : \"100\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 78
    }
  }
]
